{"posts":[{"title":"Hexo博客架设日记","text":"好久之前就想把博客搭起来的来着，结果一直咕到了现在，终于有空来搭啦 ✿✿ヽ(°▽°)ノ✿ 博客使用 Hexo 搭建，博客源码位于 https://github.com/Centaurus99/centaurus99.github.io 的 master 分支，静态页面同步部署于 gh-pages 分支和个人 VPS 上。 下面是搭建（踩坑）记录~ 其实是搭完后的回忆 Hexo 安装对着官方文档搞，没啥好说 QWQ。 先装 nodejs，我这儿装的版本是 v16.13.2。 然后 npm install -g hexo-cli。 最后到博客文件夹下 hexo init，然后 npm install，完成！ GitHub Pages 的自动部署关于如何使用 Hexo 写博客之类的官方文档里都有介绍，这儿就记录一点自动化部署的设置吧。 为了方便管理，我这儿将博客源码和部署后的静态页面放在了同一个库中，下面的配置以我的配置为例。 为了使用 用户名.github.io 访问，需要创建名为 用户名.github.io 的存储库。 配置 Hexo首先配置运行 hexo deploy 时的部署方式。 先安装 Git 部署插件： 1npm install hexo-deployer-git --save 然后在 _config.yml 中修改配置： 1234deploy: type: git repository: git@github.com:Centaurus99/centaurus99.github.io.git branch: gh-pages 这样然后运行： 12hexo generatehexo deploy 应该就能在仓库的对应分支看到部署好的静态页面啦~ 在仓库的 Settings &gt; Pages 中将 Source 设为 gh-pages 分支，然后就可以通过 用户名.github.io 访问到博客了。 如果以后还要拓展部署方式，还可以继续往配置里面添加，如果用到了再来更新~ 配置 Github ActionsGithub Actions 是个好东西，搞自动工作流非常方便，白嫖真香！ 这个部分基本是参照大佬的博客完成的，参见：https://tommy.net.cn/2020/08/06/deploy-hexo-with-github-actions/ 仅对配置文件做了一点更新和修改，最终如下： 2022-01-15 更新：由于将主题以子模块的形式加入版本控制，添加了 submodules: 'recursive' 表示递归检出子模块 2022-09-02 更新：添加环境变量 TZ: Asia/Shanghai 设定时区，确保本地和远端生成的日期路径相同 123456789101112131415161718192021222324252627282930313233343536373839404142434445name: Hexo Deployon: push: branches: - masterenv: TZ: Asia/Shanghaijobs: build: runs-on: ubuntu-latest if: github.event.repository.owner.id == github.event.sender.id steps: - name: Checkout source uses: actions/checkout@v2 with: ref: master submodules: 'recursive' - name: Setup Node.js uses: actions/setup-node@v1 with: node-version: '16' - name: Setup Hexo env: ACTION_DEPLOY_KEY: ${{ secrets.HEXO_DEPLOY_KEY }} run: | mkdir -p ~/.ssh/ echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa chmod 700 ~/.ssh chmod 600 ~/.ssh/id_rsa ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts git config --global user.email &quot;1102569568@qq.com&quot; git config --global user.name &quot;Centaurus99&quot; npm install hexo-cli -g npm install - name: Hexo deploy run: | hexo clean hexo deploy 这样，当我更新博客源码时，Github 就会帮我自动部署好静态页面啦。 配置 Webhooks手头还有一台 VPS，还是打算把它作为博客的服务器。 Github 上有个功能叫 Webhooks，可以在你的库发生一些动作（比如有人 push 东西上来）的时候对着一个网址发个请求。利用这个就可以在更新时通知我的 VPS 去 pull 最新的静态分支，从而实现自动部署了。 关于 Web 服务器的搭建，Nginx 的使用这里就不记录了。 摆烂咯！ Webhooks 的使用也是学习大佬的博客，参见：https://maphical.cn/2020/03/build-blog-using-hexo/ 在部署这个的过程中遇到了一堆奇奇怪怪的问题，由于时间久远了记不太清了，这里就不做记录了。 摆烂咯！×2 依稀记得一点点，比如脚本跑不起来考虑是 php 用户权限问题，最终通过给予它运行 git 命令的 sudo 权限解决；git pull 每次在更新的时候都需要处理冲突问题，原因是上面那个 git 部署工具每次会将这个分支完全覆盖，包括历史 commit 都会被删除，所以在一开始选择 pull 方式的时候要选择 rebase。 由于我把博客源码和静态页面放在了同一个存储库内，这会导致 Webhooks 每次更新会被激活两遍（两个分支的更新各激活一遍），不过问题不大。 总结关于博客的配置文件 _config.yml 可以在我的 Github 对于仓库找到。 这样就完成了博客的自动化部署的配置，下一篇博客将记录配置主题的吐血过程。 参考 https://hexo.io/zh-cn/docs/ https://tommy.net.cn/2020/08/06/deploy-hexo-with-github-actions/ https://maphical.cn/2020/03/build-blog-using-hexo/ https://wiki.eryajf.net/pages/47a507/","link":"/2022/01/14/Hexo%E5%8D%9A%E5%AE%A2%E6%9E%B6%E8%AE%BE%E6%97%A5%E8%AE%B0/"},{"title":"Icarus主题配置日记","text":"不知怎么发现了 Icarus 这个主题，看起来不错，尝试改一改换上。 为了方便自定义，采用源码安装的形式。其实踩了遍直接 npm 安装的坑 本篇博客将和我自定义后的主题 Icarus个人修改版 保持同步更新~ Icarus 安装配置 Hexo截至 2022-01-15，Icarus 还没有官方支持 Hexo 6.0.0，所以如果在这个时间点使用默认方式安装 Hexo 并装上了 6.0.0 版本的话，大概需要手动降级。 Updated 2022-01-16：Icarus 已有支持 Hexo 6.0.0 的预发布版本。 我是将 package.json 中将 Hexo 的版本从 6.0.0 改为了 5.4.0，然后 npm update。 然后在 _config.yml 中将主题改为 Icarus： 1theme: icarus 可以选择将不用的默认主题 hexo-theme-landscape 卸载掉 安装 Icarus为了方便对主题单独进行管理，我先将主题 Fork 一份到自己的 Github 上，即 Icarus个人修改版，然后通过 git 子模块进入到博客中来。 在博客根目录下使用如下命令： 1git submodule add https://github.com/Centaurus99/hexo-theme-icarus.git themes/icarus 这样，即使到一台新设备上，也只需要在 clone 之后在项目目录下多一步 git submodule update --init，就能获取到主题了。 此时直接开始运行会发现缺少依赖，手动安装一下即可（直接 npm 安装也可能会遇到这个问题，参考 Issue#855）。 1npm install --save bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3 配置 Icarus 主题在 themes/icarus/ 下没有配置文件的前提下（如果有就删了），可以先运行一下 hexo server ，会在博客根目录下自动生成 _config.icarus.yml 配置文件，在这里配置而不是主题目录下配置即可保持主题源码不含个人配置文件。 接着就可以对着 官方文档 配置自己的主题啦。 一些个性化的东西这里就不做记录了，记录一些功能的配置过程。 关于显示更新时间问题这实际是不是主题配置相关内容，只是记录一下，如果使用 Git 管理博客源码，记得把 _config.yml 中的 updated_option 改为 'date'，这样显示的更新时间是由博客 Front-matter 标记中的 updated 决定的，而不是由文件修改时间决定。 使用二次开发后的主题这里发现有个大佬对主题做了很多不错的修改 大佬博客，可以提个 PR 到自己这儿来使用。源码 这个代码直接使用可能会因为编码规范问题不通过 Code Linting 检查，npm run lint 可以查看问题，可以临时在 package.json 中的 scripts &gt; lint 对应的命令里添加 –fix 尝试自动修复，剩下的问题就要手动修复了。 评论插件由于 Gitalk 请求的账户权限太高，又不想使用依托于其他第三方服务的评论插件，同时 Valine 又有着安全问题，Isso 又感觉较为简陋，所以最终选择了 Waline 评论插件。正好手头上有个 VPS，可以自建评论服务器。 twikoo 也是一个很不错的评论插件，不过由于不支持独立部署（imaegoo/twikoo#163）以及外观上更喜欢 Waline 的缘故，最终还是选择了 Waline。 客户端配置参考 Icarus评论插件文档，只需要在 _config.icarus.yml 中修改评论插件配置就可以啦。 123comment: type: waline server_url: 服务端地址 服务端配置目前本博客的评论服务器为自建服务器，参考 官方文档 搭建，以下为搭建过程记录（方便重建的时候过来直接 copy）。 &gt; 创建对应用户以下过程可能需要 sudo 权限，并非必须步骤。 新建一个无法直接登录的用户用于运行 waline 服务： 1sudo adduser waline --disabled-login --disabled-password 切换到该用户： 1sudo su - waline 使用 npm 安装 waline： 1npm install @waline/vercel &gt; 配置 MySQL 数据库参考 大佬博客。 1234567891011--创建新的数据库，并设置数据库编码$ CREATE DATABASE 你的数据库名 DEFAULT CHARSET=utf8 DEFAULT COLLATE utf8_unicode_ci;--创建新的用户$ CREATE USER '你的用户名'@'你的服务器IP' IDENTIFIED BY '你的密码';--把数据库的管理权限给予刚刚创建的MySQL用户$ GRANT ALL PRIVILEGES ON *.* TO '你的用户名'@'%';--刷新权限，使用设置生效$ FLUSH PRIVILEGES; 执行数据库初始化脚本 waline.sql，可以先登录到对应 MySQL 账户下，然后： 12USE 你的数据库名;SOURCE 脚本文件位置; &gt; 配置评论通知参考 https://waline.js.org/guide/server/notification.html ，这里我只配置了邮件通知，见下面的配置文件。 &gt; 配置为服务运行可以先试一下能否直接运行，先配置环境变量： 123export MYSQL_DB=你的数据库名export MYSQL_USER=你的用户名export MYSQL_PASSWORD=你的密码 然后尝试运行： 1node node_modules/@waline/vercel/vanilla.js 如果没啥问题，就可以配置成服务了。 编辑文件 /etc/systemd/system/waline.service，如下配置： /etc/systemd/system/waline.service12345678910111213141516171819202122[Unit]Description=Waline Comment Server[Service]Type=simpleUser=walineWorkingDirectory=/home/walineExecStart=/usr/bin/node /home/waline/node_modules/@waline/vercel/vanilla.jsEnvironment=MYSQL_DB=你的数据库名Environment=MYSQL_USER=你的用户名Environment=MYSQL_PASSWORD=你的密码Environment=SMTP_SERVICE=SMTP 邮件发送服务提供商Environment=SMTP_USER=SMTP 邮件发送服务的用户名Environment=SMTP_PASS=SMTP 邮件发送服务的密码Environment=SITE_NAME=网站名称Environment=SITE_URL=网站地址（要去除末尾的'/'）Environment=AUTHOR_EMAIL=博主邮箱Restart=on-failureRestartSec=5[Install]WantedBy=multi-user.target 然后使用 sudo systemctl enable --now waline.service 启动并设为开机自启动。 之后配置 Web 服务器转发到本地 8360 端口即可。Nginx 里可以这样配置： 123456789101112location / { proxy_pass http://127.0.0.1:8360/; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header REMOTE-HOST $remote_addr; add_header X-Cache $upstream_cache_status; # cache add_header Cache-Control no-cache; expires 12h;} 然后就可以去博客里测试一下了，第一个注册的用户将成为管理员。 使用 patch-package 修改第三方模块主题中使用到的一些模块可能需要修改源码进行个性化，比如 hexo-component-inferno 中没有使用最新的 waline 前端模块，想要手动配置。可以使用 patch-package 来进行易于管理的修改。 首先 npm install patch-package 安装 然后在 node_modules/ 中修改源码 运行 npx patch-package package-name 生成补丁文件 在 package.json 中加入执行脚本： 123 &quot;scripts&quot;: {+ &quot;postinstall&quot;: &quot;npx patch-package&quot; }, 这样之后就可以在 npm install 时自动打上个性化补丁了。 暗黑主题参考：https://github.com/ppoffice/hexo-theme-icarus/issues/564 Waline 评论插件中代码高亮样式问题如图： 研究一番后发现， Waline 使用 Prism 进行代码高亮，它会直接对代码的不同高亮的部分赋上不同的类，这个类名不会使用 namespace 进行保护（加个前缀啥的），这样的类名有 tag , number 等等。 比如上图代码中的 html 标签 &lt;head&gt; 会格式化为： 1234567&lt;span class=&quot;token tag&quot;&gt; &lt;span class=&quot;token tag&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt; head &lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; 恰巧的是，Icarus 中使用了 CSS 框架 bulma，对 tag , number 之类的样式进行了设定，这就导致了评论区代码高亮出现问题。 在 Prism 的 Issue#1324 中也提到了该问题并给出了解决方法，但由于评论区的代码高亮是在评论服务端完成的，懒得去改服务端代码了，于是就自定义 CSS 进行覆盖，顺便也解决一下默认情况下评论区中黑色代码块和主题格格不入的问题，适配一下明暗两种主题。commit#974b1c9 效果： 参考 https://xiongyingqi.com/2019/02/01/use-git-submodules/ https://ppoffice.github.io/hexo-theme-icarus/Configuration/icarus用户指南-主题配置/ https://www.alphalxy.com/2019/03/customize-icarus/ https://confluence.jaytaala.com/display/TKB/Installing%2C+configuring%2C+and+integrating+isso+%28commenting+web+app%29+into+Confluence https://www.eula.club/使用Waline给Hexo静态博客添加评论系统 https://www.jianshu.com/p/a4b6e06e9f8d 附录：个性化修改记录主要记录一下我的主题源码有什么额外的改动。 a05b870 为解决关于 Code Linting 的问题，对代码格式进行了一些修正。 248a768 删除了 merge 过来的代码中的个人配置文件。 229543d 个人信息页面上将 关注我 修改为 关注。 e38ae7c 删除了 merge 过来代码中的个人 logo。 658686a 将黑幕添加到 css 中便于直接使用。 74416d2 添加暗黑主题，并在后面几个 commit 中进行适配。 1544bb3 修改了代码块中字体大小。 974b1c9 适配 Waline 评论插件中代码块的主题风格（包括黑白两种主题）。 6b5da24 例行同步上游更新。 dcb178c 修复上游更新中引起的纯文字 logo 边角被上层容器覆盖的问题。 3a3c5e6 修复上游更新中 Waline 评论插件升级至 v2 后 CSS 类开头从 v 改为 wl- 引起的问题。","link":"/2022/01/15/Icarus%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%97%A5%E8%AE%B0/"},{"title":"使用acme.sh自动配置泛域名证书","text":"一年前用学生邮箱白嫖的域名要到期了，于是换了个便宜的 .top 域名，正好之前忘了记录自动签证书的过程了，这里记录一下以后再换域名的时候直接来抄。 由于同时有很多子域名在用，于是决定申请泛域名证书，共用同一个。 主要参考 官方文档 ，记录了仅适用于我个人的配置过程。 安装 acme.sh1curl https://get.acme.sh | sh -s email=my@example.com 配置 DNS API参考 官方文档 泛域名证书似乎需要用 DNS 验证，我的 DNS 解析是托管在 Cloudflare 上的，先登录获取 API 密钥，这里我图省事直接用了 Global API Key，然后： 12export CF_Key=&quot;sdfsdfsdfljlbjkljlkjsdfoiwje&quot;export CF_Email=&quot;xxxx@sss.com&quot; 生成/安装证书生成证书： 1acme.sh --issue --dns dns_cf -d centaurus99.top -d *.centaurus99.top 安装证书： 1acme.sh --install-cert -d centaurus99.top --key-file /etc/v2ray/v2ray.key --fullchain-file /etc/v2ray/v2ray.crt --reloadcmd &quot;sudo nginx -s reload&quot; 据文档所说，DNS API 使用的变量，生成/安装参数都会被保存用于自动更新，60 天以后证书会自动更新并自动执行安装。下面再去 nginx 里配置证书位置即可。大功告成！ 附录123root@cc:~/.acme.sh# acme.sh -vhttps://github.com/acmesh-official/acme.shv3.0.5","link":"/2022/06/21/%E4%BD%BF%E7%94%A8acme-sh%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/"},{"title":"使用 Clash + AdGuard Home 在树莓派软路由上搭建广告屏蔽与透明代理服务器","text":"之前 【补档】树莓派折腾记录 中也记录过了相关内容，但是一年过来有些地方有些变动与改进，故单开一篇重新记录并长期更新。 配置 Clash 进行透明代理TODO 配置 AdGuard Home 进行广告屏蔽TODO 防火墙作为一个挂在公网下 7×24h 运行的网关服务器，进行一定的防火墙配置是必不可少的。这里主要通过 iptables 和 ip6tables 实现。 由于使用了 iptables-persistent 进行 iptables 规则可持久化，方便起见下面就直接把保存的规则文件贴上来了。 IPv4/etc/iptables/rules.v4123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263*filter# INPUT 和 FORWARD 链上默认 DROP 掉:INPUT DROP [0:0]:FORWARD DROP [0:0]:OUTPUT ACCEPT [0:0]# 防止外网使用内网 IP 欺骗-A INPUT -i eth0 -s 192.168.0.0/16 -j DROP# 允许本机、内网以及已建立的连接通过和转发-A INPUT -i lo -j ACCEPT-A INPUT -i docker0 -j ACCEPT-A INPUT -i wlx1cbfceb110dc -j ACCEPT-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT-A FORWARD -i lo -j ACCEPT-A FORWARD -i docker0 -j ACCEPT-A FORWARD -i wlx1cbfceb110dc -j ACCEPT-A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT# 开放外网 SSH, HTTP, HTTPS 连接-A INPUT -p tcp -m multiport --dport 22,80,443 -j ACCEPTCOMMIT*nat:PREROUTING ACCEPT [0:0]:INPUT ACCEPT [0:0]:POSTROUTING ACCEPT [0:0]:OUTPUT ACCEPT [0:0]# 新建 clash 链:clash - [0:0]# 内网 TCP 请求转发给 clash 链-A PREROUTING -s 192.168.0.0/16 -p tcp -j clash# 将转发后的包源地址修改为本机地址-A POSTROUTING -s 192.168.0.0/16 -o eth0 -j MASQUERADE# 访问本机和内网不经过 clash-A clash -d 10.0.0.0/8 -j RETURN-A clash -d 127.0.0.0/8 -j RETURN-A clash -d 169.254.0.0/16 -j RETURN-A clash -d 172.16.0.0/12 -j RETURN-A clash -d 192.168.0.0/16 -j RETURN-A clash -d 224.0.0.0/4 -j RETURN-A clash -d 240.0.0.0/4 -j RETURN# 访问校园网不经过 clash-A clash -d 59.66.0.0/16 -j RETURN-A clash -d 101.5.0.0/16 -j RETURN-A clash -d 101.6.0.0/16 -j RETURN-A clash -d 118.229.0.0/19 -j RETURN-A clash -d 166.111.0.0/16 -j RETURN-A clash -d 183.172.0.0/15 -j RETURN-A clash -d 202.112.39.2/32 -j RETURN-A clash -d 219.223.168.0/21 -j RETURN-A clash -d 219.223.176.0/20 -j RETURN# 其余请求重定向至 clash 端口-A clash -p tcp -j REDIRECT --to-ports 7891COMMIT IPv6参考：https://www.sixxs.net/wiki/IPv6_Firewalling 关于为何 DHCPv6 相比 DHCPv4 要额外设置，参考：https://unix.stackexchange.com/questions/452880/what-are-the-essential-iptables-rules-for-ipv6-to-work-properly RFC 4890 给出了针对 ICMPv6 的防火墙配置建议，由于时间有限未能细读与实现。 RFC 5095 废除了 Type 0 Routing Headers，防火墙中给予了实现。 Updated 2023-05-08： 在之前配置完 IPv6 NAT 网络后，并没有为 IPv6 配置代理。随着 IPv6 的不断推广，部分被墙网站出现了使用本地代理可以访问，透明代理无法访问的情况，包括但不限于 v2ex.com，Youtube 的视频播放等，于是也为 IPv6 配置了代理。原本使用的 Clash Premium 2022.08.26 版本的 IPv6 代理似乎有 bug，需要进行升级。由于想继续使用 AdGuardHome 统计 DNS 查询信息，故需要依赖 Clash 的 redir-host 功能（该功能在 Premium 2023.02.16 版本被弃用），因此选用 Clash Premium 2023.01.29 版本。巧合的是，Premium 2023.01.29 版本将核心版本升级到了 1.13.0，该版本添加了对 IPv6 REDIRECT 的支持（#2473），这让 IPv6 的代理成为了可能。相关改动已同步到下方规则文件中。 /etc/iptables/rules.v61234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253*filter:INPUT DROP [0:0]:FORWARD DROP [0:0]:OUTPUT ACCEPT [0:0]# Filter all packets that have RH0 headers. Refer to RFC 5095-A INPUT -m rt --rt-type 0 -j DROP-A FORWARD -m rt --rt-type 0 -j DROP-A OUTPUT -m rt --rt-type 0 -j DROP# Allow trusted link to INPUT and FORWARD-A INPUT -i lo -j ACCEPT-A INPUT -i docker0 -j ACCEPT-A INPUT -i wlx1cbfceb110dc -j ACCEPT-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT-A FORWARD -i lo -j ACCEPT-A FORWARD -i docker0 -j ACCEPT-A FORWARD -i wlx1cbfceb110dc -j ACCEPT-A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT# Allow DHCPv6-A INPUT -p udp --dport 546 -d fe80::/10 -j ACCEPT# Allow ICMPv6-A INPUT -p icmpv6 -j ACCEPT# Allow some server port-A INPUT -p tcp -m multiport --dport 22,80,443 -j ACCEPTCOMMIT*nat:PREROUTING ACCEPT [0:0]:INPUT ACCEPT [0:0]:POSTROUTING ACCEPT [0:0]:OUTPUT ACCEPT [0:0]:clash - [0:0]# 内网 TCP 请求转发给 clash 链-A PREROUTING -s fd22:41b7:e060::/64 -p tcp -j clash# 将转发后的包源地址修改为本机地址-A POSTROUTING -s fd22:41b7:e060::/64 -o eth0 -j MASQUERADE# 访问内网和校园网不经过 clash-A clash -d fd22:41b7:e060::/64 -j RETURN-A clash -d 2402:f000::/32 -j RETURN# 其余请求重定向至 clash 端口-A clash -p tcp -j REDIRECT --to-ports 17891COMMIT","link":"/2022/09/02/%E4%BD%BF%E7%94%A8-Clash-AdGuard-Home-%E5%9C%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%B9%BF%E5%91%8A%E5%B1%8F%E8%94%BD%E4%B8%8E%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"title":"【补档】树莓派折腾记录","text":"2021 年初的时候入手了树莓派 4b，然后暑假的时候好好折腾了一下，留下了一些零散的记录，在这里整理起来，之后哪天重建的时候还能来参考一下。 由于距离记录已经有一段时间了，可能有些内容会有偏差。 初步尝试参考：http://blog.dngz.net/RaspberryPiKodbox.htm 系统安装尝试装了适配树莓派的 Ubuntu，后来还是为了更好的硬件兼容性换成官方系统了。 当时本着尝鲜的想法，选择了仍在 beta 测试中的官方 64-bit 系统 2021-05-07-raspios-buster-arm64-lite，由于计划作为服务器运行，不需要图形桌面，所以就选择了 lite。 注：现在官方 64-bit 系统已经正式发布了（https://www.raspberrypi.com/news/raspberry-pi-os-64-bit/）。 官网也给出了烧写 SD 卡的工具 Raspberry Pi Imager，GUI 好看，烧录系统非常方便。 初始配置系统烧录完成后会有一个 boot 分区，做一些初始化的配置再进行第一次开机。 开启 ssh 服务在 boot 分区下新建一个空文件，名为 ssh。 开机自动连接 WIFI在 boot 分区下新建 wpa_supplicant.conf 文件，内容如下： 123456789country=CNctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdevupdate_config=1network={ ssid=&quot;wifi链接名&quot; psk=&quot;wifi密码&quot; key_mgmt=WPA-PSK} 初次启动插电开机~ ssh 可以连接，初始用户名 pi ，密码 raspberry。 记得修改密码。 解锁rootsudo passwd root 修改 root 密码。 sudo passwd --unlock root 解锁 root 用户。 由于安全原因，默认情况下 root 是不能用 ssh 登录的，如果一定需要的话，编辑 /etc/ssh/sshd_config，将配置项 #PermitRootLogin prohibit-password 修改为 PermitRootLogin yes，然后 sudo systemctl restart sshd 重启 ssh 服务即可。 校正时区sudo dpkg-reconfigure tzdata 选择 Asia/Shanghai 即可。 树莓派配置工具 raspi-configsudo raspi-config 换源参考：https://blog.csdn.net/baidu_26678247/article/details/108930421 如果遇到 The repository 'http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian buster InRelease' is not signed 错误，可以按如下操作添加公钥（参见：https://www.jianshu.com/p/c64deffb1308） 12gpg --keyserver keyserver.ubuntu.com --recv-keys 9165938D90FDDD2Egpg --export --armor 9165938D90FDDD2E | sudo apt-key add - 一些杂项GPIO使用 raspi-config 打开 GPIO sudo apt-get install wiringpi 按照 http://wiringpi.com/wiringpi-updated-to-2-52-for-the-raspberry-pi-4b/ 更新 wiringpi 版本 gpio readall 即可查看 GPIO 概况 进一步配置 WIFI参考：https://www.cnblogs.com/zhangyuejia/p/8945354.html 然后 sudo ifconfig wlan0 down 关闭 wifi，sudo ifconfig wlan0 up 启动 wifi。 超频参考：https://cyfeng.science/2020/06/26/Unboxing-Raspberry-Pi-4B-8GB-and-Overclocking/ 注意默认情况下 over_voltage 最大为 6 查看CPU频率：sudo watch -n 1 cat /sys/devices/system/cpu/cpu*/cpufreq/cpuinfo_cur_freq 查看CPU温度：sudo watch -n 1 cat /sys/class/thermal/thermal_zone0/temp CPU 电源计划echo &quot;powersave&quot; | sudo tee /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor 可以将CPU设为省电模式，固定600MHz echo &quot;ondemand&quot; | sudo tee /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor 设置回默认模式 风扇控制风扇一直开着噪声大，也影响风扇寿命，设置一下温控。 为了美观，网购了一个插在 GPIO 座上的风扇插座，勉强塞进了外壳。 使用 raspi-config 自带的风扇控制需要注意，若使用 i2c 端口作为控制口，需要将 i2c 关闭。 使用 sudo -E rpi-eeprom-config --edit 设置 WAKE_ON_GPIO=0 和 POWER_OFF_ON_HALT=1 可以在 shutdown 之后使风扇也关闭（否则关机后风扇会开始一直转）。 通过蓝牙 ssh 连接即通过蓝牙连接创建局域网。 参考： http://www.leux.cn/doc/Raspberry%E9%80%9A%E8%BF%87%E8%93%9D%E7%89%99SSH.html https://blog.csdn.net/Powerful_Green/article/details/88604205 连接操作：更改适配器选项 -&gt; 蓝牙网络连接 -&gt; 查看蓝牙网络设备 -&gt; 选中，连接时使用 -&gt; 接入点 后来不知道装了啥蓝牙连不上了，排查之后发现似乎是 /usr/bin/bt-agent -c NoInputNoOutput 失效了，并不会自动配对，需要手动配对。（仍未解决，但也不怎么用蓝牙连接了） OLED 显示屏低价搞到一个小的 OLED 显示屏，装上。 由于风扇座占掉了 i2c1，只能通过奇技淫巧使用 i2c0 ，参考 https://blog.csdn.net/weixin_46145842/article/details/106128144 设置 驱动和使用参考：https://shumeipai.nxez.com/2019/04/29/use-the-ssd1306-oled-display-on-the-raspberry-pi.html 持续连接校园网在 Github 上找了各种连校园网的轮子，试到最后只有这个能够稳定使用： 使用 https://github.com/z4yx/GoAuthing 对应程序和 service。 无线 AP 与路由使用 RaspAP 创建无线 AP（已弃用）RaspAP 手动安装教程：https://docs.raspap.com/manual/ 开启 802.11ac参考 https://docs.raspap.com/faq/#80211ac 信道选择 36 ，实测 48 无法开启，40 速率较慢。 流量监控问题参考 https://github.com/RaspAP/raspap-webgui/issues/689 末尾。 sudo apt-get purge vnstat 卸载原来的 vnstat。 curl -O https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/pool/universe/v/vnstat/vnstat_1.18-1_arm64.deb 下载旧版 vnstat。 sudo dpkg -i vnstat_1.18-1_arm64.deb 安装。 echo &quot;vnstat hold&quot; | sudo dpkg --set-selections 禁用更新。 使用 OpenWrt-Docker（也已弃用）安装 docker：参考 https://openwrt.club/93.html 增加用户权限：https://www.cnblogs.com/codeaaa/p/9041533.html hostapd + dnsmasq + OpenWrt-Docker：https://zhuanlan.zhihu.com/p/163827788 使用的 OpenWrt-Docker。 注意： 设置 dnsmasq 配置文件的时候一定要反注释掉 bind-interfaces，不然会出现地址占用错误。 Openwrt 配合 AdGurad Home 屏蔽广告和 ShadownSocksR Plus 用于翻墙，参考：https://blog.zfdang.com/2020/07/adguard-home-work-with-ssr-plus-in-openwrt/ 板载 WLAN 优化sudo iw wlan0 set power_save off 关闭节能可以提高速度与稳定性。 使用 USB 网卡板载网卡性能和稳定性还是不足的，于是入手了一个 USB 无线网卡。 由于预算有限，又想要 867Mbps 的 5G 频段支持，于是入手的网卡是 RTL8812BU 芯片，在驱动方面问题多多，悲。 驱动安装支持 RaspberryOS(64bit) 的驱动地址：https://github.com/morrownr/88x2bu 关于 iw phy 输出参数的具体说明：https://c4pr1c3.github.io/cuc-mis/chap0x02/rt3572l_explained.html 优化WiFi睡眠：https://github.com/fastoe/RTL8812BU_for_Raspbian 关于 /etc/modprobe.d/88x2bu.conf 的一点额外说明： 1234567891011121314151617181920212223There's four parms listed in the document you cite.Code: Select allrtw_power_mgnt=0|1|20 == disable power saving1 == power saving on, minPS2 == power saving on, maxPSCode: Select allrtw_enusbss=0|10 == disable auto suspend1 == enable auto suspendCode: Select allrtw_hwpwrp_detect=0|10 == disable HW power pin detection1 == enable HW power pin detectionCode: Select allrtw_ips_mode=0|10 == low power, IPS_NORMAL1 == higher power, IPS_LEVEL2The conventional wisdom, because we're running our RPis as server systems not clients, is to set rtw_power_mgnt=0 and rtw_enusbss=0 to prevent the dongle going into power saving and to ignore the other two parms because they don't make any difference. If the server goes into power saving we'd need a process to wake it up. That's different from a client system where interaction from a keyboard user will trigger a request to wake up and associate the dongle. 最终配置文件为： 1options 88x2bu rtw_drv_log_level=2 rtw_led_ctrl=1 rtw_vht_enable=2 rtw_power_mgnt=0 rtw_switch_usb_mode=1 rtw_ips_mode=1 rtw_enusbss=0 rtw_beamform_cap=11 由于购买的网卡为 USB2.0 接口，不支持 USB3.0，需要 rtw_switch_usb_mode=0/2 才能正常使用。 一些关于 RTL8812BU 驱动 / hostapd 的问题hostapd 完整配置文件注释：https://w1.fi/cgit/hostap/plain/hostapd/hostapd.conf 配置文件中最好去除注释，可能会有奇怪的问题 这张网卡无法在初始启动时应用 ht_capab=[HT40-][HT40+][SHORT-GI-40][DSSS_CCK-40] 设置 40/80MHz 带宽，似乎是网卡直接 UNINITIALIZED-&gt;HT_SCAN 有问题，会进行 neighbor scanning ，然后出现 hostapd[10529]: Failed to request a scan of neighboring BSSes ret=-16 (Device or resource busy) 错误。必须先以普通 20MHz 模式启动，然后转为（restart） 40/80MHz。 启动时配置文件： 123456789101112131415161718interface=wlx1cbfce82adb3bridge=brlanhw_mode=achannel=149ieee80211n=1wmm_enabled=1ssid=RASPNET_402auth_algs=1wpa=2wpa_key_mgmt=WPA-PSKrsn_pairwise=CCMPwpa_passphrase=密码 修改为如下配置后 restart ： 123456789101112131415161718192021interface=wlx1cbfce82adb3bridge=brlanhw_mode=achannel=149ieee80211n=1ieee80211ac=1wmm_enabled=1ht_capab=[HT40-][HT40+][SHORT-GI-40][DSSS_CCK-40]vht_capab=[VHT80][SHORT-GI-80]ssid=RASPNET_402auth_algs=1wpa=2wpa_key_mgmt=WPA-PSKrsn_pairwise=CCMPwpa_passphrase=密码 Updated 似乎是因为放在5G路由器旁边的原因… 一些没什么效果的尝试&gt; 换驱动https://github.com/cilynx/rtl88x2bu，在 arm64 系统上编译所需的额外操作：https://github.com/PieGuy314/RTL88x2BU-RPi4-arm64-Driver-Patch &gt; 修改 hostapd 源码重新编译hostapd 编译方式：https://leux.cn/doc/hostapd.html 在源码中找到 neighboring BSSes 的对应部分，修改返回值。 12install -D hostapd /usr/local/bin//hostapdinstall -D hostapd_cli /usr/local/bin//hostapd_cli 2.9 版本似乎有点问题，目前在用 2.8 版本。 新网卡原来的网卡是 USB2.0 的网卡，退货换了一个 3.0 的。 然而最终发现，新的网卡在运行在使用 rtw_switch_usb_mode=1 运行在 USB3.0 模式时会发生各种错误，且不稳定；而使用 rtw_switch_usb_mode=1 运行在 USB2.0 模式（插在哪个物理口都行）时会保持稳定。 Update 2022.02.15：相关问题也已经在驱动存储库的说明中提及了，见 88x2bu-20210702。 只能跑在 2.0 模式了，速度大概在 200Mbps 左右。 最终配置文件： /etc/modprobe.d/88x2bu.conf1options 88x2bu rtw_drv_log_level=3 rtw_led_ctrl=1 rtw_vht_enable=2 rtw_power_mgnt=1 rtw_switch_usb_mode=0 rtw_ips_mode=1 rtw_enusbss=0 rtw_beamform_cap=11 /etc/hostapd/hostapd.conf12345678910111213141516171819interface=wlx1cbfceb110dcdriver=nl80211country_code=CNhw_mode=achannel=149ieee80211n=1ieee80211ac=1wmm_enabled=1ht_capab=[HT40-][HT40+][SHORT-GI-40][DSSS_CCK-40]vht_capab=[HTC-VHT][MAX-MPDU-11454][SHORT-GI-80]ssid=RASPNET_402wpa=2wpa_key_mgmt=WPA-PSKrsn_pairwise=CCMPwpa_passphrase=密码 使用的 hostapd 版本： hostapd v2.8。 Clash 代理 + AdGuardHome 广告屏蔽配置 ClashClash 部署：https://cherysunzhang.com/2020/05/deploy-clash-as-transparent-proxy-on-raspberry-pi/ 关于代理与 DNS 解析的原理说明：https://blog.skk.moe/post/what-happend-to-dns-in-proxy/ DNS 配置可参考：http://blog.joylau.cn/2020/05/01/Clash-Config/ Clash 可以配置 proxy-providers 订阅代理，使用 https://github.com/Loyalsoldier/clash-rules 配置 rules 可以使用 subconverter 筛选处理订阅节点：https://www.10101.io/2020/02/12/use-clash-proxy-provider-with-subconverter subconverter 中文文档：https://github.com/tindy2013/subconverter/blob/master/README-cn.md 后续：发现机场提供了 subconverter ，不需要本地部署啦~ 开启终端代理方法一设置 clash 配置文件 mixed-port: 7890 ，在终端中运行（或添加到 ~/.bashrc）： 12export http_proxy=http://127.0.0.1:7890export https_proxy=http://127.0.0.1:7890 方法二使用 Proxychains 安装后设置配置文件 /etc/proxychains.conf ，在最后一行设置本地代理服务器和端口 http 127.0.0.1 7890 ，在 /usr/lib/proxychains3/proxyresolv 中将原有的 DNS 4.2.2.2 改为本机的 DNS 服务器 然后使用 proxychains + 指令 进行代理，或者直接 proxychains bash 开启全代理的终端 使用 sudo 时会报错：ERROR: ld.so: object 'libproxychains.so.3' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. 解决方法：使用 find /usr/ -name libproxychains.so.3 -print 找到库的位置，然后参考：https://parrotsec-cn.org/t/proxychains/3012 修改文件 配置 AdGuardHome最终决定将 Clash 作为 AdGuardHome 的上游服务器 在 /etc/dnsmasq.conf 中设置 port=0 关闭 dnsmasq 的 DNS 服务 安装 AdGuardHome ：https://github.com/AdguardTeam/AdGuardHome#installation 配置 AdGuardHome DNS 服务端口为 53，上游 DNS 服务器为 Clash 的 DNS 服务（Clash 需开启 DNS 服务） 透明代理：假设 Clash 的 redir-port为 7891，iptable 进行以下设置： Update 2022.04.23： 由于校园网分配的是公网IP，所以需要设置防火墙，限制 Clash 服务只能被内网访问，防止端口被扫到被攻击（会导致大量连接和高 CPU 占用）。iptables 也做了更新，增加了简单的防护。 12345678910111213141516171819202122232425262728293031323334# 防止外网使用内网 IP 欺骗iptables -A INPUT -i eth0 -s 192.168.0.0/16 -j DROP# 允许已建立的连接通过iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT# 允许本机和内网 IP 的所有访问iptables -A INPUT -s 127.0.0.1 -j ACCEPTiptables -A INPUT -s 192.168.0.0/16 -j ACCEPT# 允许来自无线 AP 的 DHCP 请求, wlx1cbfceb110dc 为网卡名iptables -A INPUT -i wlx1cbfceb110dc -p udp --dport 67 -j ACCEPT# 开放外网 SSH, HTTP, HTTPS 连接iptables -A INPUT -p tcp -m multiport --dport 22,80,443 -j ACCEPT# 若不是允许内网 IP 的所有访问, 则需添加该规则允许内网对 Clash 的访问# iptables -A INPUT -s 192.168.0.0/16 -p tcp -m tcp --dport 7891 -j ACCEPT# 丢弃其他所有请求iptables -P INPUT DROP# 将转发后的包源地址修改为本机地址iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADEiptables -t nat -N clash# 内网 TCP 请求转发给 clash 链iptables -t nat -A PREROUTING -s 192.168.0.0/16 -p tcp -j clash# 访问内网不经过 clashiptables -t nat -A clash -d 10.0.0.0/8 -j RETURNiptables -t nat -A clash -d 127.0.0.0/8 -j RETURNiptables -t nat -A clash -d 169.254.0.0/16 -j RETURNiptables -t nat -A clash -d 172.16.0.0/12 -j RETURNiptables -t nat -A clash -d 192.168.0.0/16 -j RETURNiptables -t nat -A clash -d 224.0.0.0/4 -j RETURNiptables -t nat -A clash -d 240.0.0.0/4 -j RETURN# 其余请求重定向至 clash 端口iptables -t nat -A clash -p tcp -j REDIRECT --to-ports 7891 在 /etc/dnsmasq.conf 中将默认网关和默认 DNS 服务器设为本机，例如： 1234interface=wlx1cbfceb110dcdhcp-range=192.168.22.100,192.168.22.200,255.255.255.0,24hdhcp-option=3,192.168.22.1dhcp-option=6,192.168.22.1 如上，连入树莓派网络即可走代理访问。 回环问题Clash 做透明代理时访问对应端口会产生回环，有时候这个问题会莫名其妙地出现。 解决尝试一解决方案：https://github.com/Dreamacro/clash/issues/425#issuecomment-566982655 1234iptables -A INPUT -p tcp -m tcp --dport 7891 -m connmark ! --mark 500 -j REJECT...iptables -A CLASH -p tcp -j CONNMARK --set-mark 500iptables -A CLASH -p tcp -j REDIRECT --to-ports 7891 解决尝试二似乎去除 udp 相关 iptables 可以解决，已将上面的配置文件更新，有待观察。UPD:未解决 解决尝试三似乎改端口可能解决，有待观察。 Update 2022.02.15：暂时还没有遇到问题。 文件存储服务器USB 移动硬盘硬盘处理：使用 DiskGenius 软件将硬盘分区为 ext4。 插入硬盘，sudo fdisk -l 查看硬盘设备号，如 /dev/sda1。 sudo mount /dev/sda1 /data 进行挂载，挂载完后可通过 df -hT 查看空间使用情况。 永久挂载：在 /etc/fstab 中加入： 1/dev/sda1 /data ext4 defaults 0 0 sudo mount -a 检查是否有问题。 重要：为了防止关机时直接对硬盘断电损伤硬盘，参考如下设置（似乎只对 shutdown 后手动重启有用，reboot 没用）：https://iovxw.net/p/park-external-hdd/。 SMB 服务器（已弃用）使用 Openwrt 的 SMB 服务，在 网络存储-&gt;网络共享 里设置共享目录，在 网络存储-&gt;挂载 SMB 网络共享 里开启 SMB 服务。 直接在树莓派原系统内开设 Samba 服务器：https://zhuanlan.zhihu.com/p/266495858。 testparm –v 检查 smb.conf 配置是否正确。 rlimit_max: increasing rlimit_max (1024) to minimum Windows limit (16384) 的解决方法：https://ixnfo.com/en/samba-warning-solution-rlimit_max-increasing-rlimit_max-1024-to-minimum-windows-limit-16384.html Aria2 下载机新建用户：sudo adduser aria2 并进行相关用户组设定。 https://li-aaron.github.io/2019/01/aira2-on-raspberry/ ，将命令和配置文件中的 ~ 都换为绝对路径。 配置文件参考：http://ivo-wang.github.io/2019/04/18/%E5%85%B3%E4%BA%8Earia2%E6%9C%80%E5%AE%8C%E6%95%B4%E7%9A%84%E4%B8%80%E7%AF%87/ Update 2021.09.27：现在使用的是 Aria2 Pro。 MC 服务器配置MC1.16 及以前 &amp;&amp; Ubuntu依照 https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu-ports/ 换源，sudo apt update （或sudo apt-get full-upgrade）进行更新。 sudo apt install openjdk-8-jre-headless 安装 java8。 于是直接按照正常 Ubuntu 情况配置 MC 服务器即可。 MC1.17 &amp;&amp; Raspberry OS 64it截至 2021.08.06 ，openjdk-16 在 debian 下只有 unstable(sid) 版，所以需要一些额外的配置来安装。 参考：https://packages.debian.org/sid/arm64/openjdk-16-jdk/download 向 /etc/apt/sources.list 中添加 deb http://ftp.de.debian.org/debian sid main （用完后记得注释掉）。 执行 sudo apt install openjdk-16-jre-headless 安装 java16。 MC服务器的剩余步骤照常，可参考：https://blog.csdn.net/qq_36290650/article/details/106978441。 同步照片Lomorage （已弃用）使用 Lomorage，使用 apt 安装。 文档：https://docs.lomorage.com/zh/docs/Installation/lomorage-service/installation-raspbian/ apt 安装后来出现了一些依赖问题，且 APP 实在有些丑，于是弃用。 Syncthingsyncthing 安卓客户端：https://github.com/syncthing/syncthing-android 安卓客户端增强版：https://github.com/catfriend1/syncthing-android sudo apt install syncthing 安装，sudo systemctl enable syncthing@pi.service 启动服务。 apt 安装的版本过于老旧，需要从 github 上下载最新版本，扔到 /usr/bin/ 里替换掉。 可以在云服务器上搭建发现服务器和中继服务器。 功能杂项同步百度云使用 bypy 给装在树莓派上的 TF 卡续命参考：https://raspberrypi.stackexchange.com/questions/169/how-can-i-extend-the-life-of-my-sd-card 省电USB供电控制USB 硬盘使用 udisksctl 安全移除，USB 端口使用 uhubctl 断电。 udisksctl: sudo apt install udisks2 uhubctl: https://github.com/mvp/uhubctl usb-down.sh12345678910#!/bin/shudisksctl unmount -b /dev/sda1 # 将硬盘卸载udisksctl power-off -b /dev/sda # 将硬盘数据断电，表现为硬盘停转systemctl stop hostapd.service # 将网卡的 AP 服务停止sleep 2 # 延迟一会儿防止服务未关闭uhubctl -l 2 -a off # 关闭USB电源# 由于只有当四个USB端口都关闭时才会断电，索性直接全部断了 usb-up.sh12345678#!/bin/shuhubctl -l 2 -a on # 打开USB电源sleep 5 # 延迟一会儿等待USB设备识别mount -a # 恢复硬盘挂载systemctl start hostapd.service # 开启 AP 服务 其它https://www.raspberrypi.org/forums/viewtopic.php?t=257144 https://learn.pi-supply.com/make/how-to-save-power-on-your-raspberry-pi/ 可以参考上面关闭 HDMI，LED 等。 相机参考：https://www.raspberrypi.org/forums/viewtopic.php?t=285868 vcgencmd get_camera 检查相机是否开启。 sudo modprobe bcm2835-v4l2 vcgencmd参考： https://www.raspberrypi.org/documentation/computers/os.html#vcgencmd https://www.lxx1.com/3683 DDNS使用 Cloudflare 的 DNS 托管。 参考：https://blog.wardchan.com/posts/use-ddclient-to-automatically-update-cloudflare-dns-record.html 备份额外购置了一张与原来同款的 32G TF 卡，本来打算升级/重装系统和网卡驱动，但是驱动上遇到了稳定性问题，就懒得重装系统了，于是当作备份卡吧。 创建镜像备份法使用 win32diskimager，把 TF 卡插到电脑上，可以生成整个卡的镜像文件。 接着使用 PiShrink 裁剪镜像。需要使用 Linux, WSL 实测没问题。 在线拷卡备份法使用 rpi-clone，可以进行增量备份，适合使用另一张卡定期备份。 123git clone https://github.com/billw2/rpi-clone.gitcd rpi-clonesudo cp rpi-clone /usr/local/bin/ 安装完成后，sudo fdisk -l 找到 USB 口上的备份卡，如 /dev/sdc 然后 sudo rpi-clone /dev/sdc 即可进行增量备份。 UART 与蓝牙树莓派与 UPS 间的通讯使用 UART 串口通信。 参考：https://zhuanlan.zhihu.com/p/106904186 本文介绍在Raspberry Pi 3、3+，4和Raspberry Pi Zero W上配置串行端口。上述的几种树莓派包含两个可用于串行通信的UART控制器，也就是常说的串口：mini UART和PL011 UART。默认情况下，mini UART映射到40引脚GPIO连接器的TXD（GPIO 14）和RXD（GPIO 15）上，PL011 UART用于蓝牙模块​​，但是任何一个模块都可以映射到GPIO端口。 额外参考： https://forums.raspberrypi.com/viewtopic.php?t=309763 https://forums.raspberrypi.com/viewtopic.php?t=261753 问题杂项systemctl status 不显示内存占用https://dmesg.app/systemd-accounting.html （似乎还是不行） VsCode 远程连接出现 command: '_workbench.downloadResource' failed 错误。 解决方法：本地的梯子（远程端不需要梯子）开成全局代理。 在使用充电宝/UPS单独供电时，通过AP满负荷读写移动硬盘可能导致USB接口掉电换用电源供电暂未发现问题。 Update 2021.09.11： 换用电源供电也会出现问题，于是加了一个带独立供电的 USB 拓展坞，由于手头只有一个 USB2.0 的拓展坞，所以只将无线网卡接到拓展坞上，实测减轻了约 0.3A 的树莓派 USB 负载，是否可以有效防止掉盘还待检验。 硬盘维护fsck -f /dev/sda1 检查文件系统。 fsck -c /dev/sda1 扫描。 sudo smartctl -a /dev/sda 查看 S.M.A.R.T. 信息。 使用 smartctl 进行硬盘测试。 修复：https://www.smartmontools.org/wiki/BadBlockHowto","link":"/2021/07/11/%E3%80%90%E8%A1%A5%E6%A1%A3%E3%80%91%E6%A0%91%E8%8E%93%E6%B4%BE%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"},{"title":"树莓派软路由配置 IPv6 网络","text":"树莓派挂在宿舍当软路由已经一年了，当时只部署了 IPv4 下的 NAT 网络，没有 IPv6 支持显然已经过于落后了，访问纯 IPv6 网站也还得换回校园网。这两天抽空学习了一点 IPv6 相关知识，对着搜索引擎配置好了 IPv6 网络。 网络环境：树莓派有线网卡 eth0 作为 WAN 口连接 IPv4 + IPv6 双栈的校园网，USB 无线网卡 wlx1cbfceb110dc 作为无线 AP 提供局域网，USB 网卡的驱动和 AP 的搭建见 【补档】树莓派折腾记录。 网桥透传法由于我的 IPv6 网络并没有透明代理的需求，所以其实在两个网卡间搭个网桥，把树莓派作为二层网络设备（类似交换机）使用即可。主要问题在于限制网桥只走 IPv6 流量，这个使用 ebtables 即可，局域网中的网络设备会联系校园网的网关获取到 IPv6 地址等信息。 部署完后才发现，校园网的 IPv6 也是需要登录认证的，所以这样整的话每次联网都需要手动登录，所以最终弃用了 QAQ. 主要参考：http://www.xingbin.net/blog_channel8/C/CampusNetwork_IPv6/ 建立网桥：sudo brctl addbr ipv6br 启动网桥：sudo ifconfig ipv6br up 只允许 IPv6 数据包通过网桥：sudo ebtables -t broute -A BROUTING -p ! ipv6 -j DROP 这一步如果遇到了 RULE_APPEND failed (No such file or directory): rule in chain BROUTING. 之类的错误的话，可能是因为使用了基于 nf_tables 而不是 xtables 的 ebtables，（参见：https://sources.debian.org/src/iptables/1.8.2-4/debian/NEWS/），此时使用 ebtables-legacy 即可。 添加 eth0 进入网桥：sudo brctl addif ipv6br eth0 添加 wlx1cbfceb110dc 进入网桥：sudo brctl addif ipv6br wlx1cbfceb110dc 注意： 建议先设置 ebtables 再添加网卡，否则直接将网卡添加进网桥的话会导致 IPv4 流量都进入网桥，从而无法正常连接以及丢失 SSH 连接。 以上配置重启后会消失，需要可持久化的话可以参考 http://blog.yesterday17.cn/post/pi-router/ 中的配置。 NAT for IPv6IPv6 网络中本不应使用 NAT，然而校园网中获得的 IPv6 地址使用 ifconfig 查看是 prefixlen 128 的（或许是由 prefixlen 64 的地址生成的？这块儿我不是很明白），并且对每一个 IP 都会要求身份认证，给连入宿舍局域网中的设备带来了一定的麻烦。于是选择搭建 NAT 网络，共用同一个校园网 IPv6 地址。 局域网中使用唯一本地 IPv6 单播地址 (ULA, Unique Local IPv6 Unicast Address, RFC 4193)，要求拥有固定前缀 fd00::/8，然后是 40 位随机 Global ID（关于随机的必要性见：https://blogs.infoblox.com/ipv6-coe/3-ways-to-ruin-your-future-network-with-ipv6-unique-local-addresses-part-2-of-2/）。然而为了手打地址方便，我还是使用了有某种实际意义的地址：fd22:41b7:e060::/64。至少没用全零 首先开启 IPv6 内核转发，编辑 /etc/sysctl.conf /etc/sysctl.conf12net.ipv6.conf.all.forwarding=1net.ipv6.conf.all.accept_ra=2 关于 accept_ra 的设置参考：https://sysctl-explorer.net/net/ipv6/accept_ra/，大概是因为开启转发后会自动关闭 Accept Router Advertisements，设置值为 2 可以强制开启。 接着使用 dhcpcd 配置内网无线 AP 网卡的固定静态地址，在 /etc/dhcpcd.conf 中添加 static ip6_address，编辑后如下： /etc/dhcpcd.conf1234interface wlx1cbfceb110dc static ip_address=192.168.22.1/24 static ip6_address=fd22:41b7:e060::/64 nohook wpa_supplicant 重启 dhcpcd 生效：sudo systemctl restart dhcpcd.service 然后使用 dnsmasq 配置地址分配相关服务，这里在内网同时开启 SLAAC 和 DHCPv6，编辑 /etc/dnsmasq.conf 后如下： /etc/dnsmasq.conf12345678interface=wlx1cbfceb110dcdhcp-range=192.168.22.100,192.168.22.200,255.255.255.0,24hdhcp-range=fd22:41b7:e060::1,fd22:41b7:e060::fe,slaac,1hdhcp-option=3,192.168.22.1dhcp-option=6,192.168.22.1dhcp-option=option6:dns-server,[fd22:41b7:e060::]enable-radhcp-authoritative 重启 dnsmasq 生效：sudo systemctl restart dnsmasq.service 再通过 ip6tables 在 POSTROUTING 链上做一个 SNAT 即可： 1sudo ip6tables -t nat -A POSTROUTING -s fd22:41b7:e060::/64 -o eth0 -j MASQUERADE 上面配置了树莓派为 DNS 服务器，树莓派使用 Clash 和 Adguard Home 搭建 IPv4 与 IPv6 双栈 DNS 服务，上游服务器也均为双栈 DNS 服务器，重连设备获取 IP 后即可正常使用了。 如果要指定 DNS 服务器可以在 dnsmasq 中类似配置，以 TUNA DNS666 服务器为例：dhcp-option=option6:dns-server,[2001:da8::666] 配置的 SLAAC 支持使 Android 手机也能正常使用 IPv6 服务。 经测试，内网设备使用 IPv6 单栈也可以正常访问双栈或 IPv6 单栈网页。 一些测试网站 IPv6 测试站: http://test-ipv6.com 东北大学 IPv6 测速站：http://speed.neu6.edu.cn/ 参考 http://www.xingbin.net/blog_channel8/C/CampusNetwork_IPv6/ https://post.smzdm.com/p/ad9qkz9k/ https://tang.su/2017/03/openwrt-ipv6-nat/ https://lwz322.github.io/2018/10/07/IPv6_NAT.html Dnsmasq 手册：https://thekelleys.org.uk/dnsmasq/docs/dnsmasq-man.html","link":"/2022/09/02/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%BD%AF%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE-IPv6-%E7%BD%91%E7%BB%9C/"},{"title":"使用树莓派和小米蓝牙温湿度计可视化宿舍温湿度变化","text":"最近入手了一个小米蓝牙温湿度计（最便宜的 LCD 屏那款，https://pvvx.github.io/ATC_MiThermometer/），可以连米家查看温湿度，但是没有历史记录功能。于是想着能不能连树莓派记录温湿度，Google 上一搜还真有，赶紧整一套玩玩。 最终将小米蓝牙温湿度计刷入定制固件发送温湿度数据广播，树莓派接收广播存入 InfluxDB 数据库，然后使用 Grafana 可视化。 刷入定制固件参考： 小米温湿度传感器刷入定制固件，开启自定义功能 https://roov.org/2021/04/mi-thermometer-firmware/ 使用 https://github.com/pvvx/ATC_MiThermometer 中的定制固件，老外非常 NB，还写了一套网页直接在线刷固件：https://pvvx.github.io/ATC_MiThermometer/TelinkMiFlasher.html，在仓库中查看使用说明即可。 刷入定制固件后开启小米蓝牙温湿度计的蓝牙广播功能，这样树莓派不用连接就能接收温湿度广播数据了。由于周围环境较为可信且刻意调低了发射增益，我没有设置 PIN 码和加密，防止哪天忘了连不上。就是懒了 树莓派接收蓝牙广播参考：使用树莓派定时读取小米温湿度传感器数据并发送到微信 也已经有老外编写了完善的接收程序，直接查看仓库中说明使用即可：https://github.com/JsBergbau/MiTemperature2 存入 InfluxDB 数据库安装并配置 InfluxDB 数据库参考：https://blog.csdn.net/qq_41475058/article/details/108050440 1sudo apt install influxdb influxdb-client 然后数据库服务器会在 8086 端口上开始监听。似乎需要添加 admin 用户才能开启权限认证，我只需要它能跑起来就行就没管。懒了 1234influx # 默认连接到localhost:8086show users # 查看所有用户，默认没有CREATE USER &quot;pi&quot; WITH PASSWORD '******' WITH ALL PRIVILEGES # 创建 pi 用户用于管理数据create database mi # 创建 mi 数据库用于存放数据 将广播数据存入编辑接收程序中的 sendToInflux.sh 如下： sendToInflux.sh1curl -i -u &quot;pi:PASSWORD&quot; -XPOST http://127.0.0.1:8086/write?db=mi\\&amp;precision=s --data-binary &quot;AquaraBluetoothSensors,sensorname=$2 temperature=$3,calibratedHumidity=$4,voltage=$5,batteryLevel=$6 $7&quot; 然后 python3 LYWSD03MMC.py --atc --battery --callback sendToInflux.sh 即可开始接受广播数据并存入数据库。 此时在数据库中可以看到数据了： 123use mi # 进入 mi 数据库show measurements # 查看表，此时应有表 AquaraBluetoothSensorsselect * from AquaraBluetoothSensors # 查看表中所有数据 还可以写个 service 来跑，比如编辑 /etc/systemd/system/MiTemperature.service ： /etc/systemd/system/MiTemperature.service12345678910111213141516[Unit]Description=MiTemperature advertisements receiverAfter=network.target[Service]Type=simpleUser=piRestart=alwaysRestartSec=5WorkingDirectory=/home/pi/Git/MiTemperature2ExecStart=/usr/bin/python3 LYWSD03MMC.py --atc --battery --callback sendToInflux.shStandardOutput=file:/home/pi/Git/MiTemperature2/output.logStandardError=file:/home/pi/Git/MiTemperature2/error.log[Install]WantedBy=multi-user.target 开启服务并开机自启 12sudo systemctl start MiTemperature.servicesudo systemctl enable MiTemperature.service Grafana 可视化参考官方说明，使用 apt 安装：https://grafana.com/docs/grafana/v9.0/setup-grafana/installation/debian/#install-from-apt-repository 123456sudo apt install apt-transport-httpssudo apt install wget # 说明中的 software-properties-common 我没装上，好像不影响wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -echo &quot;deb https://packages.grafana.com/enterprise/deb stable main&quot; | sudo tee -a /etc/apt/sources.list.d/grafana.listsudo apt updatesudo apt-get install grafana-enterprise 然后编辑 /etc/grafana/grafana.ini 更换服务端口，启动服务： 12sudo systemctl start grafana-server.servicesudo systemctl enable grafana-server.service 最后浏览器访问对应端口上的网页，默认用户名和密码是 admin，然后进行配置即可。Grafana 的功能蛮复杂的，有空可能单独开一篇来记录~","link":"/2022/09/07/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E5%92%8C%E5%B0%8F%E7%B1%B3%E8%93%9D%E7%89%99%E6%B8%A9%E6%B9%BF%E5%BA%A6%E8%AE%A1%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AE%BF%E8%88%8D%E6%B8%A9%E6%B9%BF%E5%BA%A6%E5%8F%98%E5%8C%96/"},{"title":"基于 Proxmox VE 的 All in One 服务器搭建","text":"树莓派挂在宿舍当软路由已经两年了，大部分情况下都挺好用，透明代理体验也还算尚可。 然而由于使用的 USB 无线网卡驱动支持较差，无线峰值速率只能跑到 200+ Mbps，且不大稳定。并且树莓派性能不高，无法开设一些高负载服务。另外，树莓派作为路由常年开启，需要考虑散热问题，虽然给使用的小风扇写了启停功能，但是启动运转时还是会有一定的噪音，较为恼人。 正好快到暑假了，需要开设一台 MC 服务器，于是打算换用一台较高性能的软路由，再配合 Wi-Fi 6 无线路由器作为 AP，提供高速率、高稳定性的有线无线网络接入。 整体配置概览软路由选用畅网奔腾 8505 软路由，1 大核 + 4 小核，大核的单核性能较高，CPU-Z 单核跑分相比我的笔记本（i5-1135G7）高出约 40%，可以用来开设一些吃单核性能的服务。 内存使用了两条光威 8GB DDR4 3200 内存，时序 CL-22-22-22-52。使用 16 GB 内存也主要是为了开设 MC 服务器考虑。 存储方面安装了西数 SN570 1T 固态作为系统盘，也暂时承担一部分文件存储功能。 作为一台路由器，这台软路由有 6 个 Intel i226-V 2.5G 网卡，即使以后有更多设备需要有线接入，也不一定需要增设交换机。 功耗方面，实测待机时输入功率约为 10 W。 温度方面，室温 24 度环境下，不加风扇待机时 CPU 约 40 度，NVME 固态约 50 度，软路由表面摸起来较热；加上赠送的 USB 12cm 风扇吹顶部铝制散热片后，待机时 CPU 约 30 度，NVME 固态约 40 度，外壳很凉快。 无线 AP目前廉价的 Wi-Fi 6 路由器均使用千兆有线网口，单口有线速率甚至可能不及无线速率，故考虑需要能和软路由之间做链路聚合提高内网性能。 调查后发现，TP-Link 系列的路由器似乎原厂固件就有着端口聚合功能，其子品牌水星也有着相同的功能，且便宜几十元。 于是选用水星 X306G 路由器，AX3000 规格，计划只使用其 5G 频段 Wi-Fi 和端口聚合功能，运行在 AP 模式。 安装和调试 PVE安装参考官方教程或网上教程，一路 next 即可。 其中将 ETH5 对应的网卡设为管理口，静态 IP 设为 192.168.22.100（22 网段）。 更换内核版本由于 8505 CPU 是大小核架构，建议使用较新的内核获取大小核调度优化。 先换源，参考：https://mirrors.tuna.tsinghua.edu.cn/help/proxmox/，并删除企业源：rm /etc/apt/sources.list.d/pve-install-repo.list apt update 后搜索可用的内核版本，我这儿选择 6.2 版本：apt install pve-kernel-6.2，安装完重启后生效。 可以使用 proxmox-boot-tool 管理安装的以及用于启动的 kernel 版本。 管理页面添加温度显示偷懒使用了恩山论坛的脚本，添加了温度，CPU频率，硬盘信息的显示：https://www.right.com.cn/forum/thread-6754687-1-1.html 删除 lvm-thin 并扩容 lvm由于使用单盘搭建 All in One 服务器，计划在 PVE 系统中使用 samba 共享数据文件，因此需要较大的 lvm 空间。同时，由于不需要开大量的虚拟机，也用不到 lvm-thin 的特性。故将 lvm-thin 的空间全部合入 lvm 中。 参考：https://foxi.buduanwang.vip/virtualization/pve/1434.html/ 删除 lvm-thin：lvremove /dev/pve/data 扩容 lvm：lvextend -rl +100%FREE /dev/pve/root 部署 samba安装：apt update &amp;&amp; apt install samba 添加用户：useradd thx 将用户添加到 samba：smbpasswd -a thx 编辑 samba 配置文件 /etc/samba/smb.conf，添加共享文件夹的配置： 1234567891011121314151617181920212223242526272829303132333435[RaspCloud] path = /data/RaspCloud writeable = yes create mask = 0777 directory mask = 1777 public = yes guest ok = yes[PT] path = /data/PT writeable = yes create mask = 0644 directory mask = 1755 public = yes guest ok = yes[Private] path = /data/Private writeable = yes create mask = 0644 directory mask = 1755 public = no guest ok = no valid users = thx browseable = yes[Sync] path = /data/Sync writeable = yes create mask = 0644 directory mask = 1755 public = no guest ok = no valid users = thx browseable = yes 其中 /data/RaspCloud 为公开共享目录，内部有 read-only 目录通过改变目录所有者来限制 guest 的写入。 /data/PT 为公开只读共享目录。 /data/Private 和 /data/Sync 为私密目录，使用白名单限制访问用户。 如果需要在共享目录中软链接到系统里的其它目录中，则需要在 [global] 段中添加： /etc/samba/smb.conf1234[global] follow symlinks = yes wide links = yes unix extensions = no 参考：https://blog.csdn.net/humanking7/article/details/85058471 smb.conf 中的配置项可查阅：https://www.samba.org/samba/docs/current/man-html/smb.conf.5.html 更改 CPU 电源策略作为一个桌面服务器，需要考虑到功耗与发热的问题。 参考：https://pve.sqlsec.com/4/6/ 12345# 查看支持的 CPU 电源模式cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors# 查看当前的 CPU 电源模式cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor 电源模式 解释说明 performance 性能模式，将 CPU 频率固定工作在其支持的较高运行频率上，而不动态调节。 userspace 系统将变频策略的决策权交给了用户态应用程序，较为灵活。 powersave 省电模式，CPU 会固定工作在其支持的最低运行频率上。 ondemand 按需快速动态调整 CPU 频率，没有负载的时候就运行在低频，有负载就高频运行。 conservative 与 ondemand 不同，平滑地调整 CPU 频率，频率的升降是渐变式的，稍微缓和一点。 schedutil 负载变化回调机制，后面新引入的机制，通过触发 schedutil sugov_update 进行调频动作。 安装工具：apt install cpufrequtils 设为 ondemand 模式：cpufreq-set -g ondemand 无显示器启动问题发现如果不接显示器，则无法正常启动。初步判断在启动 grub 或之后出现问题。 然而，对 BIOS 和 grub 配置文件做各种修改之后也无法解决问题。 最终打算网上买个 HDMI 诱骗器插上得了。 插上后也没用。 经仔细排查（偶然将接地良好的显示器的 Type-C 线的外壳接触到软路由 Type-C 口的外壳上，发现问题就消失了），发现是供电接地问题。 先前为了监测功耗，我将电源的 DC 转为了 USB 母口，插上了 USB 电压电流测量设备，再将测量设备的 USB 口转为 DC 口，接到软路由的 DC 供电口。在这个过程中可能丢失了地线。 直接接电源就不再有问题。 挂载硬盘再接上一块老机械盘，用来挂 PT。 安装好硬盘后，先使用 lsblk -f 或者 ls -l /dev/disk/by-uuid 找到分区的 UUID，使用 UUID 进行挂载可以避免 /dev/ 下设备名的改变导致的挂载问题。 然后在 /etc/fstab 中添加挂载信息： /etc/fstab1UUID=1f4a2672-3039-594b-808c-a5d3913b0fde /data/hdd ext4 defaults,nofail 0 0 注意 nofail 用来在硬盘没有成功挂载时也能正常启动，否则启动会等待硬盘挂载，失败后进入 emergency mode。 然后 mount -a 生效，开机后也会自动挂载。 硬盘维护缩减数据盘的文件系统预留空间参考：https://askubuntu.com/questions/249387/df-h-used-space-avail-free-space-is-less-than-the-total-size-of-home 默认情况下，df -h 查看硬盘空间会发现，Size 会大于 Used + Avail，如： 12Filesystem Size Used Avail Use% Mounted on/dev/sda1 294G 261G 19G 94% /data/hdd 这是由于 ext2/3/4 文件系统默认会保留 5% 的空间只供 root 使用，而数据盘就没这个必要了，可以 tune2fs -m 0 /dev/sda1 来取消预留空间。 S.M.A.R.T. 信息在 WebUI 中，可以在节点的磁盘一栏中查看 S.M.A.R.T. 信息。 命令行中，可以使用 smartctl -a /dev/sda 查看。 S.M.A.R.T. 信息的解析，可以参考：https://blog.csdn.net/MrSate/article/details/88564764。 使用 journalctl -u smartmontools.service 可以查看 smartmontools 守护进程的监测日志。 配置 smartd 守护程序还可以在 /etc/smartd.conf 中配置守护程序，初始时配置如下： /etc/smartd.conf1DEVICESCAN -d removable -n standby -m root -M exec /usr/share/smartmontools/smartd-runner 添加如下参数： 基于默认修改的监测与报警参数 -H -f -l error -l selftest -C 197 -U 198，相比默认的 -a 参数减少了等效的 -t 参数，否则每半小时都会在日志中输出 S.M.A.R.T. 信息的变化情况（详见 /etc/smartd.conf 中的说明） 每周六凌晨三点短自检，每月二十号凌晨三点长自检：-s (S/../../6/03/|L/../20/./03) 监控温度，在温度变化 5 度时记录，达到 40 度时记录，达到 45 度时警告（0 为关闭）：-W 5,40,45 修改后如下： /etc/smartd.conf123DEFAULT -H -f -l error -l selftest -d removable -n standby -m root -M exec /usr/share/smartmontools/smartd-runner/dev/nvme0 -W 0,60,70DEVICESCAN -C 197 -U 198 -s (S/../../6/03/|L/../20/./03) -W 0,40,50 重启服务后生效：systemctl restart smartd.service 如果守护程序检测到了出现问题，也会给安装 PVE 时填写的邮箱发邮件，实测 QQ 邮箱可以收到。 参考： man smartd.conf https://blog.kahosan.top/2022/06/20/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20smartd%20%E7%9B%91%E6%8E%A7%E4%BD%A0%E7%9A%84%E7%A1%AC%E7%9B%98/ https://forum.proxmox.com/threads/seagate-smart-prefailure-attribute.57454/ https://wiki.archlinux.org/title/S.M.A.R.T.#smartd 配置硬盘休眠可能需要先关闭 pvestatd 对硬盘的扫描，参考：https://www.ippa.top/954.html 先 ls -l /dev/disk/by-uuid 找到硬盘的 UUID 1f4a2672-3039-594b-808c-a5d3913b0fde，然后编辑 /etc/lvm/lvm.conf，在 global_filter 中添加 &quot;r|/dev/disk/by-uuid/1f4a2672-3039-594b-808c-a5d3913b0fde.*|&quot;，结果如下： /etc/lvm/lvm.conf123devices { global_filter=[&quot;r|/dev/zd.*|&quot;, &quot;r|/dev/disk/by-uuid/1f4a2672-3039-594b-808c-a5d3913b0fde.*|&quot;]} pvestatd restart 后生效。 查看硬盘当前状态：smartctl -i -n standby /dev/sda | grep &quot;mode&quot;|awk '{print $4}'，ACTIVE 或者 IDLE 都为运转状态。 查询当前电源管理参数：hdparm -B /dev/sda 进入 standby mode：hdparm -y /dev/sda 进入 sleep mode：hdparm -Y /dev/sda 然后编辑 /etc/hdparm.conf，添加需要休眠的硬盘设置，比如十分钟后 standby 如下配置： /etc/hdparm.conf12345/dev/disk/by-uuid/1f4a2672-3039-594b-808c-a5d3913b0fde { apm = 127 acoustic_management = 127 spindown_time = 120} /usr/lib/pm-utils/power.d/95hdparm-apm resume 后生效（参考 man hdparm.conf） 其中 spindown_time 参考 man hdparm 中的 -S 选项说明来设置。 不过我的这块硬盘似乎并不按照设定的 spindown_time 来休眠，于是打算观察一段时间 Load_Cycle_Count 的增长情况来决定是否开启休眠功能。 smartctl -a /dev/sda | grep Load_Cycle_Count 即可查看。 硬盘无法休眠 Debug后来又入了两块盘，但是 hdparm -y 之后又会立即唤醒，无法进入休眠状态。 诊断方式参考：https://askubuntu.com/questions/1406434/block-dump-reporting-missing-from-ubuntu-22-04 监控对 /dev/sda 的使用：blktrace -d /dev/sda -a pc -o - | blkparse -i - 然后 hdparm -Y /dev/sda ，查看唤醒磁盘的进程。 我这儿结果如下，然而搜索相关资料后并没有获取到有用的信息： 1234567898,16 0 1 0.000000000 18871 D N 0 [hdparm]8,16 1 1 0.497835738 0 C N [0]8,16 0 2 1.412267626 168 D R 4 [scsi_eh_1]8,16 0 3 1.412286261 14 C R [0]8,16 0 4 1.412293625 18 D R 12 [kworker/0:1]8,16 0 5 1.412295327 14 C R [0]8,16 0 6 1.412297439 18 D R 4 [kworker/0:1]8,16 0 7 1.412298518 14 C R [0]... 有可能是 ext4 的 lazy init 导致，参考：https://unix.stackexchange.com/questions/533789/hard-drive-waking-from-sleep-for-no-apparent-reason 基于 LXC 安装 OpenWrtLXC 开销小，故尝试使用 LXC 安装 OpenWrt 安装 OpenWrt安装过程参考：https://virtualizeeverything.com/2022/05/23/setting-openwrt-in-proxmox-lxc/ 下载地址：https://downloads.openwrt.org/ 我选择当时最新的稳定版本 22.03.5：https://downloads.openwrt.org/releases/22.03.5/targets/x86/64/ 下载 rootfs.tar.xz 即可，可以在下载时选择哈希校验。 创建容器的 UI 的文档：https://pve.proxmox.com/pve-docs/chapter-pct.html#pct_settings 似乎由于 Web 页面无法添加 --ostype unmanaged 参数，需要进入命令行创建： 1pct create 101 /var/lib/vz/template/cache/openwrt-22.03.5-x86-64-rootfs.tar.gz --arch amd64 --hostname RaspCloud --rootfs local:1 --memory 1024 --cores 6 --cpuunits 200 --ostype unmanaged --unprivileged 1 然后在 Web UI 中添加一个虚拟网卡 veth0，桥接到 PVE 网桥 vmbr0 上，用于 OpenWrt 和 PVE 的交互。 此时连接在管理口上的设备便和 OpenWrt 连在同一个网桥上了，就可以通过这个虚拟网卡的地址访问 OpenWrt 了。 有可能启动后 veth0 并没被正确配置，可以手动 up 之后使用 IPv6 地址访问。 然后到配置文件 /etc/pve/lxc/101.conf 里添加直通网卡，比如： 1234lxc.net.0.type: physlxc.net.0.link: enp2s0 --- 需要使用的 host 中的网卡名lxc.net.0.name: eth0 --- LXC 中显示的网卡名lxc.net.0.flags: up 需要注意 net.id 的 id 不能和 Web UI 中添加的相同。 最终的 conf 文件： 1234567891011121314151617181920212223242526272829303132arch: amd64cores: 6cpuunits: 200hostname: RaspCloudmemory: 1024net0: name=veth0,bridge=vmbr0,firewall=1,hwaddr=92:81:93:06:8A:7E,type=vethonboot: 1ostype: unmanagedrootfs: local:101/vm-101-disk-1.raw,size=1Gstartup: order=1swap: 512unprivileged: 1lxc.net.5.type: physlxc.net.5.link: enp2s0lxc.net.5.name: eth0lxc.net.5.flags: uplxc.net.6.type: physlxc.net.6.link: enp3s0lxc.net.6.name: eth1lxc.net.6.flags: uplxc.net.7.type: physlxc.net.7.link: enp4s0lxc.net.7.name: eth2lxc.net.7.flags: uplxc.net.8.type: physlxc.net.8.link: enp5s0lxc.net.8.name: eth3lxc.net.8.flags: uplxc.net.9.type: physlxc.net.9.link: enp6s0lxc.net.9.name: eth4lxc.net.9.flags: up 配置 OpenWrt连接互联网由于我需要 OpenWrt 通过 PVE 管理口连接电脑，通过电脑将无线网共享给有线网来访问互联网，所以需要先为 veth0 配置一些上网功能。 添加 Interface veth0，类型为静态地址，网卡设为 veth0，配置好对应的地址，网关和 DNS 服务器地址即可。 之后应该就可以访问网络了。 换源参考：https://mirrors.tuna.tsinghua.edu.cn/help/openwrt/ 添加中文12opkg updateopkg install luci-i18n-base-zh-cn 更改主题不大喜欢 OpenWrt 的默认主题，换为 Argon 下载对应的 ipk：https://github.com/jerrykuku/luci-theme-argon/releases/download/v2.3.1/luci-theme-argon_2.3.1_all.ipk 然后安装： 123opkg install luci-compatopkg install luci-lib-ipkgopkg install luci-theme-argon*.ipk 配置路由功能启动后，只有 wan 和 wan6 两个 Interface，对应 eth0 网口（device）。 计划把其它网口都划入 LAN 中。 首先添加网桥设备 br-lan，把网口都加上去。 然后添加 lan 接口，使用静态地址，把 br-lan 加上去，配置地址即可。 然后发现，似乎 dnsmasq 出现了些问题，无法正常启动。 根据 https://github.com/openwrt/openwrt/issues/9064 中的方法，opkg remove procd-ujail 可以解决。 dnsmasq 正常后，在接口中配置 DHCP / DNS 的相关配置，然后 lan 口上接的设备就能获取到分配的地址了。 校园网只会分配 /128 地址，故 IPv6 也需要做个 NAT。OpenWrt 中 IPv6 默认并不会配置 SNAT，需要做一些手动配置，参考：https://openwrt.org/docs/guide-user/network/ipv6/ipv6.nat6 先启用 IPv6 masquerading，其中我这儿的 zone[1] 为 wan 域： 123uci set firewall.@zone[1].masq6=&quot;1&quot;uci commit firewall/etc/init.d/firewall restart 然后关闭 wan6 口的 sourcefilter： 123uci set network.wan6.sourcefilter=&quot;0&quot;uci commit network/etc/init.d/network restart 这样 lan 口上接的设备也能获取到 DHCPv6 分配的 IPv6 地址了，OpenWrt 也会为其提供 NAT6 服务。 配置 OpenClash先卸载 dnsmasq： 12opkg remove dnsmasqmv /etc/config/dhcp /etc/config/dhcp.bak 再按照发布页的说明，先安装依赖，再下载安装 ipk 即可：https://github.com/vernesong/OpenClash/releases 之后按个人喜好配置即可，我选用的是 Meta 核心的 redir-host 模式。 可以将校园网网段设为绕过，减少校内网络访问开销： IPv4： 12345678959.66.0.0/16101.5.0.0/16101.6.0.0/16118.229.0.0/19166.111.0.0/16183.172.0.0/15202.112.39.2/32219.223.168.0/21219.223.176.0/20 IPv6： 12402:f000::/32 或者可以打开 实验性：绕过中国大陆 IP 功能，减少国内网络访问开销。 遇上 OpenClash 的一个 bug。（Updated 2023.07.02： 随着 0.45.128 版本的发布，该问题已得到修复） 在 LuCI 中，虽然已经关闭了 路由本机代理，但是还是会 nftables 中添加处理 Output 链的规则，见 https://github.com/vernesong/OpenClash/blob/9ee0f02ed7615a62f960c9ee2f951dd1b47e2411/luci-app-openclash/root/etc/init.d/openclash#LL1649C1-L1672C9： 12345678if [ &quot;$enable_redirect_dns&quot; != &quot;2&quot; ] || [ &quot;$router_self_proxy&quot; = &quot;1&quot; ]; then nft 'add chain inet fw4 openclash_output' 2&gt;/dev/null nft 'flush chain inet fw4 openclash_output' 2&gt;/dev/null ... nft add rule inet fw4 openclash_output ip protocol tcp skuid != 65534 counter redirect to &quot;$proxy_port&quot; 2&gt;/dev/null nft 'add chain inet fw4 nat_output { type nat hook output priority -1; }' 2&gt;/dev/null nft 'add rule inet fw4 nat_output ip protocol tcp counter jump openclash_output' 2&gt;/dev/nullfi 这里的判断中 或 上了不使用 Dnsmasq 转发，所以在我的工况下会被启用。暂时未明白为何要这样，故提了 Issue：https://github.com/vernesong/OpenClash/issues/3354。 两天后作者在 d499374 中修复了该 bug，发布于 0.45.125 版本中，等待合入 master。 远程 Wireshark 抓包调试有时配挂了需要抓包调试，可以使用远程主机上的 tcpdump + Windows 本机上的 wireshark 远程抓包分析。 给用户非 root 使用 tcpdump 权限：sudo chmod u+s /usr/sbin/tcpdump 然后 Windows 本机执行 ssh ubuntu &quot;tcpdump -i br-lan -l -w - 'port not 22'&quot; | wireshark -k -i - 即可开始抓包。 参考：https://thiscute.world/posts/tcpdump-and-wireshark 配置 UDP 代理使用 Redir-Host 兼容模式 + UDP tproxy 转发似乎并不能正常运行，所以还是得使用 TUN 模式。 LXC 启用 TUN 需要一点额外的配置，参考 https://forum.proxmox.com/threads/how-to-enable-tun-tap-in-a-lxc-container.25339/，在配置文件中添加如下内容： 12lxc.cgroup.devices.allow: c 10:200 rwmlxc.mount.entry: /dev/net dev/net none bind,create=dir 然后选用 Meta 内核，IPv4 和 IPv6 都启用 TUN 模式，即可代理 UDP 流量了。 还可以考虑开启 仅允许常用端口流量 来防止不必要的代理。具体地，此处所指的常用端口如下：21 22 23 53 80 123 143 194 443 465 587 853 993 995 998 2052 2053 2082 2083 2086 2095 2096 5222 5228 5229 5230 8080 8443 8880 8888 8889。 配置校园网认证使用 GoAuthing。 新版本的 OpenWrt 配置起来似乎有些不一样的地方，参考 https://github.com/z4yx/GoAuthing/issues/30 进行修改。 将 goauthing@ 脚本放到 /etc/init.d/goauthing 目录下，并 chmod +x。 /etc/init.d/goauthing123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#!/bin/sh /etc/rc.common# Authenticating utility for auth.tsinghua.edu.cn# This init script is used explicitly with OpenWRTUSE_PROCD=1START=96PROG=&quot;/usr/bin/goauthing&quot;SERV=goauthing # UCI config at /etc/config/goauthingstart_instance() { local config=$1 local username password config_get username $config username config_get password $config password local args=&quot;-u $username -p $password&quot; sleep 10 # Wait for link up &quot;$PROG&quot; $args deauth &quot;$PROG&quot; $args auth &quot;$PROG&quot; $args login procd_open_instance procd_set_param command &quot;$PROG&quot; procd_append_param command $args online procd_set_param stderr 1 procd_set_param respawn procd_close_instance}logout() { local config=$1 local username password config_get username $config username config_get password $config password local args=&quot;-u $username -p $password&quot; &quot;$PROG&quot; $args logout}start_service() { config_load &quot;$SERV&quot; config_foreach start_instance &quot;$SERV&quot;}stop_service() { config_load &quot;$SERV&quot; config_foreach logout &quot;$SERV&quot;} 其中更改了启动优先级，添加了 sleep 10 来等待 wan 口配置完成，否则会因为无法完成 auth / login 就直接进入 online 守护程序，从而一直无法完成登录认证。 然后下载 https://mirrors.tuna.tsinghua.edu.cn/github-release/z4yx/GoAuthing/LatestRelease/auth-thu.linux.x86_64，并移动至脚本中填写的位置（默认为 /usr/bin/goauthing）。 然后配置并启动服务： 12345678touch /etc/config/goauthinguci add goauthing goauthinguci set goauthing.@goauthing[0].username='&lt;YOUR-TUNET-ACCOUNT-NAME&gt;'uci set goauthing.@goauthing[0].password='&lt;YOUR-TUNET-PASSWORD&gt;'uci commit/etc/init.d/goauthing enable/etc/init.d/goauthing start 20251008 更新： 上述 goauthing@ 脚本会导致进程监测（如 htop）中明文暴露密码，故还是改为使用配置文件方式进行配置，虽然也是明文，但没有那么直接了（）。 /etc/init.d/goauthing123456789101112131415161718192021222324252627282930313233#!/bin/sh /etc/rc.common# Authenticating utility for auth.tsinghua.edu.cn# This init script is used explicitly with OpenWRTUSE_PROCD=1START=96PROG=&quot;/usr/bin/goauthing&quot;CONF=&quot;/etc/goauthing.json&quot;generate_command() { sleep 15 # Wait for link upCMD=&quot;\\\\&quot;$PROG\\&quot; -c \\&quot;$CONF\\&quot; -D deauth; \\sleep 1; \\\\&quot;$PROG\\&quot; -c \\&quot;$CONF\\&quot; -D auth; \\sleep 3; \\\\&quot;$PROG\\&quot; -c \\&quot;$CONF\\&quot; online; \\&quot;}start_service() { generate_command procd_open_instance procd_set_param command sh procd_append_param command -c &quot;$CMD&quot; procd_set_param stderr 1 procd_set_param respawn procd_close_instance}stop_service() { &quot;$PROG&quot; -c &quot;$CONF&quot; -D deauth} /etc/goauthing.json1234{ &quot;username&quot;: &quot;xxx&quot;, &quot;password&quot;: &quot;xxx&quot;} 如果后续有服务的启动过程需要已经完成认证，可以添加一个启动项来等待认证完成： /etc/init.d/wait_goauthing12345678910#!/bin/sh /etc/rc.common# Wait for goauthing to finish authenticationSTART=97start() { echo &quot;Waiting for goauthing to finish authentication...&quot; sleep 5 echo &quot;Goauthing should be done now.&quot;} 配置链路聚合 AP另购置了一台 Wi-Fi 6 无线路由器作为 AP，支持 2x2 MU-MIMO，160 MHz 频宽，理论带宽可达 2402 Mbps。 然而，路由器上只有四个千兆口，连接软路由后跑不到这么高。 不过，这款路由器支持两个端口链路聚合，故尝试配置一下。 首先在路由器上设置两个端口为聚合口，提示： 端口聚合使用IEEE 802.3ad动态聚合模式，请确保对端设备支持并配置为动态聚合模式。 然后在 OpenWrt 上安装需要的软件包：opkg install kmod-bonding proto-bonding luci-proto-bonding 然后将以下内容添加到 /etc/rc.local 的 exit 0 前： 123456789101112ip link add bond-lan type bond mode 802.3ad # 添加 bond 类型的虚拟接口 名称为 bond-lanip link set eth2 downip link set eth3 downip link set eth2 type bond_slave # 配置网卡模式ip link set eth3 type bond_slaveip link set eth2 master bond-lan # 加入名称为 bond-lan 的 bond 类型网卡ip link set eth3 master bond-lanip link set bond-lan up # 启动该网卡ip link set eth2 upip link set eth3 upbrctl addif br-lan bond-lan # 防止有时候无法自动添加到 br-lan 网桥上echo &quot;layer3+4&quot; &gt; /sys/class/net/bond-lan/bonding/xmit_hash_policy 将 eth2 和 eth3 从原来的 br-lan 中移除，添加上 bond-lan 即可。 关于 xmit_hash_policy，默认值为 layer2，会导致单台设备无法打到超过千兆的速度，改为 layer3+4 后可以部分改善。 实测无线可以跑到 1.6 Gbps 左右（后来只能在 UDP 模式下测到 1.4 Gbps 左右了）。 配置防火墙官方原版 OpenWrt 默认有一套防火墙策略，简略微调即可。 配置端口转发两种方式，一种是基于 iptables 实现，另一种是使用 socat 来转发。 基于 iptables 实现OpenWrt 默认的端口转发基于 iptables / nftables 实现，然而，配置后发现，在内网无法使用外网地址访问对应端口，初步探索后推测是 NAT 环回时出现问题。 于是在 nftables 中进行调试。 先新建一个表为符合规则的包启用跟踪调试： 123nft add table inet trace_debugnft 'add chain inet trace_debug trace_pre { type filter hook prerouting priority -200000; }'nft insert rule inet trace_debug trace_pre ip saddr 192.168.22.118 ip daddr ??.??.??.?? limit rate 1/second meta nftrace set 1 然后 nft monitor trace 就可以跟踪了。 跟踪检查后发现，包在 prerouting policy accept 后消失了。 一番摸索后发现，当对应网卡（br-lan）开启混杂模式后，就能正常工作了。 怀疑是 prerouting 后发现目标地址为本地链路地址，于是就修改了目的 mac 地址，导致非混杂模式的网卡将其丢弃。不过简单搜索后也没找到相关的资料。 使用 socatUpdated 2023.06.29： 使用 socat 遇到了一些问题，故弃用： 会修改源地址，丢失地址数据 UDP 的转发使用 fork 参数存在线程泄漏问题，似乎每个 UDP 包都会 fork 出一个进程且不释放，导致产生大量进程占满内存 安装： 12opkg updateopkg install socat 然后配置端口转发。 例如，配置名为 mc-tcp 的策略，开启，监听本机所有地址的 25565 端口并转发到 192.168.22.3:25565 的配置如下（fork 允许多个连接，reuseaddr 允许 socket 的快速重用，TCP6-LISTEN 也同时监听 IPv4）： 1234uci set socat.mc-tcp=socatuci set socat.mc-tcp.enable=1uci set socat.mc-tcp.SocatOptions='TCP6-LISTEN:25565,fork,reuseaddr TCP:192.168.22.3:25565'uci commit UDP 也类似： 1234uci set socat.mc-udp=socatuci set socat.mc-udp.enable=1uci set socat.mc-udp.SocatOptions='UDP6-LISTEN:25565,fork,reuseaddr UDP:192.168.22.3:25565'uci commit 然后重启 socat 服务即可生效：/etc/init.d/socat restart 对外网开放还需在防火墙中允许对应端口的输入。 配置 DDNS我的 DNS 解析提供商为 CloudFlare，故安装 ddns-scripts-cloudflare。 1opkg install ddns-scripts-cloudflare luci-i18n-ddns-zh-cn 安装完成后在 LuCI 中配置即可，没太大难度。IPv4 和 IPv6 地址需要分别配置。 配置 AdGuard Home安装 AdGuard Home： 12opkg updateopkg install adguardhome 在 DHCP/DNS 的高级设置中，将 DNS 服务器端口改为 53 以外的端口，如 5353。 然后登入 http://ip:3000 配置 AdGuard Home，将上游 DNS 服务器设为 OpenClash 设置的 DNS 服务地址，并停用 OpenClash 的 DNS 劫持。 然后应该就可以开始运作了，再添加屏蔽列表即可。 如果需要在 OpenClash 没有正常启动成功的情况下仍可以进行 DNS 服务，则需要设置 fallback DNS 服务器地址。然而目前 AdGuard Home 中并没有这个功能，相关功能 https://github.com/AdguardTeam/AdGuardHome/issues/3701 被设为了 v0.108.0 的目标，希望有生之年能等到 v0.108.0 出来获得这一功能。 （也是因为这个原因，校园网的认证脚本需要配置为 OpenClash 启动完成后再进行认证，感觉怪怪的，所以也暂时放弃了 AdGuard Home） 配置 WireGuard安装 WireGuard： 12opkg updateopkg install luci-i18n-wireguard-zh-cn 重启后，在添加接口中就可以找到 WireGuard VPN 了，我添加了一个名为 wg0 的接口。 作为公网 IP 下供其它端来主动连接的一端，我特殊指定了这个接口的监听端口，并在防火墙中运行了该端口的 UDP 访问。 该接口的 IP 地址需要配置为单独的子网，用于各端 VPN 接口间的互相连接。我为其配置了 192.168.23.1/24 和 fd23:41b7:e060::1/64 地址，与 22 网段区别开。 为了方便配置，我没有将这个接口划入单独的区域，而是划入了 lan 区域，共享 lan 区域的防火墙配置。 然后就可以添加对端了。注意 允许的 IP 的这一项中填写 “对端的隧道 IP 地址和对端经由隧道的网络”，对于对端为非路由设备的情况，这一项只填隧道 IP 地址就行，比如 192.168.23.102/32（/32 可省略），但不能填写 VPN 接口间的网段，即不能填写 192.168.23.102/24。 各项设置可能需要重启后生效。 之后的计划 配置内网 IP 的域名 配置 MosDNS 优化 DNS 解析（参考：https://rushb.pro/article/router-dns.html） 配置 Grafana 可视化路由运行状态、MosDNS 运行数据等 配置 UDP 转发以及游戏优化 升级 OpenWrt对于软件包的升级，除了可以在 LuCI 中手动逐个升级外，还可以在命令行中先 opkg update 再 opkg list-upgradable | cut -f 1 -d ' ' | xargs opkg upgrade 来一键升级所有可升级的软件包。 对于系统升级，可以 opkg install luci-app-attendedsysupgrade 后，在 LuCI 中使用 系统 -&gt; 值守式系统更新 来升级。小版本升级似乎可以保留软件包和配置（装的已经是小版本最新，没试过），但是大版本升级则相当于重新安装了，需要重新配置。 基于 LXC 的其它功能服务器其它杂七杂八的服务以及 Docker 就另外开在一个虚拟机上吧。 选用 Debian 12 系统，可以直接从 CT 模板中下载。 参考 https://pve.proxmox.com/wiki/Unprivileged_LXC_containers#Using_local_directory_bind_mount_points，挂载宿主机的共享目录：pct set 100 -mp0 /host/dir,mp=/container/mount/point 似乎直接挂载宿主机中的 /mnt 的话，即使配置完 UID / GID 映射，LXC 容器也并不能正常访问其中宿主机挂载的子目录，可能需要在宿主机 umount 再 mount。所以需要将 mp 指定的目录细化到类似 /mnt/hdd1 这一层。 添加一个虚拟网卡 eth0 桥接到 vmbr0 上，IPv4 选择 DHCP 接收 OpenWrt 的地址分发；而如果 IPv6 选择 DHCP 的话，DHCPv6 是不会通告默认路由的，所以建议选择 SLAAC。 初始配置换源，参考：https://mirrors.tuna.tsinghua.edu.cn/help/debian/ 添加 sudo，先 apt install sudo，再 echo &quot;username ALL=(ALL) ALL&quot; | sudo tee /etc/sudoers.d/username 默认下终端可能会有乱码，需要配置 UTF-8 语言，sudo dpkg-reconfigure locales 然后选中 en_US.UTF-8 即可。 配置 UID / GID 映射如果直接挂载目录共享的话，容器内外会视为不同的用户，导致共享文件时有着麻烦的权限问题。不过我们可以通过 lxc.idmap 来将某一容器中的某些用户映射到 Host 中的某些用户。 参考： https://kcore.org/2022/02/05/lxc-subuid-subgid/ https://pve.proxmox.com/wiki/Unprivileged_LXC_containers https://itsembedded.com/sysadmin/proxmox_bind_unprivileged_lxc/ 以下以映射 102 容器中的 1000 用户为 Host 中的 1000 用户为例： 先在 /etc/subuid 和 /etc/subgid 中都添加上 root:1000:1，来允许 root 创建到 1000 用户的映射。 然后在 /etc/pve/lxc/102.conf 的配置文件中，添加如下内容： /etc/pve/lxc/102.conf123456lxc.idmap: u 0 100000 1000lxc.idmap: g 0 100000 1000lxc.idmap: u 1000 1000 1lxc.idmap: g 1000 1000 1lxc.idmap: u 1001 101000 64535lxc.idmap: g 1001 101000 64535 建议将原来容器内 1000 映射到的 101000 用户还包含在映射范围内，这样容器内的 root 才能够将文件的所有权从原先的转到现在的。 安装 Docker由于并不想在 PVE 中直接装 Docker，故在 Debian 虚拟机中安装 Docker。 参考： https://docs.docker.com/engine/install/debian/#install-using-the-convenience-script https://yeasy.gitbook.io/docker_practice/install/debian 安装： 12curl -fsSL https://get.docker.com -o get-docker.shsudo sh get-docker.sh 加入 Docker 用户组，在无 root 权限下使用 Docker：sudo usermod -aG docker $USER 验证安装正确性：docker run --rm hello-world 如没有方便的网络接入，配置镜像参考：https://yeasy.gitbook.io/docker_practice/install/mirror 在 LXC 容器启动后，Docker 会过一两分钟才会启动，暂时不知道原因为何。 Docker 启用 IPv6 支持由于挂的 PT 需要有 IPv6 接入，故需要给 Docker 开启 IPv6。 参考：https://docs.docker.com/config/daemon/ipv6/ 编辑配置文件： /etc/docker/daemon.json1234{ &quot;experimental&quot;: true, &quot;ip6tables&quot;: true} 然后重启 Docker：sudo systemctl restart docker 启动容器时，需要额外的配置。如果使用 Docker Compose，则添加如下内容，并在对应 service 配置中添加 networks 即可： 1234networks: ip6net: enable_ipv6: true subnet: 2001:0DB8::/112 netstat -tunlp 可以查看监听端口，若对应的端口只有 tcp6 在监听也不用慌张，若 cat /proc/sys/net/ipv6/bindv6only 为 0 则表明已在双栈上监听，参考（https://unix.stackexchange.com/questions/496137/does-80-in-netstat-output-means-only-ipv6-or-ipv6ipv4） 配置 PT 客户端使用 linuxserver/transmission Docker 镜像。 使用 Docker Compose 来配置容器，按说明编写配置文件： docker-compose.yml12345678910111213141516171819202122232425262728293031323334---version: &quot;2.1&quot;services: transmission: image: lscr.io/linuxserver/transmission:latest container_name: transmission environment: - PUID=1000 - PGID=1000 - TZ=Asia/Shanghai - TRANSMISSION_WEB_HOME=/config/transmission-web-control/src #optional - USER=thx #optional - FILE__PASS=/config/password #optional - WHITELIST= #optional - PEERPORT= #optional - HOST_WHITELIST= #optional volumes: - /home/thx/Service/transmission/config:/config - /data/PT:/downloads - /data/PT/torrentwatch:/watch - /mnt:/mnt ports: - 9091:9091 - 51413:51413 - 51413:51413/udp restart: unless-stopped networks: - ip6netnetworks: ip6net: enable_ipv6: true ipam: config: - subnet: 2001:0DB8:1::/112 其中 UID / GID 可以参考 id $user 的结果设置。 生成密钥文件时不能有行末符，可以这样生成：echo -n password_in_clear_text &gt; password Web UI 使用 transmission-web-control，在 /config 对应的目录下 git clone 即可。 迁移之前的种子和配置只需要将之前的 config 目录移过来即可，如果之前是裸机安装，目录可能在 /var/lib/transmission-daemon/info 还要记得在路由器上配置 51413 端口的 TCP &amp; UDP 转发。 配完端口转发，查看防火墙规则链可知，无需再在通信规则中开放端口。 运行方法创建 container 并启动后台运行：docker compose up -d 停止并删除 container 和对应的网络：docker compose down 启动 / 停止 对应的 container：docker compose start / docker compose stop 更新：先 docker-compose pull，然后 docker compose down 和 docker compose up -d 清理无用镜像：docker image prune 配置 Syncthing 同步服务使用 linuxserver/syncthing Docker 镜像。 使用 Docker Compose 来配置容器，按说明编写配置文件。 由于 Syncthing 需要发送本地组播包来进行本地链路上的节点发现，故这里将网络模式修改为 host 模式，参考：https://github.com/syncthing/syncthing/blob/main/README-Docker.md#discovery。 docker-compose.yml1234567891011121314151617---version: &quot;2.1&quot;services: syncthing: image: lscr.io/linuxserver/syncthing:latest container_name: syncthing hostname: RaspCloud #optional environment: - PUID=1000 - PGID=1000 - TZ=Asia/Shanghai volumes: - /home/thx/Service/syncthing/config:/config - /mnt:/mnt - /data:/data network_mode: host restart: unless-stopped 还要记得在路由器上配置 22000 端口的 TCP &amp; UDP 转发。 运行方法同上。 配置蓝牙监听服务之前 使用树莓派和小米蓝牙温湿度计可视化宿舍温湿度变化 中配置了蓝牙接收温湿度计数据，也把这个服务迁移过来。 花费十元购入了 BR8651 芯片的 USB 蓝牙 5.1 适配器，据说该芯片在 Linux 下有驱动。 可能是因为芯片较新的原因，各方面的支持似乎都还不太好，尝试了几个方法都没能正常地使用脚本获取 BLE Advertising，这里记录了几次失败的过程。 配置 LXC 的 USB 直通本来想在 LXC 容器中配置蓝牙服务，但是 hciconfig 会报错 Can't open HCI socket.: Address family not supported by protocol，查阅资料后发现，由于蓝牙将自身注册为网络接口，所以并不能像使用 USB 那样将蓝牙设备传给 LXC 容器，参考：https://forum.proxmox.com/threads/assign-a-bluetooth-dongle-to-a-ct.67577/。 所以以下部分只是记录如何直通 USB 设备。 参考：https://medium.com/@konpat/usb-passthrough-to-an-lxc-proxmox-15482674f11d 直接在 LXC 中 lsusb 是可以看到各个 USB 设备的，但是无法使用。 12345678Bus 004 Device 002: ID 174c:3074 ASMedia Technology Inc. ASM1074 SuperSpeed hubBus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hubBus 003 Device 003: ID 05e3:0751 Genesys Logic, Inc. microSD Card ReaderBus 003 Device 004: ID 0a12:0001 Cambridge Silicon Radio, Ltd Bluetooth Dongle (HCI mode)Bus 003 Device 002: ID 174c:2074 ASMedia Technology Inc. ASM1074 High-Speed hubBus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hubBus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hubBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub 关注其中的 Bluetooth 设备，位于 Bus 003 Device 004。 查看其主次设备号： 12root@pve:/etc/pve/lxc# ls -al /dev/bus/usb/003/004crw-rw-r-- 1 root root 189, 259 Jul 1 00:28 /dev/bus/usb/003/004 主设备号为 189，向配置文件中添加以下内容，将设备映射到容器内： /etc/pve/lxc/102.conf12lxc.cgroup.devices.allow: c 189:* rwmlxc.mount.entry: /dev/bus/usb/003/004 dev/bus/usb/003/004 none bind,optional,create=file 或者直接将目录映射过去也行，防止设备名发生变化： /etc/pve/lxc/102.conf1lxc.mount.entry: /dev/bus/usb/003 dev/bus/usb/003 none bind,optional,create=dir 如果容器中 ls -al /dev/bus/usb/003/004 权限不对（nobody / nogroup），可以在 PVE 中 chown 100000:100000 /dev/bus/usb/003/004，这样容器中就为 root 权限了。 在宿主机中直接配置蓝牙由于不想再单独开一台虚拟机，故打算在宿主机中直接运行蓝牙监听服务。 正好宿主机中也有一个非 root 用户，使用这个用户来运行服务，尽量减小对系统的影响。 先验证蓝牙功能是否正常，在 bluetoothctl 中运行 1234menu scantransport lebackscan on 应该能够看到一些广播和数据。 （我这儿 hcitool lescan 会报错 Set scan parameters failed: Input/output error，参考 https://stackoverflow.com/questions/70777475/hcitool-lescan-returns-an-i-o-error-on-manjaro 发现如上使用 bluetoothctl 就能正常工作） 非特权安装 pip312wget https://bootstrap.pypa.io/get-pip.pypython3 get-pip.py --user 如果报错 ModuleNotFoundError: No module named 'distutils.cmd'，则需要安装 python3-distutils 安装运行 MiTemperature2按照 MiTemperature2 文档进行安装。 安装 bluepy 前需要先安装 libglib2.0-dev 安装 pybluez 时可能遇到 error in PyBluez setup command: use_2to3 is invalid. 的问题，参考 https://github.com/pybluez/pybluez/issues/467，先 pip3 install setuptools==58 再安装即可。 之后遇到类似 https://github.com/JsBergbau/MiTemperature2/issues/106 的问题，以及类似 https://stackoverflow.com/questions/75175755/not-seeing-ble-device-advertising-unless-set-bluetoothctl-transport-le 的问题，都暂时没有被解决。 于是也放弃了。 配置 MC 服务器安装 Java 8由于该整合包版本需要 Java 8，而 Debian 官方源中没有，故使用第三方源安装。 准备工作：sudo apt install apt-transport-https ca-certificates wget dirmngr gnupg software-properties-common 添加第三方源： 12wget -qO - https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public | sudo tee /etc/apt/trusted.gpg.d/adoptopenjdk.ascsudo add-apt-repository --yes https://adoptopenjdk.jfrog.io/adoptopenjdk/deb/ 由于 adoptopenjdk 可能还没加上 bookworm 源，可能需要手动将源中的 bookworm 改为 bullseye。 安装 Java 8 JRE： 12sudo apt updatesudo apt install adoptopenjdk-8-hotspot-jre 添加为服务添加为 systemd 服务，参考 https://gist.github.com/winny-/bb17853ffc76fbb9b039 进行修改。 /etc/systemd/system/minecraft.service1234567891011121314[Unit]Description=Minecraft Server[Service]WorkingDirectory=/data/MC/RAD2-1.3/RAD2-Serverpack-1.3User=thxType=forkingExitType=cgroupExecStart=/usr/bin/tmux new-session -s mc -d './LaunchServer.sh'ExecStop=/usr/bin/tmux send-keys -t mc:0.0 'say SERVER SHUTTING DOWN. Saving map...' C-m 'save-all' C-m 'stop' C-mExecStop=/bin/sleep 2[Install]WantedBy=multi-user.target 使用 Type=forking 来管理 tmux new-session fork 出的进程。 使用 ExitType=cgroup 等待所有程序退出。","link":"/2023/06/17/%E5%9F%BA%E4%BA%8E-Proxmox-VE-%E7%9A%84-All-in-One-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Icarus","slug":"Icarus","link":"/tags/Icarus/"},{"name":"ACME","slug":"ACME","link":"/tags/ACME/"},{"name":"树莓派","slug":"树莓派","link":"/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"name":"软路由","slug":"软路由","link":"/tags/%E8%BD%AF%E8%B7%AF%E7%94%B1/"},{"name":"Clash","slug":"Clash","link":"/tags/Clash/"},{"name":"AdGuard Home","slug":"AdGuard-Home","link":"/tags/AdGuard-Home/"},{"name":"IoT","slug":"IoT","link":"/tags/IoT/"},{"name":"Grafana","slug":"Grafana","link":"/tags/Grafana/"},{"name":"PVE","slug":"PVE","link":"/tags/PVE/"}],"categories":[{"name":"折腾","slug":"折腾","link":"/categories/%E6%8A%98%E8%85%BE/"},{"name":"树莓派","slug":"折腾/树莓派","link":"/categories/%E6%8A%98%E8%85%BE/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"name":"博客","slug":"折腾/博客","link":"/categories/%E6%8A%98%E8%85%BE/%E5%8D%9A%E5%AE%A2/"}],"pages":[{"title":"关于","text":"曾经是 OIer，现在研一了，是菜狗QAQ","link":"/about/index.html"}]}
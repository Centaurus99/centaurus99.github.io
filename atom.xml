<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Centaurus99 的杂物堆</title>
  
  
  <link href="https://blog.centaurus99.com/atom.xml" rel="self"/>
  
  <link href="https://blog.centaurus99.com/"/>
  <updated>2025-10-08T09:26:50.000Z</updated>
  <id>https://blog.centaurus99.com/</id>
  
  <author>
    <name>Centaurus99</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于 Proxmox VE 的 All in One 服务器搭建</title>
    <link href="https://blog.centaurus99.com/2023/06/17/%E5%9F%BA%E4%BA%8E-Proxmox-VE-%E7%9A%84-All-in-One-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    <id>https://blog.centaurus99.com/2023/06/17/%E5%9F%BA%E4%BA%8E-Proxmox-VE-%E7%9A%84-All-in-One-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</id>
    <published>2023-06-17T11:12:49.000Z</published>
    <updated>2025-10-08T09:26:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>树莓派挂在宿舍当软路由已经两年了，大部分情况下都挺好用，透明代理体验也还算尚可。</p><p>然而由于使用的 USB 无线网卡驱动支持较差，无线峰值速率只能跑到 200+ Mbps，且不大稳定。并且树莓派性能不高，无法开设一些高负载服务。另外，树莓派作为路由常年开启，需要考虑散热问题，虽然给使用的小风扇写了启停功能，但是启动运转时还是会有一定的噪音，较为恼人。</p><span id="more"></span><p>正好快到暑假了，需要开设一台 MC 服务器，于是打算换用一台较高性能的软路由，再配合 Wi-Fi 6 无线路由器作为 AP，提供高速率、高稳定性的有线无线网络接入。</p><h2 id="整体配置概览"><a href="#整体配置概览" class="headerlink" title="整体配置概览"></a>整体配置概览</h2><h3 id="软路由"><a href="#软路由" class="headerlink" title="软路由"></a>软路由</h3><p>选用畅网奔腾 8505 软路由，1 大核 + 4 小核，大核的单核性能较高，CPU-Z 单核跑分相比我的笔记本（i5-1135G7）高出约 40%，可以用来开设一些吃单核性能的服务。</p><p>内存使用了两条光威 8GB DDR4 3200 内存，时序 CL-22-22-22-52。使用 16 GB 内存也主要是为了开设 MC 服务器考虑。</p><p>存储方面安装了西数 SN570 1T 固态作为系统盘，也暂时承担一部分文件存储功能。</p><p>作为一台路由器，这台软路由有 6 个 Intel i226-V 2.5G 网卡，即使以后有更多设备需要有线接入，也不一定需要增设交换机。</p><p>功耗方面，实测待机时输入功率约为 10 W。</p><p>温度方面，室温 24 度环境下，不加风扇待机时 CPU 约 40 度，NVME 固态约 50 度，软路由表面摸起来较热；加上赠送的 USB 12cm 风扇吹顶部铝制散热片后，待机时 CPU 约 30 度，NVME 固态约 40 度，外壳很凉快。</p><h3 id="无线-AP"><a href="#无线-AP" class="headerlink" title="无线 AP"></a>无线 AP</h3><p>目前廉价的 Wi-Fi 6 路由器均使用千兆有线网口，单口有线速率甚至可能不及无线速率，故考虑需要能和软路由之间做链路聚合提高内网性能。</p><p>调查后发现，TP-Link 系列的路由器似乎原厂固件就有着端口聚合功能，其子品牌水星也有着相同的功能，且便宜几十元。</p><p>于是选用水星 X306G 路由器，AX3000 规格，计划只使用其 5G 频段 Wi-Fi 和端口聚合功能，运行在 AP 模式。</p><h2 id="安装和调试-PVE"><a href="#安装和调试-PVE" class="headerlink" title="安装和调试 PVE"></a>安装和调试 PVE</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>参考官方教程或网上教程，一路 next 即可。</p><p>其中将 ETH5 对应的网卡设为管理口，静态 IP 设为 <code>192.168.22.100</code>（22 网段）。</p><h3 id="更换内核版本"><a href="#更换内核版本" class="headerlink" title="更换内核版本"></a>更换内核版本</h3><p>由于 8505 CPU 是大小核架构，建议使用较新的内核获取大小核调度优化。</p><p>先换源，参考：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/proxmox/">https://mirrors.tuna.tsinghua.edu.cn/help/proxmox/</a>，并删除企业源：<code>rm /etc/apt/sources.list.d/pve-install-repo.list</code></p><p><code>apt update</code> 后搜索可用的内核版本，我这儿选择 6.2 版本：<code>apt install pve-kernel-6.2</code>，安装完重启后生效。</p><p>可以使用 <code>proxmox-boot-tool</code> 管理安装的以及用于启动的 kernel 版本。</p><h3 id="管理页面添加温度显示"><a href="#管理页面添加温度显示" class="headerlink" title="管理页面添加温度显示"></a>管理页面添加温度显示</h3><p>偷懒使用了恩山论坛的脚本，添加了温度，CPU频率，硬盘信息的显示：<a href="https://www.right.com.cn/forum/thread-6754687-1-1.html">https://www.right.com.cn/forum/thread-6754687-1-1.html</a></p><h3 id="删除-lvm-thin-并扩容-lvm"><a href="#删除-lvm-thin-并扩容-lvm" class="headerlink" title="删除 lvm-thin 并扩容 lvm"></a>删除 lvm-thin 并扩容 lvm</h3><p>由于使用单盘搭建 All in One 服务器，计划在 PVE 系统中使用 samba 共享数据文件，因此需要较大的 lvm 空间。同时，由于不需要开大量的虚拟机，也用不到 lvm-thin 的特性。故将 lvm-thin 的空间全部合入 lvm 中。</p><p>参考：<a href="https://foxi.buduanwang.vip/virtualization/pve/1434.html/">https://foxi.buduanwang.vip/virtualization/pve/1434.html/</a></p><p>删除 lvm-thin：<code>lvremove /dev/pve/data</code></p><p>扩容 lvm：<code>lvextend -rl +100%FREE /dev/pve/root</code></p><h3 id="部署-samba"><a href="#部署-samba" class="headerlink" title="部署 samba"></a>部署 samba</h3><p>安装：<code>apt update &amp;&amp; apt install samba</code></p><p>添加用户：<code>useradd thx</code></p><p>将用户添加到 samba：<code>smbpasswd -a thx</code></p><p>编辑 samba 配置文件 <code>/etc/samba/smb.conf</code>，添加共享文件夹的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[RaspCloud]</span><br><span class="line">    path = /data/RaspCloud</span><br><span class="line">    writeable = yes</span><br><span class="line">    create mask = 0777</span><br><span class="line">    directory mask = 1777</span><br><span class="line">    public = yes</span><br><span class="line">    guest ok = yes</span><br><span class="line"></span><br><span class="line">[PT]</span><br><span class="line">    path = /data/PT</span><br><span class="line">    writeable = yes</span><br><span class="line">    create mask = 0644</span><br><span class="line">    directory mask = 1755</span><br><span class="line">    public = yes</span><br><span class="line">    guest ok = yes</span><br><span class="line"></span><br><span class="line">[Private]</span><br><span class="line">    path = /data/Private</span><br><span class="line">    writeable = yes</span><br><span class="line">    create mask = 0644</span><br><span class="line">    directory mask = 1755</span><br><span class="line">    public = no</span><br><span class="line">    guest ok = no</span><br><span class="line">    valid users = thx</span><br><span class="line">    browseable = yes</span><br><span class="line"></span><br><span class="line">[Sync]</span><br><span class="line">    path = /data/Sync</span><br><span class="line">    writeable = yes</span><br><span class="line">    create mask = 0644</span><br><span class="line">    directory mask = 1755</span><br><span class="line">    public = no</span><br><span class="line">    guest ok = no</span><br><span class="line">    valid users = thx</span><br><span class="line">    browseable = yes</span><br></pre></td></tr></table></figure><p>其中 <code>/data/RaspCloud</code> 为公开共享目录，内部有 <code>read-only</code> 目录通过改变目录所有者来限制 guest 的写入。</p><p><code>/data/PT</code> 为公开只读共享目录。</p><p><code>/data/Private</code> 和 <code>/data/Sync</code> 为私密目录，使用白名单限制访问用户。</p><p>如果需要在共享目录中软链接到系统里的其它目录中，则需要在 <code>[global]</code> 段中添加：</p><figure class="highlight plaintext"><figcaption><span>/etc/samba/smb.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">   follow symlinks = yes</span><br><span class="line">   wide links = yes</span><br><span class="line">   unix extensions = no</span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/humanking7/article/details/85058471">https://blog.csdn.net/humanking7/article/details/85058471</a></p><p><code>smb.conf</code> 中的配置项可查阅：<a href="https://www.samba.org/samba/docs/current/man-html/smb.conf.5.html">https://www.samba.org/samba/docs/current/man-html/smb.conf.5.html</a></p><h3 id="更改-CPU-电源策略"><a href="#更改-CPU-电源策略" class="headerlink" title="更改 CPU 电源策略"></a>更改 CPU 电源策略</h3><p>作为一个桌面服务器，需要考虑到功耗与发热的问题。</p><p>参考：<a href="https://pve.sqlsec.com/4/6/">https://pve.sqlsec.com/4/6/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看支持的 CPU 电源模式</span><br><span class="line">cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors</span><br><span class="line"></span><br><span class="line"># 查看当前的 CPU 电源模式</span><br><span class="line">cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">电源模式</th><th align="left">解释说明</th></tr></thead><tbody><tr><td align="left">performance</td><td align="left">性能模式，将 CPU 频率固定工作在其支持的较高运行频率上，而不动态调节。</td></tr><tr><td align="left">userspace</td><td align="left">系统将变频策略的决策权交给了用户态应用程序，较为灵活。</td></tr><tr><td align="left">powersave</td><td align="left">省电模式，CPU 会固定工作在其支持的最低运行频率上。</td></tr><tr><td align="left">ondemand</td><td align="left">按需快速动态调整 CPU 频率，没有负载的时候就运行在低频，有负载就高频运行。</td></tr><tr><td align="left">conservative</td><td align="left">与 ondemand 不同，平滑地调整 CPU 频率，频率的升降是渐变式的，稍微缓和一点。</td></tr><tr><td align="left">schedutil</td><td align="left">负载变化回调机制，后面新引入的机制，通过触发 schedutil <code>sugov_update</code> 进行调频动作。</td></tr></tbody></table><p>安装工具：<code>apt install cpufrequtils</code></p><p>设为 <code>ondemand</code> 模式：<code>cpufreq-set -g ondemand</code></p><h3 id="无显示器启动问题"><a href="#无显示器启动问题" class="headerlink" title="无显示器启动问题"></a>无显示器启动问题</h3><p>发现如果不接显示器，则无法正常启动。初步判断在启动 grub 或之后出现问题。</p><p>然而，对 BIOS 和 grub 配置文件做各种修改之后也无法解决问题。</p><p>最终打算网上买个 HDMI 诱骗器插上得了。</p><p>插上后也没用。</p><p>经仔细排查（偶然将接地良好的显示器的 Type-C 线的外壳接触到软路由 Type-C 口的外壳上，发现问题就消失了），发现是供电接地问题。</p><p>先前为了监测功耗，我将电源的 DC 转为了 USB 母口，插上了 USB 电压电流测量设备，再将测量设备的 USB 口转为 DC 口，接到软路由的 DC 供电口。在这个过程中可能丢失了地线。</p><p>直接接电源就不再有问题。</p><h3 id="挂载硬盘"><a href="#挂载硬盘" class="headerlink" title="挂载硬盘"></a>挂载硬盘</h3><p>再接上一块老机械盘，用来挂 PT。</p><p>安装好硬盘后，先使用 <code>lsblk -f</code> 或者 <code>ls -l /dev/disk/by-uuid</code> 找到分区的 UUID，使用 UUID 进行挂载可以避免 <code>/dev/</code> 下设备名的改变导致的挂载问题。</p><p>然后在 <code>/etc/fstab</code> 中添加挂载信息：</p><figure class="highlight plaintext"><figcaption><span>/etc/fstab</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID=1f4a2672-3039-594b-808c-a5d3913b0fde /data/hdd ext4 defaults,nofail 0 0</span><br></pre></td></tr></table></figure><p>注意 <code>nofail</code> 用来在硬盘没有成功挂载时也能正常启动，否则启动会等待硬盘挂载，失败后进入 emergency mode。</p><p>然后 <code>mount -a</code> 生效，开机后也会自动挂载。</p><h3 id="硬盘维护"><a href="#硬盘维护" class="headerlink" title="硬盘维护"></a>硬盘维护</h3><h4 id="缩减数据盘的文件系统预留空间"><a href="#缩减数据盘的文件系统预留空间" class="headerlink" title="缩减数据盘的文件系统预留空间"></a>缩减数据盘的文件系统预留空间</h4><p>参考：<a href="https://askubuntu.com/questions/249387/df-h-used-space-avail-free-space-is-less-than-the-total-size-of-home">https://askubuntu.com/questions/249387/df-h-used-space-avail-free-space-is-less-than-the-total-size-of-home</a></p><p>默认情况下，<code>df -h</code> 查看硬盘空间会发现，<code>Size</code> 会大于 <code>Used</code> + <code>Avail</code>，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Filesystem            Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/sda1             294G  261G   19G  94% /data/hdd</span><br></pre></td></tr></table></figure><p>这是由于 <code>ext2/3/4</code> 文件系统默认会保留 5% 的空间只供 root 使用，而数据盘就没这个必要了，可以 <code>tune2fs -m 0 /dev/sda1</code> 来取消预留空间。</p><h4 id="S-M-A-R-T-信息"><a href="#S-M-A-R-T-信息" class="headerlink" title="S.M.A.R.T. 信息"></a>S.M.A.R.T. 信息</h4><p>在 WebUI 中，可以在节点的磁盘一栏中查看 S.M.A.R.T. 信息。</p><p>命令行中，可以使用 <code>smartctl -a /dev/sda</code> 查看。</p><p>S.M.A.R.T. 信息的解析，可以参考：<a href="https://blog.csdn.net/MrSate/article/details/88564764">https://blog.csdn.net/MrSate/article/details/88564764</a>。</p><p>使用 <code>journalctl -u smartmontools.service</code> 可以查看 smartmontools 守护进程的监测日志。</p><h4 id="配置-smartd-守护程序"><a href="#配置-smartd-守护程序" class="headerlink" title="配置 smartd 守护程序"></a>配置 smartd 守护程序</h4><p>还可以在 <code>/etc/smartd.conf</code> 中配置守护程序，初始时配置如下：</p><figure class="highlight plaintext"><figcaption><span>/etc/smartd.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEVICESCAN -d removable -n standby -m root -M exec /usr/share/smartmontools/smartd-runner</span><br></pre></td></tr></table></figure><p>添加如下参数：</p><ul><li>基于默认修改的监测与报警参数 <code>-H -f -l error -l selftest -C 197 -U 198</code>，相比默认的 <code>-a</code> 参数减少了等效的 <code>-t</code> 参数，否则每半小时都会在日志中输出 S.M.A.R.T. 信息的变化情况（详见 <code>/etc/smartd.conf</code> 中的说明）</li><li>每周六凌晨三点短自检，每月二十号凌晨三点长自检：<code>-s (S/../../6/03/|L/../20/./03)</code></li><li>监控温度，在温度变化 5 度时记录，达到 40 度时记录，达到 45 度时警告（0 为关闭）：<code>-W 5,40,45</code></li></ul><p>修改后如下：</p><figure class="highlight plaintext"><figcaption><span>/etc/smartd.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DEFAULT -H -f -l error -l selftest -d removable -n standby -m root -M exec /usr/share/smartmontools/smartd-runner</span><br><span class="line">/dev/nvme0 -W 0,60,70</span><br><span class="line">DEVICESCAN -C 197 -U 198 -s (S/../../6/03/|L/../20/./03) -W 0,40,50</span><br></pre></td></tr></table></figure><p>重启服务后生效：<code>systemctl restart smartd.service</code></p><p>如果守护程序检测到了出现问题，也会给安装 PVE 时填写的邮箱发邮件，实测 QQ 邮箱可以收到。</p><p>参考：</p><ul><li><code>man smartd.conf</code></li><li><a href="https://blog.kahosan.top/2022/06/20/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20smartd%20%E7%9B%91%E6%8E%A7%E4%BD%A0%E7%9A%84%E7%A1%AC%E7%9B%98/">https://blog.kahosan.top/2022/06/20/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20smartd%20%E7%9B%91%E6%8E%A7%E4%BD%A0%E7%9A%84%E7%A1%AC%E7%9B%98/</a></li><li><a href="https://forum.proxmox.com/threads/seagate-smart-prefailure-attribute.57454/">https://forum.proxmox.com/threads/seagate-smart-prefailure-attribute.57454/</a></li><li><a href="https://wiki.archlinux.org/title/S.M.A.R.T.#smartd">https://wiki.archlinux.org/title/S.M.A.R.T.#smartd</a></li></ul><h4 id="配置硬盘休眠"><a href="#配置硬盘休眠" class="headerlink" title="配置硬盘休眠"></a>配置硬盘休眠</h4><p>可能需要先关闭 <code>pvestatd</code> 对硬盘的扫描，参考：<a href="https://www.ippa.top/954.html">https://www.ippa.top/954.html</a></p><p>先 <code>ls -l /dev/disk/by-uuid</code> 找到硬盘的 UUID <code>1f4a2672-3039-594b-808c-a5d3913b0fde</code>，然后编辑 <code>/etc/lvm/lvm.conf</code>，在 <code>global_filter</code> 中添加 <code>&quot;r|/dev/disk/by-uuid/1f4a2672-3039-594b-808c-a5d3913b0fde.*|&quot;</code>，结果如下：</p><figure class="highlight plaintext"><figcaption><span>/etc/lvm/lvm.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">devices &#123;</span><br><span class="line">    global_filter=[&quot;r|/dev/zd.*|&quot;, &quot;r|/dev/disk/by-uuid/1f4a2672-3039-594b-808c-a5d3913b0fde.*|&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>pvestatd restart</code> 后生效。</p><p>查看硬盘当前状态：<code>smartctl -i -n standby /dev/sda | grep &quot;mode&quot;|awk &#39;&#123;print $4&#125;&#39;</code>，ACTIVE 或者 IDLE 都为运转状态。</p><p>查询当前电源管理参数：<code>hdparm -B /dev/sda</code></p><p>进入 <code>standby mode</code>：<code>hdparm -y /dev/sda</code></p><p>进入 <code>sleep mode</code>：<code>hdparm -Y /dev/sda</code></p><p>然后编辑 <code>/etc/hdparm.conf</code>，添加需要休眠的硬盘设置，比如十分钟后 standby 如下配置：</p><figure class="highlight plaintext"><figcaption><span>/etc/hdparm.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/dev/disk/by-uuid/1f4a2672-3039-594b-808c-a5d3913b0fde &#123;</span><br><span class="line">        apm = 127</span><br><span class="line">        acoustic_management = 127</span><br><span class="line">        spindown_time = 120</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/usr/lib/pm-utils/power.d/95hdparm-apm resume</code> 后生效（参考 <code>man hdparm.conf</code>）</p><p>其中 <code>spindown_time</code> 参考 <code>man hdparm</code> 中的 <code>-S</code> 选项说明来设置。</p><p>不过我的这块硬盘似乎并不按照设定的 <code>spindown_time</code> 来休眠，于是打算观察一段时间 <code>Load_Cycle_Count</code> 的增长情况来决定是否开启休眠功能。</p><p><code>smartctl -a /dev/sda | grep Load_Cycle_Count</code> 即可查看。</p><h4 id="硬盘无法休眠-Debug"><a href="#硬盘无法休眠-Debug" class="headerlink" title="硬盘无法休眠 Debug"></a>硬盘无法休眠 Debug</h4><p>后来又入了两块盘，但是 <code>hdparm -y</code> 之后又会立即唤醒，无法进入休眠状态。</p><p>诊断方式参考：<a href="https://askubuntu.com/questions/1406434/block-dump-reporting-missing-from-ubuntu-22-04">https://askubuntu.com/questions/1406434/block-dump-reporting-missing-from-ubuntu-22-04</a></p><p>监控对 <code>/dev/sda</code> 的使用：<code>blktrace -d /dev/sda -a pc -o - | blkparse -i -</code></p><p>然后 <code>hdparm -Y /dev/sda</code> ，查看唤醒磁盘的进程。</p><p>我这儿结果如下，然而搜索相关资料后并没有获取到有用的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">8,16   0        1     0.000000000 18871  D   N 0 [hdparm]</span><br><span class="line">8,16   1        1     0.497835738     0  C   N [0]</span><br><span class="line">8,16   0        2     1.412267626   168  D   R 4 [scsi_eh_1]</span><br><span class="line">8,16   0        3     1.412286261    14  C   R [0]</span><br><span class="line">8,16   0        4     1.412293625    18  D   R 12 [kworker/0:1]</span><br><span class="line">8,16   0        5     1.412295327    14  C   R [0]</span><br><span class="line">8,16   0        6     1.412297439    18  D   R 4 [kworker/0:1]</span><br><span class="line">8,16   0        7     1.412298518    14  C   R [0]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>有可能是 ext4 的 lazy init 导致，参考：<a href="https://unix.stackexchange.com/questions/533789/hard-drive-waking-from-sleep-for-no-apparent-reason">https://unix.stackexchange.com/questions/533789/hard-drive-waking-from-sleep-for-no-apparent-reason</a></p><h2 id="基于-LXC-安装-OpenWrt"><a href="#基于-LXC-安装-OpenWrt" class="headerlink" title="基于 LXC 安装 OpenWrt"></a>基于 LXC 安装 OpenWrt</h2><p>LXC 开销小，故尝试使用 LXC 安装 OpenWrt</p><h3 id="安装-OpenWrt"><a href="#安装-OpenWrt" class="headerlink" title="安装 OpenWrt"></a>安装 OpenWrt</h3><p>安装过程参考：<a href="https://virtualizeeverything.com/2022/05/23/setting-openwrt-in-proxmox-lxc/">https://virtualizeeverything.com/2022/05/23/setting-openwrt-in-proxmox-lxc/</a></p><p>下载地址：<a href="https://downloads.openwrt.org/">https://downloads.openwrt.org/</a></p><p>我选择当时最新的稳定版本 22.03.5：<a href="https://downloads.openwrt.org/releases/22.03.5/targets/x86/64/">https://downloads.openwrt.org/releases/22.03.5/targets/x86/64/</a></p><p>下载 <code>rootfs.tar.xz</code> 即可，可以在下载时选择哈希校验。</p><p>创建容器的 UI 的文档：<a href="https://pve.proxmox.com/pve-docs/chapter-pct.html#pct_settings">https://pve.proxmox.com/pve-docs/chapter-pct.html#pct_settings</a></p><p>似乎由于 Web 页面无法添加 <code>--ostype unmanaged</code> 参数，需要进入命令行创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pct create 101 /var/lib/vz/template/cache/openwrt-22.03.5-x86-64-rootfs.tar.gz --arch amd64 --hostname RaspCloud --rootfs local:1 --memory 1024 --cores 6 --cpuunits 200 --ostype unmanaged --unprivileged 1</span><br></pre></td></tr></table></figure><p>然后在 Web UI 中添加一个虚拟网卡 veth0，桥接到 PVE 网桥 vmbr0 上，用于 OpenWrt 和 PVE 的交互。</p><p>此时连接在管理口上的设备便和 OpenWrt 连在同一个网桥上了，就可以通过这个虚拟网卡的地址访问 OpenWrt 了。</p><p>有可能启动后 veth0 并没被正确配置，可以手动 up 之后使用 IPv6 地址访问。</p><p>然后到配置文件 <code>/etc/pve/lxc/101.conf</code> 里添加直通网卡，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lxc.net.0.type: phys</span><br><span class="line">lxc.net.0.link: enp2s0    --- 需要使用的 host 中的网卡名</span><br><span class="line">lxc.net.0.name: eth0      --- LXC 中显示的网卡名</span><br><span class="line">lxc.net.0.flags: up</span><br></pre></td></tr></table></figure><p>需要注意 net.id 的 id 不能和 Web UI 中添加的相同。</p><p>最终的 conf 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">arch: amd64</span><br><span class="line">cores: 6</span><br><span class="line">cpuunits: 200</span><br><span class="line">hostname: RaspCloud</span><br><span class="line">memory: 1024</span><br><span class="line">net0: name=veth0,bridge=vmbr0,firewall=1,hwaddr=92:81:93:06:8A:7E,type=veth</span><br><span class="line">onboot: 1</span><br><span class="line">ostype: unmanaged</span><br><span class="line">rootfs: local:101/vm-101-disk-1.raw,size=1G</span><br><span class="line">startup: order=1</span><br><span class="line">swap: 512</span><br><span class="line">unprivileged: 1</span><br><span class="line">lxc.net.5.type: phys</span><br><span class="line">lxc.net.5.link: enp2s0</span><br><span class="line">lxc.net.5.name: eth0</span><br><span class="line">lxc.net.5.flags: up</span><br><span class="line">lxc.net.6.type: phys</span><br><span class="line">lxc.net.6.link: enp3s0</span><br><span class="line">lxc.net.6.name: eth1</span><br><span class="line">lxc.net.6.flags: up</span><br><span class="line">lxc.net.7.type: phys</span><br><span class="line">lxc.net.7.link: enp4s0</span><br><span class="line">lxc.net.7.name: eth2</span><br><span class="line">lxc.net.7.flags: up</span><br><span class="line">lxc.net.8.type: phys</span><br><span class="line">lxc.net.8.link: enp5s0</span><br><span class="line">lxc.net.8.name: eth3</span><br><span class="line">lxc.net.8.flags: up</span><br><span class="line">lxc.net.9.type: phys</span><br><span class="line">lxc.net.9.link: enp6s0</span><br><span class="line">lxc.net.9.name: eth4</span><br><span class="line">lxc.net.9.flags: up</span><br></pre></td></tr></table></figure><h3 id="配置-OpenWrt"><a href="#配置-OpenWrt" class="headerlink" title="配置 OpenWrt"></a>配置 OpenWrt</h3><h4 id="连接互联网"><a href="#连接互联网" class="headerlink" title="连接互联网"></a>连接互联网</h4><p>由于我需要 OpenWrt 通过 PVE 管理口连接电脑，通过电脑将无线网共享给有线网来访问互联网，所以需要先为 veth0 配置一些上网功能。</p><p>添加 Interface veth0，类型为静态地址，网卡设为 veth0，配置好对应的地址，网关和 DNS 服务器地址即可。</p><p>之后应该就可以访问网络了。</p><h4 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h4><p>参考：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/openwrt/">https://mirrors.tuna.tsinghua.edu.cn/help/openwrt/</a></p><h4 id="添加中文"><a href="#添加中文" class="headerlink" title="添加中文"></a>添加中文</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install luci-i18n-base-zh-cn</span><br></pre></td></tr></table></figure><h4 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h4><p>不大喜欢 OpenWrt 的默认主题，换为 <a href="https://github.com/jerrykuku/luci-theme-argon/">Argon</a></p><p>下载对应的 ipk：<code>https://github.com/jerrykuku/luci-theme-argon/releases/download/v2.3.1/luci-theme-argon_2.3.1_all.ipk</code></p><p>然后安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">opkg install luci-compat</span><br><span class="line">opkg install luci-lib-ipkg</span><br><span class="line">opkg install luci-theme-argon*.ipk</span><br></pre></td></tr></table></figure><h4 id="配置路由功能"><a href="#配置路由功能" class="headerlink" title="配置路由功能"></a>配置路由功能</h4><p>启动后，只有 wan 和 wan6 两个 Interface，对应 eth0 网口（device）。</p><p>计划把其它网口都划入 LAN 中。</p><p>首先添加网桥设备 <code>br-lan</code>，把网口都加上去。</p><p>然后添加 <code>lan</code> 接口，使用静态地址，把 <code>br-lan</code> 加上去，配置地址即可。</p><p>然后发现，似乎 dnsmasq 出现了些问题，无法正常启动。</p><p>根据 <a href="https://github.com/openwrt/openwrt/issues/9064">https://github.com/openwrt/openwrt/issues/9064</a> 中的方法，<code>opkg remove procd-ujail</code> 可以解决。</p><p>dnsmasq 正常后，在接口中配置 DHCP &#x2F; DNS 的相关配置，然后 lan 口上接的设备就能获取到分配的地址了。</p><p>校园网只会分配 &#x2F;128 地址，故 IPv6 也需要做个 NAT。OpenWrt 中 IPv6 默认并不会配置 SNAT，需要做一些手动配置，参考：<a href="https://openwrt.org/docs/guide-user/network/ipv6/ipv6.nat6">https://openwrt.org/docs/guide-user/network/ipv6/ipv6.nat6</a></p><p>先启用 IPv6 masquerading，其中我这儿的 <code>zone[1]</code> 为 wan 域：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uci <span class="built_in">set</span> firewall.@zone[1].masq6=<span class="string">&quot;1&quot;</span></span><br><span class="line">uci commit firewall</span><br><span class="line">/etc/init.d/firewall restart</span><br></pre></td></tr></table></figure><p>然后关闭 wan6 口的 sourcefilter：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uci <span class="built_in">set</span> network.wan6.sourcefilter=<span class="string">&quot;0&quot;</span></span><br><span class="line">uci commit network</span><br><span class="line">/etc/init.d/network restart</span><br></pre></td></tr></table></figure><p>这样 lan 口上接的设备也能获取到 DHCPv6 分配的 IPv6 地址了，OpenWrt 也会为其提供 NAT6 服务。</p><h4 id="配置-OpenClash"><a href="#配置-OpenClash" class="headerlink" title="配置 OpenClash"></a>配置 OpenClash</h4><p>先卸载 dnsmasq：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg remove dnsmasq</span><br><span class="line"><span class="built_in">mv</span> /etc/config/dhcp /etc/config/dhcp.bak</span><br></pre></td></tr></table></figure><p>再按照发布页的说明，先安装依赖，再下载安装 ipk 即可：<a href="https://github.com/vernesong/OpenClash/releases">https://github.com/vernesong/OpenClash/releases</a></p><p>之后按个人喜好配置即可，我选用的是 Meta 核心的 redir-host 模式。</p><p>可以将校园网网段设为绕过，减少校内网络访问开销：</p><p>IPv4：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">59.66.0.0/16</span><br><span class="line">101.5.0.0/16</span><br><span class="line">101.6.0.0/16</span><br><span class="line">118.229.0.0/19</span><br><span class="line">166.111.0.0/16</span><br><span class="line">183.172.0.0/15</span><br><span class="line">202.112.39.2/32</span><br><span class="line">219.223.168.0/21</span><br><span class="line">219.223.176.0/20</span><br></pre></td></tr></table></figure><p>IPv6：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2402:f000::/32</span><br></pre></td></tr></table></figure><p>或者可以打开 <code>实验性：绕过中国大陆 IP</code> 功能，减少国内网络访问开销。</p><p>遇上 OpenClash 的一个 bug。（<strong>Updated 2023.07.02：</strong> 随着 <code>0.45.128</code> 版本的发布，该问题已得到修复）</p><p>在 LuCI 中，虽然已经关闭了 <code>路由本机代理</code>，但是还是会 nftables 中添加处理 Output 链的规则，见 <a href="https://github.com/vernesong/OpenClash/blob/9ee0f02ed7615a62f960c9ee2f951dd1b47e2411/luci-app-openclash/root/etc/init.d/openclash#LL1649C1-L1672C9">https://github.com/vernesong/OpenClash/blob/9ee0f02ed7615a62f960c9ee2f951dd1b47e2411/luci-app-openclash/root/etc/init.d/openclash#LL1649C1-L1672C9</a>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$enable_redirect_dns</span>&quot;</span> != <span class="string">&quot;2&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$router_self_proxy</span>&quot;</span> = <span class="string">&quot;1&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    nft <span class="string">&#x27;add chain inet fw4 openclash_output&#x27;</span> 2&gt;/dev/null</span><br><span class="line">    nft <span class="string">&#x27;flush chain inet fw4 openclash_output&#x27;</span> 2&gt;/dev/null</span><br><span class="line">    ...</span><br><span class="line">    nft add rule inet fw4 openclash_output ip protocol tcp skuid != 65534 counter redirect to <span class="string">&quot;<span class="variable">$proxy_port</span>&quot;</span> 2&gt;/dev/null</span><br><span class="line">    nft <span class="string">&#x27;add chain inet fw4 nat_output &#123; type nat hook output priority -1; &#125;&#x27;</span> 2&gt;/dev/null</span><br><span class="line">    nft <span class="string">&#x27;add rule inet fw4 nat_output ip protocol tcp counter jump openclash_output&#x27;</span> 2&gt;/dev/null</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>这里的判断中 <strong>或</strong> 上了不使用 Dnsmasq 转发，所以在我的工况下会被启用。暂时未明白为何要这样，故提了 Issue：<a href="https://github.com/vernesong/OpenClash/issues/3354">https://github.com/vernesong/OpenClash/issues/3354</a>。</p><p>两天后作者在 <a href="https://github.com/vernesong/OpenClash/commit/d49937415c00c6d3f2519a382cd13be54d531e8b">d499374</a> 中修复了该 bug，发布于 <code>0.45.125</code> 版本中，等待合入 master。</p><h5 id="远程-Wireshark-抓包调试"><a href="#远程-Wireshark-抓包调试" class="headerlink" title="远程 Wireshark 抓包调试"></a>远程 Wireshark 抓包调试</h5><p>有时配挂了需要抓包调试，可以使用远程主机上的 tcpdump + Windows 本机上的 wireshark 远程抓包分析。</p><p>给用户非 root 使用 tcpdump 权限：<code>sudo chmod u+s /usr/sbin/tcpdump</code></p><p>然后 Windows 本机执行 <code>ssh ubuntu &quot;tcpdump -i br-lan -l -w - &#39;port not 22&#39;&quot; | wireshark -k -i -</code> 即可开始抓包。</p><p>参考：<a href="https://thiscute.world/posts/tcpdump-and-wireshark">https://thiscute.world/posts/tcpdump-and-wireshark</a></p><h5 id="配置-UDP-代理"><a href="#配置-UDP-代理" class="headerlink" title="配置 UDP 代理"></a>配置 UDP 代理</h5><p>使用 Redir-Host 兼容模式 + UDP tproxy 转发似乎并不能正常运行，所以还是得使用 TUN 模式。</p><p>LXC 启用 TUN 需要一点额外的配置，参考 <a href="https://forum.proxmox.com/threads/how-to-enable-tun-tap-in-a-lxc-container.25339/">https://forum.proxmox.com/threads/how-to-enable-tun-tap-in-a-lxc-container.25339/</a>，在配置文件中添加如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lxc.cgroup.devices.allow: c 10:200 rwm</span><br><span class="line">lxc.mount.entry: /dev/net dev/net none bind,create=dir</span><br></pre></td></tr></table></figure><p>然后选用 Meta 内核，IPv4 和 IPv6 都启用 TUN 模式，即可代理 UDP 流量了。</p><p>还可以考虑开启 <code>仅允许常用端口流量</code> 来防止不必要的代理。具体地，此处所指的常用端口如下：<code>21 22 23 53 80 123 143 194 443 465 587 853 993 995 998 2052 2053 2082 2083 2086 2095 2096 5222 5228 5229 5230 8080 8443 8880 8888 8889</code>。</p><h4 id="配置校园网认证"><a href="#配置校园网认证" class="headerlink" title="配置校园网认证"></a>配置校园网认证</h4><p>使用 <a href="https://github.com/z4yx/GoAuthing">GoAuthing</a>。</p><p>新版本的 OpenWrt 配置起来似乎有些不一样的地方，参考 <a href="https://github.com/z4yx/GoAuthing/issues/30">https://github.com/z4yx/GoAuthing/issues/30</a> 进行修改。</p><p>将 <code>goauthing@</code> 脚本放到 <code>/etc/init.d/goauthing</code> 目录下，并 <code>chmod +x</code>。</p><figure class="highlight shell"><figcaption><span>/etc/init.d/goauthing</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh /etc/rc.common</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Authenticating utility <span class="keyword">for</span> auth.tsinghua.edu.cn</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This init script is used explicitly with OpenWRT</span></span><br><span class="line"></span><br><span class="line">USE_PROCD=1</span><br><span class="line">START=96</span><br><span class="line">PROG=&quot;/usr/bin/goauthing&quot;</span><br><span class="line">SERV=goauthing  # UCI config at /etc/config/goauthing</span><br><span class="line"></span><br><span class="line">start_instance() &#123;</span><br><span class="line">  local config=$1</span><br><span class="line">  local username password</span><br><span class="line">  config_get username $config username</span><br><span class="line">  config_get password $config password</span><br><span class="line">  local args=&quot;-u $username -p $password&quot;</span><br><span class="line"></span><br><span class="line">  sleep 10 # Wait for link up</span><br><span class="line">  &quot;$PROG&quot; $args deauth</span><br><span class="line">  &quot;$PROG&quot; $args auth</span><br><span class="line">  &quot;$PROG&quot; $args login</span><br><span class="line"></span><br><span class="line">  procd_open_instance</span><br><span class="line">  procd_set_param command &quot;$PROG&quot;</span><br><span class="line">  procd_append_param command $args online</span><br><span class="line">  procd_set_param stderr 1</span><br><span class="line">  procd_set_param respawn</span><br><span class="line">  procd_close_instance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logout() &#123;</span><br><span class="line">  local config=$1</span><br><span class="line">  local username password</span><br><span class="line">  config_get username $config username</span><br><span class="line">  config_get password $config password</span><br><span class="line">  local args=&quot;-u $username -p $password&quot;</span><br><span class="line"></span><br><span class="line">  &quot;$PROG&quot; $args logout</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start_service() &#123;</span><br><span class="line">  config_load &quot;$SERV&quot;</span><br><span class="line">  config_foreach start_instance &quot;$SERV&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop_service() &#123;</span><br><span class="line">  config_load &quot;$SERV&quot;</span><br><span class="line">  config_foreach logout &quot;$SERV&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中更改了启动优先级，添加了 <code>sleep 10</code> 来等待 wan 口配置完成，否则会因为无法完成 auth &#x2F; login 就直接进入 online 守护程序，从而一直无法完成登录认证。</p><p>然后下载 <a href="https://mirrors.tuna.tsinghua.edu.cn/github-release/z4yx/GoAuthing/LatestRelease/auth-thu.linux.x86_64">https://mirrors.tuna.tsinghua.edu.cn/github-release/z4yx/GoAuthing/LatestRelease/auth-thu.linux.x86_64</a>，并移动至脚本中填写的位置（默认为 <code>/usr/bin/goauthing</code>）。</p><p>然后配置并启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> /etc/config/goauthing</span><br><span class="line">uci add goauthing goauthing</span><br><span class="line">uci <span class="built_in">set</span> goauthing.@goauthing[0].username=<span class="string">&#x27;&lt;YOUR-TUNET-ACCOUNT-NAME&gt;&#x27;</span></span><br><span class="line">uci <span class="built_in">set</span> goauthing.@goauthing[0].password=<span class="string">&#x27;&lt;YOUR-TUNET-PASSWORD&gt;&#x27;</span></span><br><span class="line">uci commit</span><br><span class="line"></span><br><span class="line">/etc/init.d/goauthing <span class="built_in">enable</span></span><br><span class="line">/etc/init.d/goauthing start</span><br></pre></td></tr></table></figure><p><strong>20251008 更新：</strong> 上述 <code>goauthing@</code> 脚本会导致进程监测（如 htop）中明文暴露密码，故还是改为使用配置文件方式进行配置，虽然也是明文，但没有那么直接了（）。</p><figure class="highlight shell"><figcaption><span>/etc/init.d/goauthing</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh /etc/rc.common</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Authenticating utility <span class="keyword">for</span> auth.tsinghua.edu.cn</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This init script is used explicitly with OpenWRT</span></span><br><span class="line"></span><br><span class="line">USE_PROCD=1</span><br><span class="line">START=96</span><br><span class="line">PROG=&quot;/usr/bin/goauthing&quot;</span><br><span class="line">CONF=&quot;/etc/goauthing.json&quot;</span><br><span class="line"></span><br><span class="line">generate_command() &#123;</span><br><span class="line">  sleep 15 # Wait for link up</span><br><span class="line">CMD=&quot;\</span><br><span class="line">\&quot;$PROG\&quot; -c \&quot;$CONF\&quot; -D deauth; \</span><br><span class="line">sleep 1; \</span><br><span class="line">\&quot;$PROG\&quot; -c \&quot;$CONF\&quot; -D auth; \</span><br><span class="line">sleep 3; \</span><br><span class="line">\&quot;$PROG\&quot; -c \&quot;$CONF\&quot; online; \</span><br><span class="line">&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start_service() &#123;</span><br><span class="line">  generate_command</span><br><span class="line">  procd_open_instance</span><br><span class="line">  procd_set_param command sh</span><br><span class="line">  procd_append_param command -c &quot;$CMD&quot;</span><br><span class="line">  procd_set_param stderr 1</span><br><span class="line">  procd_set_param respawn</span><br><span class="line">  procd_close_instance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop_service() &#123;</span><br><span class="line">  &quot;$PROG&quot; -c &quot;$CONF&quot; -D deauth</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>/etc/goauthing.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如果后续有服务的启动过程需要已经完成认证，可以添加一个启动项来等待认证完成：</p><figure class="highlight shell"><figcaption><span>/etc/init.d/wait_goauthing</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh /etc/rc.common</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Wait <span class="keyword">for</span> goauthing to finish authentication</span></span><br><span class="line"></span><br><span class="line">START=97</span><br><span class="line"></span><br><span class="line">start() &#123;</span><br><span class="line">  echo &quot;Waiting for goauthing to finish authentication...&quot;</span><br><span class="line">  sleep 5</span><br><span class="line">  echo &quot;Goauthing should be done now.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置链路聚合-AP"><a href="#配置链路聚合-AP" class="headerlink" title="配置链路聚合 AP"></a>配置链路聚合 AP</h4><p>另购置了一台 Wi-Fi 6 无线路由器作为 AP，支持 2x2 MU-MIMO，160 MHz 频宽，理论带宽可达 2402 Mbps。</p><p>然而，路由器上只有四个千兆口，连接软路由后跑不到这么高。</p><p>不过，这款路由器支持两个端口链路聚合，故尝试配置一下。</p><p>首先在路由器上设置两个端口为聚合口，提示：</p><blockquote><p>端口聚合使用IEEE 802.3ad动态聚合模式，请确保对端设备支持并配置为动态聚合模式。</p></blockquote><p>然后在 OpenWrt 上安装需要的软件包：<code>opkg install kmod-bonding proto-bonding luci-proto-bonding</code></p><p>然后将以下内容添加到 <code>/etc/rc.local</code> 的 <code>exit 0</code> 前：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ip <span class="built_in">link</span> add bond-lan <span class="built_in">type</span> bond mode 802.3ad <span class="comment"># 添加 bond 类型的虚拟接口 名称为 bond-lan</span></span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> eth2 down</span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> eth3 down</span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> eth2 <span class="built_in">type</span> bond_slave            <span class="comment"># 配置网卡模式</span></span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> eth3 <span class="built_in">type</span> bond_slave</span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> eth2 master bond-lan            <span class="comment"># 加入名称为 bond-lan 的 bond 类型网卡</span></span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> eth3 master bond-lan</span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> bond-lan up                     <span class="comment"># 启动该网卡</span></span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> eth2 up</span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> eth3 up</span><br><span class="line">brctl addif br-lan bond-lan                 <span class="comment"># 防止有时候无法自动添加到 br-lan 网桥上</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;layer3+4&quot;</span> &gt; /sys/class/net/bond-lan/bonding/xmit_hash_policy</span><br></pre></td></tr></table></figure><p>将 <code>eth2</code> 和 <code>eth3</code> 从原来的 <code>br-lan</code> 中移除，添加上 <code>bond-lan</code> 即可。</p><p>关于 <code>xmit_hash_policy</code>，默认值为 <code>layer2</code>，会导致单台设备无法打到超过千兆的速度，改为 <code>layer3+4</code> 后可以部分改善。</p><p>实测无线可以跑到 1.6 Gbps 左右（后来只能在 UDP 模式下测到 1.4 Gbps 左右了）。</p><h4 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h4><p>官方原版 OpenWrt 默认有一套防火墙策略，简略微调即可。</p><h4 id="配置端口转发"><a href="#配置端口转发" class="headerlink" title="配置端口转发"></a>配置端口转发</h4><p>两种方式，一种是基于 iptables 实现，另一种是使用 socat 来转发。</p><h5 id="基于-iptables-实现"><a href="#基于-iptables-实现" class="headerlink" title="基于 iptables 实现"></a><strong>基于 iptables 实现</strong></h5><p>OpenWrt 默认的端口转发基于 iptables &#x2F; nftables 实现，然而，配置后发现，在内网无法使用外网地址访问对应端口，初步探索后推测是 NAT 环回时出现问题。</p><p>于是在 nftables 中进行调试。</p><p>先新建一个表为符合规则的包启用跟踪调试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nft add table inet trace_debug</span><br><span class="line">nft <span class="string">&#x27;add chain inet trace_debug trace_pre &#123; type filter hook prerouting priority -200000; &#125;&#x27;</span></span><br><span class="line">nft insert rule inet trace_debug trace_pre ip saddr 192.168.22.118 ip daddr ??.??.??.?? <span class="built_in">limit</span> rate 1/second meta nftrace <span class="built_in">set</span> 1</span><br></pre></td></tr></table></figure><p>然后 <code>nft monitor trace</code> 就可以跟踪了。</p><p>跟踪检查后发现，包在 <code>prerouting policy accept</code> 后消失了。</p><p>一番摸索后发现，当对应网卡（<code>br-lan</code>）开启混杂模式后，就能正常工作了。</p><p>怀疑是 prerouting 后发现目标地址为本地链路地址，于是就修改了目的 mac 地址，导致非混杂模式的网卡将其丢弃。不过简单搜索后也没找到相关的资料。</p><h5 id="使用-socat"><a href="#使用-socat" class="headerlink" title="使用 socat"></a><strong>使用 socat</strong></h5><p><strong>Updated 2023.06.29：</strong> 使用 socat 遇到了一些问题，故弃用：</p><ul><li>会修改源地址，丢失地址数据</li><li>UDP 的转发使用 fork 参数存在线程泄漏问题，似乎每个 UDP 包都会 fork 出一个进程且不释放，导致产生大量进程占满内存</li></ul><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install socat</span><br></pre></td></tr></table></figure><p>然后配置端口转发。</p><p>例如，配置名为 <code>mc-tcp</code> 的策略，开启，监听本机所有地址的 25565 端口并转发到 192.168.22.3:25565 的配置如下（<code>fork</code> 允许多个连接，<code>reuseaddr</code> 允许 socket 的快速重用，<code>TCP6-LISTEN</code> 也同时监听 IPv4）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uci <span class="built_in">set</span> socat.mc-tcp=socat</span><br><span class="line">uci <span class="built_in">set</span> socat.mc-tcp.enable=1</span><br><span class="line">uci <span class="built_in">set</span> socat.mc-tcp.SocatOptions=<span class="string">&#x27;TCP6-LISTEN:25565,fork,reuseaddr TCP:192.168.22.3:25565&#x27;</span></span><br><span class="line">uci commit</span><br></pre></td></tr></table></figure><p>UDP 也类似：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uci <span class="built_in">set</span> socat.mc-udp=socat</span><br><span class="line">uci <span class="built_in">set</span> socat.mc-udp.enable=1</span><br><span class="line">uci <span class="built_in">set</span> socat.mc-udp.SocatOptions=<span class="string">&#x27;UDP6-LISTEN:25565,fork,reuseaddr UDP:192.168.22.3:25565&#x27;</span></span><br><span class="line">uci commit</span><br></pre></td></tr></table></figure><p>然后重启 socat 服务即可生效：<code>/etc/init.d/socat restart</code></p><p>对外网开放还需在防火墙中允许对应端口的输入。</p><h4 id="配置-DDNS"><a href="#配置-DDNS" class="headerlink" title="配置 DDNS"></a>配置 DDNS</h4><p>我的 DNS 解析提供商为 CloudFlare，故安装 <code>ddns-scripts-cloudflare</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg install ddns-scripts-cloudflare luci-i18n-ddns-zh-cn</span><br></pre></td></tr></table></figure><p>安装完成后在 LuCI 中配置即可，没太大难度。IPv4 和 IPv6 地址需要分别配置。</p><h4 id="配置-AdGuard-Home"><a href="#配置-AdGuard-Home" class="headerlink" title="配置 AdGuard Home"></a>配置 AdGuard Home</h4><p>安装 AdGuard Home：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install adguardhome</span><br></pre></td></tr></table></figure><p>在 DHCP&#x2F;DNS 的高级设置中，将 DNS 服务器端口改为 53 以外的端口，如 5353。</p><p>然后登入 <a href="http://ip:3000/">http://ip:3000</a> 配置 AdGuard Home，将上游 DNS 服务器设为 OpenClash 设置的 DNS 服务地址，并停用 OpenClash 的 DNS 劫持。</p><p>然后应该就可以开始运作了，再添加屏蔽列表即可。</p><p>如果需要在 OpenClash 没有正常启动成功的情况下仍可以进行 DNS 服务，则需要设置 fallback DNS 服务器地址。然而目前 AdGuard Home 中并没有这个功能，相关功能 <a href="https://github.com/AdguardTeam/AdGuardHome/issues/3701">https://github.com/AdguardTeam/AdGuardHome/issues/3701</a> 被设为了 <code>v0.108.0</code> 的目标，希望有生之年能等到 <code>v0.108.0</code> 出来获得这一功能。</p><p>（也是因为这个原因，校园网的认证脚本需要配置为 OpenClash 启动完成后再进行认证，感觉怪怪的，所以也暂时放弃了 AdGuard Home）</p><h4 id="配置-WireGuard"><a href="#配置-WireGuard" class="headerlink" title="配置 WireGuard"></a>配置 WireGuard</h4><p>安装 <code>WireGuard</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install luci-i18n-wireguard-zh-cn</span><br></pre></td></tr></table></figure><p>重启后，在添加接口中就可以找到 WireGuard VPN 了，我添加了一个名为 <code>wg0</code> 的接口。</p><p>作为公网 IP 下供其它端来主动连接的一端，我特殊指定了这个接口的监听端口，并在防火墙中运行了该端口的 UDP 访问。</p><p>该接口的 IP 地址需要配置为单独的子网，用于各端 VPN 接口间的互相连接。我为其配置了 <code>192.168.23.1/24</code> 和 <code>fd23:41b7:e060::1/64</code> 地址，与 22 网段区别开。</p><p>为了方便配置，我没有将这个接口划入单独的区域，而是划入了 lan 区域，共享 lan 区域的防火墙配置。</p><p>然后就可以添加对端了。注意 <code>允许的 IP</code> 的这一项中填写 “对端的隧道 IP 地址和对端经由隧道的网络”，对于对端为非路由设备的情况，这一项只填隧道 IP 地址就行，比如 <code>192.168.23.102/32</code>（&#x2F;32 可省略），但不能填写 VPN 接口间的网段，即不能填写 <code>192.168.23.102/24</code>。</p><p>各项设置可能需要重启后生效。</p><h4 id="之后的计划"><a href="#之后的计划" class="headerlink" title="之后的计划"></a>之后的计划</h4><ul><li>配置内网 IP 的域名</li><li>配置 MosDNS 优化 DNS 解析（参考：<a href="https://rushb.pro/article/router-dns.html">https://rushb.pro/article/router-dns.html</a>）</li><li>配置 Grafana 可视化路由运行状态、MosDNS 运行数据等</li><li>配置 UDP 转发以及游戏优化</li></ul><h3 id="升级-OpenWrt"><a href="#升级-OpenWrt" class="headerlink" title="升级 OpenWrt"></a>升级 OpenWrt</h3><p>对于软件包的升级，除了可以在 LuCI 中手动逐个升级外，还可以在命令行中先 <code>opkg update</code> 再 <code>opkg list-upgradable | cut -f 1 -d &#39; &#39; | xargs opkg upgrade</code> 来一键升级所有可升级的软件包。</p><p>对于系统升级，可以 <code>opkg install luci-app-attendedsysupgrade</code> 后，在 LuCI 中使用 <code>系统</code> -&gt; <code>值守式系统更新</code> 来升级。小版本升级似乎可以保留软件包和配置（装的已经是小版本最新，没试过），但是大版本升级则相当于重新安装了，需要重新配置。</p><h2 id="基于-LXC-的其它功能服务器"><a href="#基于-LXC-的其它功能服务器" class="headerlink" title="基于 LXC 的其它功能服务器"></a>基于 LXC 的其它功能服务器</h2><p>其它杂七杂八的服务以及 Docker 就另外开在一个虚拟机上吧。</p><p>选用 Debian 12 系统，可以直接从 CT 模板中下载。</p><p>参考 <a href="https://pve.proxmox.com/wiki/Unprivileged_LXC_containers#Using_local_directory_bind_mount_points">https://pve.proxmox.com/wiki/Unprivileged_LXC_containers#Using_local_directory_bind_mount_points</a>，挂载宿主机的共享目录：<code>pct set 100 -mp0 /host/dir,mp=/container/mount/point</code></p><p>似乎直接挂载宿主机中的 &#x2F;mnt 的话，即使配置完 UID &#x2F; GID 映射，LXC 容器也并不能正常访问其中宿主机挂载的子目录，可能需要在宿主机 umount 再 mount。所以需要将 mp 指定的目录细化到类似 <code>/mnt/hdd1</code> 这一层。</p><p>添加一个虚拟网卡 <code>eth0</code> 桥接到 vmbr0 上，IPv4 选择 DHCP 接收 OpenWrt 的地址分发；而如果 IPv6 选择 DHCP 的话，DHCPv6 是不会通告默认路由的，所以建议选择 SLAAC。</p><h3 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h3><p>换源，参考：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/debian/">https://mirrors.tuna.tsinghua.edu.cn/help/debian/</a></p><p>添加 sudo，先 <code>apt install sudo</code>，再 <code>echo &quot;username  ALL=(ALL) ALL&quot; | sudo tee /etc/sudoers.d/username</code></p><p>默认下终端可能会有乱码，需要配置 UTF-8 语言，<code>sudo dpkg-reconfigure locales</code> 然后选中 <code>en_US.UTF-8</code> 即可。</p><h3 id="配置-UID-x2F-GID-映射"><a href="#配置-UID-x2F-GID-映射" class="headerlink" title="配置 UID &#x2F; GID 映射"></a>配置 UID &#x2F; GID 映射</h3><p>如果直接挂载目录共享的话，容器内外会视为不同的用户，导致共享文件时有着麻烦的权限问题。不过我们可以通过 <code>lxc.idmap</code> 来将某一容器中的某些用户映射到 Host 中的某些用户。</p><p>参考：</p><ul><li><a href="https://kcore.org/2022/02/05/lxc-subuid-subgid/">https://kcore.org/2022/02/05/lxc-subuid-subgid/</a></li><li><a href="https://pve.proxmox.com/wiki/Unprivileged_LXC_containers">https://pve.proxmox.com/wiki/Unprivileged_LXC_containers</a></li><li><a href="https://itsembedded.com/sysadmin/proxmox_bind_unprivileged_lxc/">https://itsembedded.com/sysadmin/proxmox_bind_unprivileged_lxc/</a></li></ul><p>以下以映射 102 容器中的 1000 用户为 Host 中的 1000 用户为例：</p><p>先在 <code>/etc/subuid</code> 和 <code>/etc/subgid</code> 中都添加上 <code>root:1000:1</code>，来允许 root 创建到 1000 用户的映射。</p><p>然后在 <code>/etc/pve/lxc/102.conf</code> 的配置文件中，添加如下内容：</p><figure class="highlight plaintext"><figcaption><span>/etc/pve/lxc/102.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lxc.idmap: u 0 100000 1000</span><br><span class="line">lxc.idmap: g 0 100000 1000</span><br><span class="line">lxc.idmap: u 1000 1000 1</span><br><span class="line">lxc.idmap: g 1000 1000 1</span><br><span class="line">lxc.idmap: u 1001 101000 64535</span><br><span class="line">lxc.idmap: g 1001 101000 64535</span><br></pre></td></tr></table></figure><p>建议将原来容器内 1000 映射到的 101000 用户还包含在映射范围内，这样容器内的 root 才能够将文件的所有权从原先的转到现在的。</p><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><p>由于并不想在 PVE 中直接装 Docker，故在 Debian 虚拟机中安装 Docker。</p><p>参考：</p><ul><li><a href="https://docs.docker.com/engine/install/debian/#install-using-the-convenience-script">https://docs.docker.com/engine/install/debian/#install-using-the-convenience-script</a></li><li><a href="https://yeasy.gitbook.io/docker_practice/install/debian">https://yeasy.gitbook.io/docker_practice/install/debian</a></li></ul><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br></pre></td></tr></table></figure><p>加入 Docker 用户组，在无 root 权限下使用 Docker：<code>sudo usermod -aG docker $USER</code></p><p>验证安装正确性：<code>docker run --rm hello-world</code></p><p>如没有方便的网络接入，配置镜像参考：<a href="https://yeasy.gitbook.io/docker_practice/install/mirror">https://yeasy.gitbook.io/docker_practice/install/mirror</a></p><p>在 LXC 容器启动后，Docker 会过一两分钟才会启动，暂时不知道原因为何。</p><h3 id="Docker-启用-IPv6-支持"><a href="#Docker-启用-IPv6-支持" class="headerlink" title="Docker 启用 IPv6 支持"></a>Docker 启用 IPv6 支持</h3><p>由于挂的 PT 需要有 IPv6 接入，故需要给 Docker 开启 IPv6。</p><p>参考：<a href="https://docs.docker.com/config/daemon/ipv6/">https://docs.docker.com/config/daemon/ipv6/</a></p><p>编辑配置文件：</p><figure class="highlight json"><figcaption><span>/etc/docker/daemon.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;experimental&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ip6tables&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后重启 Docker：<code>sudo systemctl restart docker</code></p><p>启动容器时，需要额外的配置。如果使用 Docker Compose，则添加如下内容，并在对应 service 配置中添加 networks 即可：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">ip6net:</span></span><br><span class="line">    <span class="attr">enable_ipv6:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">subnet:</span> <span class="number">2001</span><span class="string">:0DB8::/112</span></span><br></pre></td></tr></table></figure><p><code>netstat -tunlp</code> 可以查看监听端口，若对应的端口只有 tcp6 在监听也不用慌张，若 <code>cat /proc/sys/net/ipv6/bindv6only</code> 为 0 则表明已在双栈上监听，参考（<a href="https://unix.stackexchange.com/questions/496137/does-80-in-netstat-output-means-only-ipv6-or-ipv6ipv4">https://unix.stackexchange.com/questions/496137/does-80-in-netstat-output-means-only-ipv6-or-ipv6ipv4</a>）</p><h3 id="配置-PT-客户端"><a href="#配置-PT-客户端" class="headerlink" title="配置 PT 客户端"></a>配置 PT 客户端</h3><p>使用 <a href="https://hub.docker.com/r/linuxserver/transmission">linuxserver&#x2F;transmission</a> Docker 镜像。</p><p>使用 Docker Compose 来配置容器，按说明编写配置文件：</p><figure class="highlight yml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;2.1&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">transmission:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">lscr.io/linuxserver/transmission:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">transmission</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TRANSMISSION_WEB_HOME=/config/transmission-web-control/src</span> <span class="comment">#optional</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">USER=thx</span> <span class="comment">#optional</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FILE__PASS=/config/password</span> <span class="comment">#optional</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WHITELIST=</span> <span class="comment">#optional</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PEERPORT=</span> <span class="comment">#optional</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HOST_WHITELIST=</span> <span class="comment">#optional</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/thx/Service/transmission/config:/config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/PT:/downloads</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/PT/torrentwatch:/watch</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mnt:/mnt</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9091</span><span class="string">:9091</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">51413</span><span class="string">:51413</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">51413</span><span class="string">:51413/udp</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ip6net</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">ip6net:</span></span><br><span class="line">    <span class="attr">enable_ipv6:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ipam:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="number">2001</span><span class="string">:0DB8:1::/112</span></span><br></pre></td></tr></table></figure><p>其中 UID &#x2F; GID 可以参考 <code>id $user</code> 的结果设置。</p><p>生成密钥文件时不能有行末符，可以这样生成：<code>echo -n password_in_clear_text &gt; password</code></p><p>Web UI 使用 <a href="https://github.com/ronggang/transmission-web-control">transmission-web-control</a>，在 <code>/config</code> 对应的目录下 git clone 即可。</p><p>迁移之前的种子和配置只需要将之前的 <code>config</code> 目录移过来即可，如果之前是裸机安装，目录可能在 <code>/var/lib/transmission-daemon/info</code></p><p>还要记得在路由器上配置 51413 端口的 TCP &amp; UDP 转发。</p><p>配完端口转发，查看防火墙规则链可知，无需再在通信规则中开放端口。</p><h4 id="运行方法"><a href="#运行方法" class="headerlink" title="运行方法"></a>运行方法</h4><p>创建 container 并启动后台运行：<code>docker compose up -d</code></p><p>停止并删除 container 和对应的网络：<code>docker compose down</code></p><p>启动 &#x2F; 停止 对应的 container：<code>docker compose start</code> &#x2F; <code>docker compose stop</code></p><p>更新：先 <code>docker-compose pull</code>，然后 <code>docker compose down</code> 和 <code>docker compose up -d</code></p><p>清理无用镜像：<code>docker image prune</code></p><h3 id="配置-Syncthing-同步服务"><a href="#配置-Syncthing-同步服务" class="headerlink" title="配置 Syncthing 同步服务"></a>配置 Syncthing 同步服务</h3><p>使用 <a href="https://hub.docker.com/r/linuxserver/syncthing">linuxserver&#x2F;syncthing</a> Docker 镜像。</p><p>使用 Docker Compose 来配置容器，按说明编写配置文件。</p><p>由于 Syncthing 需要发送本地组播包来进行本地链路上的节点发现，故这里将网络模式修改为 host 模式，参考：<a href="https://github.com/syncthing/syncthing/blob/main/README-Docker.md#discovery">https://github.com/syncthing/syncthing/blob/main/README-Docker.md#discovery</a>。</p><figure class="highlight yml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;2.1&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">syncthing:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">lscr.io/linuxserver/syncthing:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">syncthing</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">RaspCloud</span> <span class="comment">#optional</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/thx/Service/syncthing/config:/config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mnt:/mnt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data:/data</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></table></figure><p>还要记得在路由器上配置 22000 端口的 TCP &amp; UDP 转发。</p><p>运行方法同上。</p><h3 id="配置蓝牙监听服务"><a href="#配置蓝牙监听服务" class="headerlink" title="配置蓝牙监听服务"></a>配置蓝牙监听服务</h3><p>之前 <a href="/2022/09/07/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E5%92%8C%E5%B0%8F%E7%B1%B3%E8%93%9D%E7%89%99%E6%B8%A9%E6%B9%BF%E5%BA%A6%E8%AE%A1%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AE%BF%E8%88%8D%E6%B8%A9%E6%B9%BF%E5%BA%A6%E5%8F%98%E5%8C%96">使用树莓派和小米蓝牙温湿度计可视化宿舍温湿度变化</a> 中配置了蓝牙接收温湿度计数据，也把这个服务迁移过来。</p><p>花费十元购入了 BR8651 芯片的 USB 蓝牙 5.1 适配器，据说该芯片在 Linux 下有驱动。</p><p>可能是因为芯片较新的原因，各方面的支持似乎都还不太好，尝试了几个方法都没能正常地使用脚本获取 BLE Advertising，这里记录了几次失败的过程。</p><h4 id="配置-LXC-的-USB-直通"><a href="#配置-LXC-的-USB-直通" class="headerlink" title="配置 LXC 的 USB 直通"></a>配置 LXC 的 USB 直通</h4><p>本来想在 LXC 容器中配置蓝牙服务，但是 <code>hciconfig</code> 会报错 <code>Can&#39;t open HCI socket.: Address family not supported by protocol</code>，查阅资料后发现，由于蓝牙将自身注册为网络接口，所以并不能像使用 USB 那样将蓝牙设备传给 LXC 容器，参考：<a href="https://forum.proxmox.com/threads/assign-a-bluetooth-dongle-to-a-ct.67577/">https://forum.proxmox.com/threads/assign-a-bluetooth-dongle-to-a-ct.67577/</a>。</p><p>所以以下部分只是记录如何直通 USB 设备。</p><p>参考：<a href="https://medium.com/@konpat/usb-passthrough-to-an-lxc-proxmox-15482674f11d">https://medium.com/@konpat/usb-passthrough-to-an-lxc-proxmox-15482674f11d</a></p><p>直接在 LXC 中 <code>lsusb</code> 是可以看到各个 USB 设备的，但是无法使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Bus 004 Device 002: ID 174c:3074 ASMedia Technology Inc. ASM1074 SuperSpeed hub</span><br><span class="line">Bus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 003 Device 003: ID 05e3:0751 Genesys Logic, Inc. microSD Card Reader</span><br><span class="line">Bus 003 Device 004: ID 0a12:0001 Cambridge Silicon Radio, Ltd Bluetooth Dongle (HCI mode)</span><br><span class="line">Bus 003 Device 002: ID 174c:2074 ASMedia Technology Inc. ASM1074 High-Speed hub</span><br><span class="line">Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br><span class="line">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br></pre></td></tr></table></figure><p>关注其中的 Bluetooth 设备，位于 <code>Bus 003 Device 004</code>。</p><p>查看其主次设备号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@pve:/etc/pve/lxc# ls -al /dev/bus/usb/003/004</span><br><span class="line">crw-rw-r-- 1 root root 189, 259 Jul  1 00:28 /dev/bus/usb/003/004</span><br></pre></td></tr></table></figure><p>主设备号为 189，向配置文件中添加以下内容，将设备映射到容器内：</p><figure class="highlight plaintext"><figcaption><span>/etc/pve/lxc/102.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lxc.cgroup.devices.allow: c 189:* rwm</span><br><span class="line">lxc.mount.entry: /dev/bus/usb/003/004 dev/bus/usb/003/004 none bind,optional,create=file</span><br></pre></td></tr></table></figure><p>或者直接将目录映射过去也行，防止设备名发生变化：</p><figure class="highlight plaintext"><figcaption><span>/etc/pve/lxc/102.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lxc.mount.entry: /dev/bus/usb/003 dev/bus/usb/003 none bind,optional,create=dir</span><br></pre></td></tr></table></figure><p>如果容器中 <code>ls -al /dev/bus/usb/003/004</code> 权限不对（<code>nobody</code> &#x2F; <code>nogroup</code>），可以在 PVE 中 <code>chown 100000:100000 /dev/bus/usb/003/004</code>，这样容器中就为 <code>root</code> 权限了。</p><h4 id="在宿主机中直接配置蓝牙"><a href="#在宿主机中直接配置蓝牙" class="headerlink" title="在宿主机中直接配置蓝牙"></a>在宿主机中直接配置蓝牙</h4><p>由于不想再单独开一台虚拟机，故打算在宿主机中直接运行蓝牙监听服务。</p><p>正好宿主机中也有一个非 root 用户，使用这个用户来运行服务，尽量减小对系统的影响。</p><p>先验证蓝牙功能是否正常，在 <code>bluetoothctl</code> 中运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">menu scan</span><br><span class="line">transport le</span><br><span class="line">back</span><br><span class="line">scan on</span><br></pre></td></tr></table></figure><p>应该能够看到一些广播和数据。</p><p>（我这儿 <code>hcitool lescan</code> 会报错 <code>Set scan parameters failed: Input/output error</code>，参考 <a href="https://stackoverflow.com/questions/70777475/hcitool-lescan-returns-an-i-o-error-on-manjaro">https://stackoverflow.com/questions/70777475/hcitool-lescan-returns-an-i-o-error-on-manjaro</a> 发现如上使用 <code>bluetoothctl</code> 就能正常工作）</p><h5 id="非特权安装-pip3"><a href="#非特权安装-pip3" class="headerlink" title="非特权安装 pip3"></a>非特权安装 pip3</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">python3 get-pip.py --user</span><br></pre></td></tr></table></figure><p>如果报错 <code>ModuleNotFoundError: No module named &#39;distutils.cmd&#39;</code>，则需要安装 <code>python3-distutils</code></p><h5 id="安装运行-MiTemperature2"><a href="#安装运行-MiTemperature2" class="headerlink" title="安装运行 MiTemperature2"></a>安装运行 MiTemperature2</h5><p>按照 <a href="https://github.com/JsBergbau/MiTemperature2">MiTemperature2</a> 文档进行安装。</p><p>安装 <code>bluepy</code> 前需要先安装 <code>libglib2.0-dev</code></p><p>安装 <code>pybluez</code> 时可能遇到 <code>error in PyBluez setup command: use_2to3 is invalid.</code> 的问题，参考 <a href="https://github.com/pybluez/pybluez/issues/467">https://github.com/pybluez/pybluez/issues/467</a>，先 <code>pip3 install setuptools==58</code> 再安装即可。</p><p>之后遇到类似 <a href="https://github.com/JsBergbau/MiTemperature2/issues/106">https://github.com/JsBergbau/MiTemperature2/issues/106</a> 的问题，以及类似 <a href="https://stackoverflow.com/questions/75175755/not-seeing-ble-device-advertising-unless-set-bluetoothctl-transport-le">https://stackoverflow.com/questions/75175755/not-seeing-ble-device-advertising-unless-set-bluetoothctl-transport-le</a> 的问题，都暂时没有被解决。</p><p>于是也放弃了。</p><h3 id="配置-MC-服务器"><a href="#配置-MC-服务器" class="headerlink" title="配置 MC 服务器"></a>配置 MC 服务器</h3><h4 id="安装-Java-8"><a href="#安装-Java-8" class="headerlink" title="安装 Java 8"></a>安装 Java 8</h4><p>由于该整合包版本需要 Java 8，而 Debian 官方源中没有，故使用第三方源安装。</p><p>准备工作：<code>sudo apt install apt-transport-https ca-certificates wget dirmngr gnupg software-properties-common</code></p><p>添加第三方源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -qO - https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public | sudo <span class="built_in">tee</span> /etc/apt/trusted.gpg.d/adoptopenjdk.asc</span><br><span class="line">sudo add-apt-repository --<span class="built_in">yes</span> https://adoptopenjdk.jfrog.io/adoptopenjdk/deb/</span><br></pre></td></tr></table></figure><p>由于 adoptopenjdk 可能还没加上 bookworm 源，可能需要手动将源中的 <code>bookworm</code> 改为 <code>bullseye</code>。</p><p>安装 Java 8 JRE：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install adoptopenjdk-8-hotspot-jre</span><br></pre></td></tr></table></figure><h4 id="添加为服务"><a href="#添加为服务" class="headerlink" title="添加为服务"></a>添加为服务</h4><p>添加为 systemd 服务，参考 <a href="https://gist.github.com/winny-/bb17853ffc76fbb9b039">https://gist.github.com/winny-/bb17853ffc76fbb9b039</a> 进行修改。</p><figure class="highlight ini"><figcaption><span>/etc/systemd/system/minecraft.service</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Minecraft Server</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">WorkingDirectory</span>=/data/MC/RAD2-<span class="number">1.3</span>/RAD2-Serverpack-<span class="number">1.3</span></span><br><span class="line"><span class="attr">User</span>=thx</span><br><span class="line"><span class="attr">Type</span>=forking</span><br><span class="line"><span class="attr">ExitType</span>=cgroup</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/tmux new-session -s mc -d <span class="string">&#x27;./LaunchServer.sh&#x27;</span></span><br><span class="line"><span class="attr">ExecStop</span>=/usr/bin/tmux send-keys -t mc:<span class="number">0.0</span> <span class="string">&#x27;say SERVER SHUTTING DOWN. Saving map...&#x27;</span> C-m <span class="string">&#x27;save-all&#x27;</span> C-m <span class="string">&#x27;stop&#x27;</span> C-m</span><br><span class="line"><span class="attr">ExecStop</span>=/bin/sleep <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>使用 <code>Type=forking</code> 来管理 <code>tmux new-session</code> fork 出的进程。</p><p>使用 <code>ExitType=cgroup</code> 等待所有程序退出。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;树莓派挂在宿舍当软路由已经两年了，大部分情况下都挺好用，透明代理体验也还算尚可。&lt;/p&gt;
&lt;p&gt;然而由于使用的 USB 无线网卡驱动支持较差，无线峰值速率只能跑到 200+ Mbps，且不大稳定。并且树莓派性能不高，无法开设一些高负载服务。另外，树莓派作为路由常年开启，需要考虑散热问题，虽然给使用的小风扇写了启停功能，但是启动运转时还是会有一定的噪音，较为恼人。&lt;/p&gt;</summary>
    
    
    
    <category term="折腾" scheme="https://blog.centaurus99.com/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="软路由" scheme="https://blog.centaurus99.com/tags/%E8%BD%AF%E8%B7%AF%E7%94%B1/"/>
    
    <category term="PVE" scheme="https://blog.centaurus99.com/tags/PVE/"/>
    
  </entry>
  
  <entry>
    <title>使用树莓派和小米蓝牙温湿度计可视化宿舍温湿度变化</title>
    <link href="https://blog.centaurus99.com/2022/09/07/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E5%92%8C%E5%B0%8F%E7%B1%B3%E8%93%9D%E7%89%99%E6%B8%A9%E6%B9%BF%E5%BA%A6%E8%AE%A1%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AE%BF%E8%88%8D%E6%B8%A9%E6%B9%BF%E5%BA%A6%E5%8F%98%E5%8C%96/"/>
    <id>https://blog.centaurus99.com/2022/09/07/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E5%92%8C%E5%B0%8F%E7%B1%B3%E8%93%9D%E7%89%99%E6%B8%A9%E6%B9%BF%E5%BA%A6%E8%AE%A1%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AE%BF%E8%88%8D%E6%B8%A9%E6%B9%BF%E5%BA%A6%E5%8F%98%E5%8C%96/</id>
    <published>2022-09-06T16:50:20.000Z</published>
    <updated>2022-09-06T16:50:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近入手了一个小米蓝牙温湿度计（最便宜的 LCD 屏那款，<a href="https://pvvx.github.io/ATC_MiThermometer/">https://pvvx.github.io/ATC_MiThermometer/</a>），可以连米家查看温湿度，但是没有历史记录功能。于是想着能不能连树莓派记录温湿度，Google 上一搜还真有，赶紧整一套玩玩。</p><p>最终将小米蓝牙温湿度计刷入定制固件发送温湿度数据广播，树莓派接收广播存入 InfluxDB 数据库，然后使用 Grafana 可视化。</p><span id="more"></span><h2 id="刷入定制固件"><a href="#刷入定制固件" class="headerlink" title="刷入定制固件"></a>刷入定制固件</h2><p>参考：</p><ul><li><a href="https://www.strivefysfxyh.com/%e5%b0%8f%e7%b1%b3%e6%b8%a9%e6%b9%bf%e5%ba%a6%e4%bc%a0%e6%84%9f%e5%99%a8%e5%88%b7%e5%85%a5%e5%ae%9a%e5%88%b6%e5%9b%ba%e4%bb%b6%ef%bc%8c%e5%bc%80%e5%90%af%e8%87%aa%e5%ae%9a%e4%b9%89%e5%8a%9f%e8%83%bd/">小米温湿度传感器刷入定制固件，开启自定义功能</a></li><li><a href="https://roov.org/2021/04/mi-thermometer-firmware/">https://roov.org/2021/04/mi-thermometer-firmware/</a></li></ul><p>使用 <a href="https://github.com/pvvx/ATC_MiThermometer">https://github.com/pvvx/ATC_MiThermometer</a> 中的定制固件，老外非常 NB，还写了一套网页直接在线刷固件：<a href="https://pvvx.github.io/ATC_MiThermometer/TelinkMiFlasher.html">https://pvvx.github.io/ATC_MiThermometer/TelinkMiFlasher.html</a>，在仓库中查看使用说明即可。</p><p>刷入定制固件后开启小米蓝牙温湿度计的蓝牙广播功能，这样树莓派不用连接就能接收温湿度广播数据了。由于周围环境较为可信且刻意调低了发射增益，我没有设置 PIN 码和加密，防止哪天忘了连不上。<span class="heimu">就是懒了</span></p><h2 id="树莓派接收蓝牙广播"><a href="#树莓派接收蓝牙广播" class="headerlink" title="树莓派接收蓝牙广播"></a>树莓派接收蓝牙广播</h2><p>参考：<a href="https://www.strivefysfxyh.com/%e4%bd%bf%e7%94%a8%e6%a0%91%e8%8e%93%e6%b4%be%e5%ae%9a%e6%97%b6%e8%af%bb%e5%8f%96%e5%b0%8f%e7%b1%b3%e6%b8%a9%e6%b9%bf%e5%ba%a6%e4%bc%a0%e6%84%9f%e5%99%a8%e6%95%b0%e6%8d%ae%e5%b9%b6%e5%8f%91%e9%80%81/">使用树莓派定时读取小米温湿度传感器数据并发送到微信</a></p><p>也已经有老外编写了完善的接收程序，直接查看仓库中说明使用即可：<a href="https://github.com/JsBergbau/MiTemperature2">https://github.com/JsBergbau/MiTemperature2</a></p><h2 id="存入-InfluxDB-数据库"><a href="#存入-InfluxDB-数据库" class="headerlink" title="存入 InfluxDB 数据库"></a>存入 InfluxDB 数据库</h2><h3 id="安装并配置-InfluxDB-数据库"><a href="#安装并配置-InfluxDB-数据库" class="headerlink" title="安装并配置 InfluxDB 数据库"></a>安装并配置 InfluxDB 数据库</h3><p>参考：<a href="https://blog.csdn.net/qq_41475058/article/details/108050440">https://blog.csdn.net/qq_41475058/article/details/108050440</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install influxdb influxdb-client</span><br></pre></td></tr></table></figure><p>然后数据库服务器会在 8086 端口上开始监听。似乎需要添加 admin 用户才能开启权限认证，我只需要它能跑起来就行就没管。<span class="heimu">懒了</span></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">influx  <span class="comment"># 默认连接到localhost:8086</span></span><br><span class="line">show <span class="built_in">users</span> <span class="comment"># 查看所有用户，默认没有</span></span><br><span class="line">CREATE USER <span class="string">&quot;pi&quot;</span> WITH PASSWORD <span class="string">&#x27;******&#x27;</span> WITH ALL PRIVILEGES <span class="comment"># 创建 pi 用户用于管理数据</span></span><br><span class="line">create database mi <span class="comment"># 创建 mi 数据库用于存放数据</span></span><br></pre></td></tr></table></figure><h3 id="将广播数据存入"><a href="#将广播数据存入" class="headerlink" title="将广播数据存入"></a>将广播数据存入</h3><p>编辑接收程序中的 <code>sendToInflux.sh</code> 如下：</p><figure class="highlight bash"><figcaption><span>sendToInflux.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -u <span class="string">&quot;pi:PASSWORD&quot;</span> -XPOST http://127.0.0.1:8086/write?db=mi\&amp;precision=s --data-binary <span class="string">&quot;AquaraBluetoothSensors,sensorname=<span class="variable">$2</span> temperature=<span class="variable">$3</span>,calibratedHumidity=<span class="variable">$4</span>,voltage=<span class="variable">$5</span>,batteryLevel=<span class="variable">$6</span> <span class="variable">$7</span>&quot;</span></span><br></pre></td></tr></table></figure><p>然后 <code>python3 LYWSD03MMC.py --atc --battery --callback sendToInflux.sh</code> 即可开始接受广播数据并存入数据库。</p><p>此时在数据库中可以看到数据了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mi <span class="comment"># 进入 mi 数据库</span></span><br><span class="line">show measurements <span class="comment"># 查看表，此时应有表 AquaraBluetoothSensors</span></span><br><span class="line">select * from AquaraBluetoothSensors <span class="comment"># 查看表中所有数据</span></span><br></pre></td></tr></table></figure><p>还可以写个 service 来跑，比如编辑 <code>/etc/systemd/system/MiTemperature.service</code> ：</p><figure class="highlight ini"><figcaption><span>/etc/systemd/system/MiTemperature.service</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=MiTemperature advertisements receiver</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">User</span>=pi</span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">5</span></span><br><span class="line"><span class="attr">WorkingDirectory</span>=/home/pi/Git/MiTemperature2</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/python3 LYWSD03MMC.py --atc --battery --callback sendToInflux.sh</span><br><span class="line"><span class="attr">StandardOutput</span>=file:/home/pi/Git/MiTemperature2/output.log</span><br><span class="line"><span class="attr">StandardError</span>=file:/home/pi/Git/MiTemperature2/error.log</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>开启服务并开机自启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start MiTemperature.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> MiTemperature.service</span><br></pre></td></tr></table></figure><h2 id="Grafana-可视化"><a href="#Grafana-可视化" class="headerlink" title="Grafana 可视化"></a>Grafana 可视化</h2><p>参考官方说明，使用 apt 安装：<a href="https://grafana.com/docs/grafana/v9.0/setup-grafana/installation/debian/#install-from-apt-repository">https://grafana.com/docs/grafana/v9.0/setup-grafana/installation/debian/#install-from-apt-repository</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install apt-transport-https</span><br><span class="line">sudo apt install wget <span class="comment"># 说明中的 software-properties-common 我没装上，好像不影响</span></span><br><span class="line">wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb https://packages.grafana.com/enterprise/deb stable main&quot;</span> | sudo <span class="built_in">tee</span> -a /etc/apt/sources.list.d/grafana.list</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt-get install grafana-enterprise</span><br></pre></td></tr></table></figure><p>然后编辑 <code>/etc/grafana/grafana.ini</code> 更换服务端口，启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start grafana-server.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> grafana-server.service</span><br></pre></td></tr></table></figure><p>最后浏览器访问对应端口上的网页，默认用户名和密码是 admin，然后进行配置即可。Grafana 的功能蛮复杂的，有空可能单独开一篇来记录~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近入手了一个小米蓝牙温湿度计（最便宜的 LCD 屏那款，&lt;a href=&quot;https://pvvx.github.io/ATC_MiThermometer/&quot;&gt;https://pvvx.github.io/ATC_MiThermometer/&lt;/a&gt;），可以连米家查看温湿度，但是没有历史记录功能。于是想着能不能连树莓派记录温湿度，Google 上一搜还真有，赶紧整一套玩玩。&lt;/p&gt;
&lt;p&gt;最终将小米蓝牙温湿度计刷入定制固件发送温湿度数据广播，树莓派接收广播存入 InfluxDB 数据库，然后使用 Grafana 可视化。&lt;/p&gt;</summary>
    
    
    
    <category term="折腾" scheme="https://blog.centaurus99.com/categories/%E6%8A%98%E8%85%BE/"/>
    
    <category term="树莓派" scheme="https://blog.centaurus99.com/categories/%E6%8A%98%E8%85%BE/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
    <category term="树莓派" scheme="https://blog.centaurus99.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    <category term="IoT" scheme="https://blog.centaurus99.com/tags/IoT/"/>
    
    <category term="Grafana" scheme="https://blog.centaurus99.com/tags/Grafana/"/>
    
  </entry>
  
  <entry>
    <title>使用 Clash + AdGuard Home 在树莓派软路由上搭建广告屏蔽与透明代理服务器</title>
    <link href="https://blog.centaurus99.com/2022/09/02/%E4%BD%BF%E7%94%A8-Clash-AdGuard-Home-%E5%9C%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%B9%BF%E5%91%8A%E5%B1%8F%E8%94%BD%E4%B8%8E%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://blog.centaurus99.com/2022/09/02/%E4%BD%BF%E7%94%A8-Clash-AdGuard-Home-%E5%9C%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%B9%BF%E5%91%8A%E5%B1%8F%E8%94%BD%E4%B8%8E%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2022-09-02T07:24:44.000Z</published>
    <updated>2023-05-08T07:04:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前 <a href="/2021/07/11/%E3%80%90%E8%A1%A5%E6%A1%A3%E3%80%91%E6%A0%91%E8%8E%93%E6%B4%BE%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/#%E4%BD%BF%E7%94%A8-USB-%E7%BD%91%E5%8D%A1">【补档】树莓派折腾记录</a> 中也记录过了相关内容，但是一年过来有些地方有些变动与改进，故单开一篇重新记录并长期更新。</p><span id="more"></span><h2 id="配置-Clash-进行透明代理"><a href="#配置-Clash-进行透明代理" class="headerlink" title="配置 Clash 进行透明代理"></a>配置 Clash 进行透明代理</h2><p>TODO</p><h2 id="配置-AdGuard-Home-进行广告屏蔽"><a href="#配置-AdGuard-Home-进行广告屏蔽" class="headerlink" title="配置 AdGuard Home 进行广告屏蔽"></a>配置 AdGuard Home 进行广告屏蔽</h2><p>TODO</p><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>作为一个挂在公网下 7×24h 运行的网关服务器，进行一定的防火墙配置是必不可少的。这里主要通过 iptables 和 ip6tables 实现。</p><p>由于使用了 iptables-persistent 进行 iptables 规则可持久化，方便起见下面就直接把保存的规则文件贴上来了。</p><h3 id="IPv4"><a href="#IPv4" class="headerlink" title="IPv4"></a>IPv4</h3><figure class="highlight bash"><figcaption><span>/etc/iptables/rules.v4</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">*filter</span><br><span class="line"><span class="comment"># INPUT 和 FORWARD 链上默认 DROP 掉</span></span><br><span class="line">:INPUT DROP [0:0]</span><br><span class="line">:FORWARD DROP [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 防止外网使用内网 IP 欺骗</span></span><br><span class="line">-A INPUT -i eth0 -s 192.168.0.0/16 -j DROP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许本机、内网以及已建立的连接通过和转发</span></span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT -i docker0 -j ACCEPT</span><br><span class="line">-A INPUT -i wlx1cbfceb110dc -j ACCEPT</span><br><span class="line">-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">-A FORWARD -i lo -j ACCEPT</span><br><span class="line">-A FORWARD -i docker0 -j ACCEPT</span><br><span class="line">-A FORWARD -i wlx1cbfceb110dc -j ACCEPT</span><br><span class="line">-A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开放外网 SSH, HTTP, HTTPS 连接</span></span><br><span class="line">-A INPUT -p tcp -m multiport --dport 22,80,443 -j ACCEPT</span><br><span class="line"></span><br><span class="line">COMMIT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*nat</span><br><span class="line">:PREROUTING ACCEPT [0:0]</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:POSTROUTING ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line"><span class="comment"># 新建 clash 链</span></span><br><span class="line">:clash - [0:0]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内网 TCP 请求转发给 clash 链</span></span><br><span class="line">-A PREROUTING -s 192.168.0.0/16 -p tcp -j clash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将转发后的包源地址修改为本机地址</span></span><br><span class="line">-A POSTROUTING -s 192.168.0.0/16 -o eth0 -j MASQUERADE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问本机和内网不经过 clash</span></span><br><span class="line">-A clash -d 10.0.0.0/8 -j RETURN</span><br><span class="line">-A clash -d 127.0.0.0/8 -j RETURN</span><br><span class="line">-A clash -d 169.254.0.0/16 -j RETURN</span><br><span class="line">-A clash -d 172.16.0.0/12 -j RETURN</span><br><span class="line">-A clash -d 192.168.0.0/16 -j RETURN</span><br><span class="line">-A clash -d 224.0.0.0/4 -j RETURN</span><br><span class="line">-A clash -d 240.0.0.0/4 -j RETURN</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问校园网不经过 clash</span></span><br><span class="line">-A clash -d 59.66.0.0/16 -j RETURN</span><br><span class="line">-A clash -d 101.5.0.0/16 -j RETURN</span><br><span class="line">-A clash -d 101.6.0.0/16 -j RETURN</span><br><span class="line">-A clash -d 118.229.0.0/19 -j RETURN</span><br><span class="line">-A clash -d 166.111.0.0/16 -j RETURN</span><br><span class="line">-A clash -d 183.172.0.0/15 -j RETURN</span><br><span class="line">-A clash -d 202.112.39.2/32 -j RETURN</span><br><span class="line">-A clash -d 219.223.168.0/21 -j RETURN</span><br><span class="line">-A clash -d 219.223.176.0/20 -j RETURN</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其余请求重定向至 clash 端口</span></span><br><span class="line">-A clash -p tcp -j REDIRECT --to-ports 7891</span><br><span class="line"></span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure><h3 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h3><p>参考：<a href="https://www.sixxs.net/wiki/IPv6_Firewalling">https://www.sixxs.net/wiki/IPv6_Firewalling</a></p><p>关于为何 DHCPv6 相比 DHCPv4 要额外设置，参考：<a href="https://unix.stackexchange.com/questions/452880/what-are-the-essential-iptables-rules-for-ipv6-to-work-properly">https://unix.stackexchange.com/questions/452880/what-are-the-essential-iptables-rules-for-ipv6-to-work-properly</a></p><p><a href="https://www.rfc-editor.org/rfc/rfc4890">RFC 4890</a> 给出了针对 ICMPv6 的防火墙配置建议，由于时间有限未能细读与实现。</p><p><a href="https://www.rfc-editor.org/rfc/rfc5095">RFC 5095</a> 废除了 Type 0 Routing Headers，防火墙中给予了实现。</p><p><strong>Updated 2023-05-08：</strong> 在之前配置完 IPv6 NAT 网络后，并没有为 IPv6 配置代理。随着 IPv6 的不断推广，部分被墙网站出现了使用本地代理可以访问，透明代理无法访问的情况，包括但不限于 v2ex.com，Youtube 的视频播放等，于是也为 IPv6 配置了代理。原本使用的 Clash Premium 2022.08.26 版本的 IPv6 代理似乎有 bug，需要进行升级。由于想继续使用 AdGuardHome 统计 DNS 查询信息，故需要依赖 Clash 的 redir-host 功能（该功能在 Premium 2023.02.16 版本被弃用），因此选用 Clash Premium 2023.01.29 版本。巧合的是，Premium 2023.01.29 版本将核心版本升级到了 1.13.0，该版本添加了对 IPv6 REDIRECT 的支持（<a href="https://github.com/Dreamacro/clash/pull/2473">#2473</a>），这让 IPv6 的代理成为了可能。相关改动已同步到下方规则文件中。</p><figure class="highlight bash"><figcaption><span>/etc/iptables/rules.v6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">*filter</span><br><span class="line">:INPUT DROP [0:0]</span><br><span class="line">:FORWARD DROP [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Filter all packets that have RH0 headers. Refer to RFC 5095</span></span><br><span class="line">-A INPUT -m rt --rt-type 0 -j DROP</span><br><span class="line">-A FORWARD -m rt --rt-type 0 -j DROP</span><br><span class="line">-A OUTPUT -m rt --rt-type 0 -j DROP</span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow trusted link to INPUT and FORWARD</span></span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT -i docker0 -j ACCEPT</span><br><span class="line">-A INPUT -i wlx1cbfceb110dc -j ACCEPT</span><br><span class="line">-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">-A FORWARD -i lo -j ACCEPT</span><br><span class="line">-A FORWARD -i docker0 -j ACCEPT</span><br><span class="line">-A FORWARD -i wlx1cbfceb110dc -j ACCEPT</span><br><span class="line">-A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow DHCPv6</span></span><br><span class="line">-A INPUT -p udp --dport 546 -d fe80::/10 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow ICMPv6</span></span><br><span class="line">-A INPUT -p icmpv6 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow some server port</span></span><br><span class="line">-A INPUT -p tcp -m multiport --dport 22,80,443 -j ACCEPT</span><br><span class="line"></span><br><span class="line">COMMIT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*nat</span><br><span class="line">:PREROUTING ACCEPT [0:0]</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:POSTROUTING ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">:clash - [0:0]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内网 TCP 请求转发给 clash 链</span></span><br><span class="line">-A PREROUTING -s fd22:41b7:e060::/64 -p tcp -j clash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将转发后的包源地址修改为本机地址</span></span><br><span class="line">-A POSTROUTING -s fd22:41b7:e060::/64 -o eth0 -j MASQUERADE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问内网和校园网不经过 clash</span></span><br><span class="line">-A clash -d fd22:41b7:e060::/64 -j RETURN</span><br><span class="line">-A clash -d 2402:f000::/32 -j RETURN</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其余请求重定向至 clash 端口</span></span><br><span class="line">-A clash -p tcp -j REDIRECT --to-ports 17891</span><br><span class="line"></span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前 &lt;a href=&quot;/2021/07/11/%E3%80%90%E8%A1%A5%E6%A1%A3%E3%80%91%E6%A0%91%E8%8E%93%E6%B4%BE%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/#%E4%BD%BF%E7%94%A8-USB-%E7%BD%91%E5%8D%A1&quot;&gt;【补档】树莓派折腾记录&lt;/a&gt; 中也记录过了相关内容，但是一年过来有些地方有些变动与改进，故单开一篇重新记录并长期更新。&lt;/p&gt;</summary>
    
    
    
    <category term="折腾" scheme="https://blog.centaurus99.com/categories/%E6%8A%98%E8%85%BE/"/>
    
    <category term="树莓派" scheme="https://blog.centaurus99.com/categories/%E6%8A%98%E8%85%BE/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
    <category term="树莓派" scheme="https://blog.centaurus99.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    <category term="软路由" scheme="https://blog.centaurus99.com/tags/%E8%BD%AF%E8%B7%AF%E7%94%B1/"/>
    
    <category term="Clash" scheme="https://blog.centaurus99.com/tags/Clash/"/>
    
    <category term="AdGuard Home" scheme="https://blog.centaurus99.com/tags/AdGuard-Home/"/>
    
  </entry>
  
  <entry>
    <title>树莓派软路由配置 IPv6 网络</title>
    <link href="https://blog.centaurus99.com/2022/09/02/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%BD%AF%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE-IPv6-%E7%BD%91%E7%BB%9C/"/>
    <id>https://blog.centaurus99.com/2022/09/02/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%BD%AF%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE-IPv6-%E7%BD%91%E7%BB%9C/</id>
    <published>2022-09-01T16:24:49.000Z</published>
    <updated>2022-09-03T13:02:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>树莓派挂在宿舍当软路由已经一年了，当时只部署了 IPv4 下的 NAT 网络，没有 IPv6 支持显然已经过于落后了，访问纯 IPv6 网站也还得换回校园网。这两天抽空学习了一点 IPv6 相关知识，对着搜索引擎配置好了 IPv6 网络。</p><span id="more"></span><p>网络环境：树莓派有线网卡 eth0 作为 WAN 口连接 IPv4 + IPv6 双栈的校园网，USB 无线网卡 wlx1cbfceb110dc 作为无线 AP 提供局域网，USB 网卡的驱动和 AP 的搭建见 <a href="/2021/07/11/%E3%80%90%E8%A1%A5%E6%A1%A3%E3%80%91%E6%A0%91%E8%8E%93%E6%B4%BE%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/#%E4%BD%BF%E7%94%A8-USB-%E7%BD%91%E5%8D%A1">【补档】树莓派折腾记录</a>。</p><h2 id="网桥透传法"><a href="#网桥透传法" class="headerlink" title="网桥透传法"></a>网桥透传法</h2><p>由于我的 IPv6 网络并没有透明代理的需求，所以其实在两个网卡间搭个网桥，把树莓派作为二层网络设备（类似交换机）使用即可。主要问题在于限制网桥只走 IPv6 流量，这个使用 ebtables 即可，局域网中的网络设备会联系校园网的网关获取到 IPv6 地址等信息。</p><p>部署完后才发现，校园网的 IPv6 也是需要登录认证的，所以这样整的话每次联网都需要手动登录，所以最终弃用了 QAQ.</p><p>主要参考：<a href="http://www.xingbin.net/blog_channel8/C/CampusNetwork_IPv6/">http://www.xingbin.net/blog_channel8/C/CampusNetwork_IPv6/</a></p><p>建立网桥：<code>sudo brctl addbr ipv6br</code></p><p>启动网桥：<code>sudo ifconfig ipv6br up</code></p><p>只允许 IPv6 数据包通过网桥：<code>sudo ebtables -t broute -A BROUTING -p ! ipv6 -j DROP</code></p><p>这一步如果遇到了 <code>RULE_APPEND failed (No such file or directory): rule in chain BROUTING.</code> 之类的错误的话，可能是因为使用了基于 nf_tables 而不是 xtables 的 ebtables，（参见：<a href="https://sources.debian.org/src/iptables/1.8.2-4/debian/NEWS/">https://sources.debian.org/src/iptables/1.8.2-4/debian/NEWS/</a>），此时使用 ebtables-legacy 即可。</p><p>添加 eth0 进入网桥：<code>sudo brctl addif ipv6br eth0</code></p><p>添加 wlx1cbfceb110dc 进入网桥：<code>sudo brctl addif ipv6br wlx1cbfceb110dc</code></p><p><strong>注意：</strong> 建议先设置 ebtables 再添加网卡，否则直接将网卡添加进网桥的话会导致 IPv4 流量都进入网桥，从而无法正常连接以及丢失 SSH 连接。</p><p>以上配置重启后会消失，需要可持久化的话可以参考 <a href="http://blog.yesterday17.cn/post/pi-router/">http://blog.yesterday17.cn/post/pi-router/</a> 中的配置。</p><h2 id="NAT-for-IPv6"><a href="#NAT-for-IPv6" class="headerlink" title="NAT for IPv6"></a>NAT for IPv6</h2><p>IPv6 网络中本不应使用 NAT，然而校园网中获得的 IPv6 地址使用 ifconfig 查看是 prefixlen 128 的（或许是由 prefixlen 64 的地址生成的？这块儿我不是很明白），并且对每一个 IP 都会要求身份认证，给连入宿舍局域网中的设备带来了一定的麻烦。于是选择搭建 NAT 网络，共用同一个校园网 IPv6 地址。</p><p>局域网中使用唯一本地 IPv6 单播地址 (ULA, Unique Local IPv6 Unicast Address, <a href="https://www.rfc-editor.org/rfc/rfc4193">RFC 4193</a>)，要求拥有固定前缀 <code>fd00::/8</code>，然后是 40 位随机 Global ID（关于随机的必要性见：<a href="https://blogs.infoblox.com/ipv6-coe/3-ways-to-ruin-your-future-network-with-ipv6-unique-local-addresses-part-2-of-2/">https://blogs.infoblox.com/ipv6-coe/3-ways-to-ruin-your-future-network-with-ipv6-unique-local-addresses-part-2-of-2/</a>）。然而为了手打地址方便，我还是使用了有某种实际意义的地址：<code>fd22:41b7:e060::/64</code>。<span class="heimu">至少没用全零</span></p><p>首先开启 IPv6 内核转发，编辑 <code>/etc/sysctl.conf</code></p><figure class="highlight txt"><figcaption><span>/etc/sysctl.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.ipv6.conf.all.forwarding=1</span><br><span class="line">net.ipv6.conf.all.accept_ra=2</span><br></pre></td></tr></table></figure><p>关于 <code>accept_ra</code> 的设置参考：<a href="https://sysctl-explorer.net/net/ipv6/accept_ra/">https://sysctl-explorer.net/net/ipv6/accept_ra/</a>，大概是因为开启转发后会自动关闭 Accept Router Advertisements，设置值为 2 可以强制开启。</p><p>接着使用 dhcpcd 配置内网无线 AP 网卡的固定静态地址，在 <code>/etc/dhcpcd.conf</code> 中添加 <code>static ip6_address</code>，编辑后如下：</p><figure class="highlight txt"><figcaption><span>/etc/dhcpcd.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface wlx1cbfceb110dc</span><br><span class="line">    static ip_address=192.168.22.1/24</span><br><span class="line">    static ip6_address=fd22:41b7:e060::/64</span><br><span class="line">    nohook wpa_supplicant</span><br></pre></td></tr></table></figure><p>重启 dhcpcd 生效：<code>sudo systemctl restart dhcpcd.service</code></p><p>然后使用 dnsmasq 配置地址分配相关服务，这里在内网同时开启 SLAAC 和 DHCPv6，编辑 <code>/etc/dnsmasq.conf</code> 后如下：</p><figure class="highlight txt"><figcaption><span>/etc/dnsmasq.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface=wlx1cbfceb110dc</span><br><span class="line">dhcp-range=192.168.22.100,192.168.22.200,255.255.255.0,24h</span><br><span class="line">dhcp-range=fd22:41b7:e060::1,fd22:41b7:e060::fe,slaac,1h</span><br><span class="line">dhcp-option=3,192.168.22.1</span><br><span class="line">dhcp-option=6,192.168.22.1</span><br><span class="line">dhcp-option=option6:dns-server,[fd22:41b7:e060::]</span><br><span class="line">enable-ra</span><br><span class="line">dhcp-authoritative</span><br></pre></td></tr></table></figure><p>重启 dnsmasq 生效：<code>sudo systemctl restart dnsmasq.service</code></p><p>再通过 ip6tables 在 POSTROUTING 链上做一个 SNAT 即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ip6tables -t nat -A POSTROUTING -s fd22:41b7:e060::/64 -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure><p>上面配置了树莓派为 DNS 服务器，树莓派使用 Clash 和 Adguard Home 搭建 IPv4 与 IPv6 双栈 DNS 服务，上游服务器也均为双栈 DNS 服务器，重连设备获取 IP 后即可正常使用了。</p><p>如果要指定 DNS 服务器可以在 dnsmasq 中类似配置，以 TUNA DNS666 服务器为例：<code>dhcp-option=option6:dns-server,[2001:da8::666]</code></p><p>配置的 SLAAC 支持使 Android 手机也能正常使用 IPv6 服务。</p><p>经测试，内网设备使用 IPv6 单栈也可以正常访问双栈或 IPv6 单栈网页。</p><h2 id="一些测试网站"><a href="#一些测试网站" class="headerlink" title="一些测试网站"></a>一些测试网站</h2><ul><li>IPv6 测试站: <a href="http://test-ipv6.com/">http://test-ipv6.com</a></li><li>东北大学 IPv6 测速站：<a href="http://speed.neu6.edu.cn/">http://speed.neu6.edu.cn/</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.xingbin.net/blog_channel8/C/CampusNetwork_IPv6/">http://www.xingbin.net/blog_channel8/C/CampusNetwork_IPv6/</a></li><li><a href="https://post.smzdm.com/p/ad9qkz9k/">https://post.smzdm.com/p/ad9qkz9k/</a></li><li><a href="https://tang.su/2017/03/openwrt-ipv6-nat/">https://tang.su/2017/03/openwrt-ipv6-nat/</a></li><li><a href="https://lwz322.github.io/2018/10/07/IPv6_NAT.html">https://lwz322.github.io/2018/10/07/IPv6_NAT.html</a></li><li>Dnsmasq 手册：<a href="https://thekelleys.org.uk/dnsmasq/docs/dnsmasq-man.html">https://thekelleys.org.uk/dnsmasq/docs/dnsmasq-man.html</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;树莓派挂在宿舍当软路由已经一年了，当时只部署了 IPv4 下的 NAT 网络，没有 IPv6 支持显然已经过于落后了，访问纯 IPv6 网站也还得换回校园网。这两天抽空学习了一点 IPv6 相关知识，对着搜索引擎配置好了 IPv6 网络。&lt;/p&gt;</summary>
    
    
    
    <category term="折腾" scheme="https://blog.centaurus99.com/categories/%E6%8A%98%E8%85%BE/"/>
    
    <category term="树莓派" scheme="https://blog.centaurus99.com/categories/%E6%8A%98%E8%85%BE/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
    <category term="树莓派" scheme="https://blog.centaurus99.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    <category term="软路由" scheme="https://blog.centaurus99.com/tags/%E8%BD%AF%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>使用acme.sh自动配置泛域名证书</title>
    <link href="https://blog.centaurus99.com/2022/06/21/%E4%BD%BF%E7%94%A8acme-sh%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/"/>
    <id>https://blog.centaurus99.com/2022/06/21/%E4%BD%BF%E7%94%A8acme-sh%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/</id>
    <published>2022-06-21T15:11:15.000Z</published>
    <updated>2022-06-21T15:35:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>一年前用学生邮箱白嫖的域名要到期了，于是换了个便宜的 <code>.top</code> 域名，正好之前忘了记录自动签证书的过程了，这里记录一下以后再换域名的时候直接来抄。</p><p>由于同时有很多子域名在用，于是决定申请泛域名证书，共用同一个。</p><p>主要参考 <a href="https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E">官方文档</a> ，记录了仅适用于我个人的配置过程。</p><span id="more"></span><h2 id="安装-acme-sh"><a href="#安装-acme-sh" class="headerlink" title="安装 acme.sh"></a>安装 acme.sh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl  https://get.acme.sh | sh -s email=my@example.com</span><br></pre></td></tr></table></figure><h2 id="配置-DNS-API"><a href="#配置-DNS-API" class="headerlink" title="配置 DNS API"></a>配置 DNS API</h2><p>参考 <a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi">官方文档</a></p><p>泛域名证书似乎需要用 DNS 验证，我的 DNS 解析是托管在 Cloudflare 上的，先登录获取 <a href="https://dash.cloudflare.com/profile/api-tokens">API 密钥</a>，这里我图省事直接用了 Global API Key，然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CF_Key=<span class="string">&quot;sdfsdfsdfljlbjkljlkjsdfoiwje&quot;</span></span><br><span class="line"><span class="built_in">export</span> CF_Email=<span class="string">&quot;xxxx@sss.com&quot;</span></span><br></pre></td></tr></table></figure><h2 id="生成-x2F-安装证书"><a href="#生成-x2F-安装证书" class="headerlink" title="生成&#x2F;安装证书"></a>生成&#x2F;安装证书</h2><p>生成证书：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --issue --dns dns_cf -d centaurus99.top -d *.centaurus99.top</span><br></pre></td></tr></table></figure><p>安装证书：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --install-cert -d centaurus99.top --key-file /etc/v2ray/v2ray.key --fullchain-file /etc/v2ray/v2ray.crt --reloadcmd <span class="string">&quot;sudo nginx -s reload&quot;</span></span><br></pre></td></tr></table></figure><p>据文档所说，DNS API 使用的变量，生成&#x2F;安装参数都会被保存用于自动更新，60 天以后证书会自动更新并自动执行安装。下面再去 nginx 里配置证书位置即可。大功告成！</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@cc:~/.acme.sh<span class="comment"># acme.sh -v</span></span><br><span class="line">https://github.com/acmesh-official/acme.sh</span><br><span class="line">v3.0.5</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;一年前用学生邮箱白嫖的域名要到期了，于是换了个便宜的 &lt;code&gt;.top&lt;/code&gt; 域名，正好之前忘了记录自动签证书的过程了，这里记录一下以后再换域名的时候直接来抄。&lt;/p&gt;
&lt;p&gt;由于同时有很多子域名在用，于是决定申请泛域名证书，共用同一个。&lt;/p&gt;
&lt;p&gt;主要参考 &lt;a href=&quot;https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E&quot;&gt;官方文档&lt;/a&gt; ，记录了仅适用于我个人的配置过程。&lt;/p&gt;</summary>
    
    
    
    <category term="折腾" scheme="https://blog.centaurus99.com/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="ACME" scheme="https://blog.centaurus99.com/tags/ACME/"/>
    
  </entry>
  
  <entry>
    <title>Icarus主题配置日记</title>
    <link href="https://blog.centaurus99.com/2022/01/15/Icarus%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%97%A5%E8%AE%B0/"/>
    <id>https://blog.centaurus99.com/2022/01/15/Icarus%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%97%A5%E8%AE%B0/</id>
    <published>2022-01-15T08:04:59.000Z</published>
    <updated>2022-08-30T14:15:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知怎么发现了 <a href="https://github.com/ppoffice/hexo-theme-icarus">Icarus</a> 这个主题，看起来不错，尝试改一改换上。</p><p>为了方便自定义，采用源码安装的形式。<span class="heimu">其实踩了遍直接 npm 安装的坑</span></p><p>本篇博客将和我自定义后的主题 <a href="https://github.com/Centaurus99/hexo-theme-icarus">Icarus个人修改版</a> 保持同步更新~</p><span id="more"></span><h2 id="Icarus-安装"><a href="#Icarus-安装" class="headerlink" title="Icarus 安装"></a>Icarus 安装</h2><h3 id="配置-Hexo"><a href="#配置-Hexo" class="headerlink" title="配置 Hexo"></a>配置 Hexo</h3><p><del>截至 2022-01-15，<code>Icarus</code> 还没有官方支持 <code>Hexo 6.0.0</code>，所以如果在这个时间点使用默认方式安装 <code>Hexo</code> 并装上了 <code>6.0.0</code> 版本的话，大概需要手动降级。</del></p><p><strong>Updated 2022-01-16：</strong><code>Icarus</code> 已有支持 <code>Hexo 6.0.0</code> 的预发布版本。</p><p>我是将 <code>package.json</code> 中将 <code>Hexo</code> 的版本从 <code>6.0.0</code> 改为了 <code>5.4.0</code>，然后 <code>npm update</code>。</p><p>然后在 <code>_config.yml</code> 中将主题改为 <code>Icarus</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">icarus</span></span><br></pre></td></tr></table></figure><p>可以选择将不用的默认主题 <code>hexo-theme-landscape</code> 卸载掉</p><h3 id="安装-Icarus"><a href="#安装-Icarus" class="headerlink" title="安装 Icarus"></a>安装 Icarus</h3><p>为了方便对主题单独进行管理，我先将主题 Fork 一份到自己的 Github 上，即 <a href="https://github.com/Centaurus99/hexo-theme-icarus">Icarus个人修改版</a>，然后通过 git 子模块进入到博客中来。</p><p>在博客根目录下使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add https://github.com/Centaurus99/hexo-theme-icarus.git themes/icarus</span><br></pre></td></tr></table></figure><p>这样，即使到一台新设备上，也只需要在 clone 之后在项目目录下多一步 <code>git submodule update --init</code>，就能获取到主题了。</p><p>此时直接开始运行会发现缺少依赖，手动安装一下即可（直接 npm 安装也可能会遇到这个问题，参考 <a href="https://github.com/ppoffice/hexo-theme-icarus/issues/855#issuecomment-812881200">Issue#855</a>）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3</span><br></pre></td></tr></table></figure><h2 id="配置-Icarus-主题"><a href="#配置-Icarus-主题" class="headerlink" title="配置 Icarus 主题"></a>配置 Icarus 主题</h2><p>在 <code>themes/icarus/</code> 下没有配置文件的前提下（如果有就删了），可以先运行一下 <code>hexo server</code> ，会在博客根目录下自动生成 <code>_config.icarus.yml</code> 配置文件，在这里配置而不是主题目录下配置即可保持主题源码不含个人配置文件。</p><p>接着就可以对着 <a href="https://ppoffice.github.io/hexo-theme-icarus/Configuration/icarus%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/">官方文档</a> 配置自己的主题啦。</p><p>一些个性化的东西这里就不做记录了，记录一些功能的配置过程。</p><h3 id="关于显示更新时间问题"><a href="#关于显示更新时间问题" class="headerlink" title="关于显示更新时间问题"></a>关于显示更新时间问题</h3><p>这实际是不是主题配置相关内容，只是记录一下，如果使用 Git 管理博客源码，记得把 <code>_config.yml</code> 中的 <code>updated_option</code> 改为 <code>&#39;date&#39;</code>，这样显示的更新时间是由博客 <code>Front-matter</code> 标记中的 <code>updated</code> 决定的，而不是由文件修改时间决定。</p><h3 id="使用二次开发后的主题"><a href="#使用二次开发后的主题" class="headerlink" title="使用二次开发后的主题"></a>使用二次开发后的主题</h3><p>这里发现有个大佬对主题做了很多不错的修改 <a href="https://www.alphalxy.com/2019/03/customize-icarus/">大佬博客</a>，可以提个 PR 到自己这儿来使用。<a href="https://github.com/AlphaLxy/hexo-theme-icarus">源码</a></p><p>这个代码直接使用可能会因为编码规范问题不通过 Code Linting 检查，<code>npm run lint</code> 可以查看问题，可以临时在 <code>package.json</code> 中的 <code>scripts &gt; lint</code> 对应的命令里添加 –fix 尝试自动修复，剩下的问题就要手动修复了。</p><h3 id="评论插件"><a href="#评论插件" class="headerlink" title="评论插件"></a>评论插件</h3><p>由于 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 请求的账户权限太高，又不想使用依托于其他第三方服务的评论插件，同时 <a href="https://github.com/xCss/Valine">Valine</a> 又有着安全问题，<a href="https://posativ.org/isso/">Isso</a> 又感觉较为简陋，所以最终选择了 <a href="https://waline.js.org/">Waline</a> 评论插件。正好手头上有个 VPS，可以自建评论服务器。</p><p><a href="https://github.com/imaegoo/twikoo">twikoo</a> 也是一个很不错的评论插件，不过由于不支持独立部署（<a href="https://github.com/imaegoo/twikoo/issues/163">imaegoo&#x2F;twikoo#163</a>）以及外观上更喜欢 <a href="https://waline.js.org/">Waline</a> 的缘故，最终还是选择了 <a href="https://waline.js.org/">Waline</a>。</p><h4 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h4><p>参考 <a href="https://ppoffice.github.io/hexo-theme-icarus/Plugins/Comment/icarus%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97-%E7%94%A8%E6%88%B7%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/">Icarus评论插件文档</a>，只需要在 <code>_config.icarus.yml</code> 中修改评论插件配置就可以啦。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comment:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">waline</span></span><br><span class="line">    <span class="attr">server_url:</span> <span class="string">服务端地址</span></span><br></pre></td></tr></table></figure><h4 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h4><p>目前本博客的评论服务器为自建服务器，参考 <a href="https://waline.js.org/guide/server/vps-deploy.html">官方文档</a> 搭建，以下为搭建过程记录（方便重建的时候过来直接 copy）。</p><h5 id="gt-创建对应用户"><a href="#gt-创建对应用户" class="headerlink" title="&gt; 创建对应用户"></a>&gt; 创建对应用户</h5><p>以下过程可能需要 sudo 权限，并非必须步骤。</p><p>新建一个无法直接登录的用户用于运行 <code>waline</code> 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser waline --disabled-login --disabled-password</span><br></pre></td></tr></table></figure><p>切换到该用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su - waline</span><br></pre></td></tr></table></figure><p>使用 npm 安装 <code>waline</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @waline/vercel</span><br></pre></td></tr></table></figure><h5 id="gt-配置-MySQL-数据库"><a href="#gt-配置-MySQL-数据库" class="headerlink" title="&gt; 配置 MySQL 数据库"></a>&gt; 配置 MySQL 数据库</h5><p>参考 <a href="https://www.eula.club/%E4%BD%BF%E7%94%A8Waline%E7%BB%99Hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F.html">大佬博客</a>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建新的数据库，并设置数据库编码</span></span><br><span class="line">$ <span class="keyword">CREATE</span> DATABASE 你的数据库名 <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">DEFAULT</span> <span class="keyword">COLLATE</span> utf8_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建新的用户</span></span><br><span class="line">$ <span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;你的用户名&#x27;</span>@<span class="string">&#x27;你的服务器IP&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;你的密码&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--把数据库的管理权限给予刚刚创建的MySQL用户</span></span><br><span class="line">$ <span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;你的用户名&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--刷新权限，使用设置生效</span></span><br><span class="line">$ FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>执行数据库初始化脚本 <a href="https://github.com/walinejs/waline/blob/main/assets/waline.sql">waline.sql</a>，可以先登录到对应 MySQL 账户下，然后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE 你的数据库名;</span><br><span class="line">SOURCE 脚本文件位置;</span><br></pre></td></tr></table></figure><h5 id="gt-配置评论通知"><a href="#gt-配置评论通知" class="headerlink" title="&gt; 配置评论通知"></a>&gt; 配置评论通知</h5><p>参考 <a href="https://waline.js.org/guide/server/notification.html">https://waline.js.org/guide/server/notification.html</a> ，这里我只配置了邮件通知，见下面的配置文件。</p><h5 id="gt-配置为服务运行"><a href="#gt-配置为服务运行" class="headerlink" title="&gt; 配置为服务运行"></a>&gt; 配置为服务运行</h5><p>可以先试一下能否直接运行，先配置环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> MYSQL_DB=你的数据库名</span><br><span class="line"><span class="built_in">export</span> MYSQL_USER=你的用户名</span><br><span class="line"><span class="built_in">export</span> MYSQL_PASSWORD=你的密码</span><br></pre></td></tr></table></figure><p>然后尝试运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node node_modules/@waline/vercel/vanilla.js</span><br></pre></td></tr></table></figure><p>如果没啥问题，就可以配置成服务了。</p><p>编辑文件 <code>/etc/systemd/system/waline.service</code>，如下配置：</p><figure class="highlight ini"><figcaption><span>/etc/systemd/system/waline.service</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Waline Comment Server</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">User</span>=waline</span><br><span class="line"><span class="attr">WorkingDirectory</span>=/home/waline</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/node /home/waline/node_modules/@waline/vercel/vanilla.js</span><br><span class="line"><span class="attr">Environment</span>=MYSQL_DB=你的数据库名</span><br><span class="line"><span class="attr">Environment</span>=MYSQL_USER=你的用户名</span><br><span class="line"><span class="attr">Environment</span>=MYSQL_PASSWORD=你的密码</span><br><span class="line"><span class="attr">Environment</span>=SMTP_SERVICE=SMTP 邮件发送服务提供商</span><br><span class="line"><span class="attr">Environment</span>=SMTP_USER=SMTP 邮件发送服务的用户名</span><br><span class="line"><span class="attr">Environment</span>=SMTP_PASS=SMTP 邮件发送服务的密码</span><br><span class="line"><span class="attr">Environment</span>=SITE_NAME=网站名称</span><br><span class="line"><span class="attr">Environment</span>=SITE_URL=网站地址（要去除末尾的<span class="string">&#x27;/&#x27;</span>）</span><br><span class="line"><span class="attr">Environment</span>=AUTHOR_EMAIL=博主邮箱</span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>然后使用 <code>sudo systemctl enable --now waline.service</code> 启动并设为开机自启动。</p><p>之后配置 Web 服务器转发到本地 8360 端口即可。Nginx 里可以这样配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> http://127.0.0.1:8360/;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> REMOTE-HOST <span class="variable">$remote_addr</span>;</span><br><span class="line">  <span class="attribute">add_header</span> X-Cache <span class="variable">$upstream_cache_status</span>;</span><br><span class="line">  <span class="comment"># cache</span></span><br><span class="line">  <span class="attribute">add_header</span> Cache-Control <span class="literal">no</span>-cache;</span><br><span class="line">  <span class="attribute">expires</span> <span class="number">12h</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以去博客里测试一下了，第一个注册的用户将成为管理员。</p><h3 id="使用-patch-package-修改第三方模块"><a href="#使用-patch-package-修改第三方模块" class="headerlink" title="使用 patch-package 修改第三方模块"></a>使用 patch-package 修改第三方模块</h3><p>主题中使用到的一些模块可能需要修改源码进行个性化，比如 <code>hexo-component-inferno</code> 中没有使用最新的 <code>waline</code> 前端模块，想要手动配置。可以使用 <code>patch-package</code> 来进行易于管理的修改。</p><ul><li><p>首先 <code>npm install patch-package</code> 安装</p></li><li><p>然后在 <code>node_modules/</code> 中修改源码</p></li><li><p>运行 <code>npx patch-package package-name</code> 生成补丁文件</p></li><li><p>在 <code>package.json</code> 中加入执行脚本：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line"><span class="addition">+   &quot;postinstall&quot;: &quot;npx patch-package&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ul><p>这样之后就可以在 <code>npm install</code> 时自动打上个性化补丁了。</p><h3 id="暗黑主题"><a href="#暗黑主题" class="headerlink" title="暗黑主题"></a>暗黑主题</h3><p>参考：<a href="https://github.com/ppoffice/hexo-theme-icarus/issues/564">https://github.com/ppoffice/hexo-theme-icarus/issues/564</a></p><h3 id="Waline-评论插件中代码高亮样式问题"><a href="#Waline-评论插件中代码高亮样式问题" class="headerlink" title="Waline 评论插件中代码高亮样式问题"></a>Waline 评论插件中代码高亮样式问题</h3><p>如图：</p><div style="width:50%;margin:auto"><img src="/2022/01/15/Icarus%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%97%A5%E8%AE%B0/2022-02-07-21-53-27.png" class="" title="2022-02-07-21-53-27.png"></div><p>研究一番后发现， <code>Waline</code> 使用 <a href="https://github.com/PrismJS/prism">Prism</a> 进行代码高亮，它会直接对代码的不同高亮的部分赋上不同的类，这个类名不会使用 namespace 进行保护（加个前缀啥的），这样的类名有 <code>tag</code> , <code>number</code> 等等。</p><p>比如上图代码中的 html 标签 <code>&lt;head&gt;</code> 会格式化为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;token tag&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;token tag&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;token punctuation&quot;</span>&gt;</span><span class="symbol">&amp;lt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    head</span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;token punctuation&quot;</span>&gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>恰巧的是，<code>Icarus</code> 中使用了 CSS 框架 <a href="https://github.com/jgthms/bulma">bulma</a>，对 <code>tag</code> , <code>number</code> 之类的样式进行了设定，这就导致了评论区代码高亮出现问题。</p><p>在 <code>Prism</code> 的 <a href="https://github.com/PrismJS/prism/issues/1324">Issue#1324</a> 中也提到了该问题并给出了解决方法，但由于评论区的代码高亮是在评论服务端完成的，懒得去改服务端代码了，于是就自定义 CSS 进行覆盖，顺便也解决一下默认情况下评论区中黑色代码块和主题格格不入的问题，适配一下明暗两种主题。<a href="https://github.com/Centaurus99/hexo-theme-icarus/commit/974b1c9281290273ab418db4dea7e5ab0cc12fa2">commit#974b1c9</a></p><p>效果：</p><center><div style="width:49%;display:inline-block;"><img src="/2022/01/15/Icarus%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%97%A5%E8%AE%B0/2022-02-07-22-44-49.png" class="" title="2022-02-07-22-44-49.png"></div><div style="width:49%;display:inline-block;"><img src="/2022/01/15/Icarus%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%97%A5%E8%AE%B0/2022-02-07-22-44-54.png" class="" title="2022-02-07-22-44-54.png"></div></center><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://xiongyingqi.com/2019/02/01/use-git-submodules/">https://xiongyingqi.com/2019/02/01/use-git-submodules/</a></li><li><a href="https://ppoffice.github.io/hexo-theme-icarus/Configuration/icarus%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/">https://ppoffice.github.io/hexo-theme-icarus/Configuration/icarus用户指南-主题配置/</a></li><li><a href="https://www.alphalxy.com/2019/03/customize-icarus/">https://www.alphalxy.com/2019/03/customize-icarus/</a></li><li><a href="https://confluence.jaytaala.com/display/TKB/Installing%2C+configuring%2C+and+integrating+isso+%28commenting+web+app%29+into+Confluence">https://confluence.jaytaala.com/display/TKB/Installing%2C+configuring%2C+and+integrating+isso+%28commenting+web+app%29+into+Confluence</a></li><li><a href="https://www.eula.club/%E4%BD%BF%E7%94%A8Waline%E7%BB%99Hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F.html">https://www.eula.club/使用Waline给Hexo静态博客添加评论系统</a></li><li><a href="https://www.jianshu.com/p/a4b6e06e9f8d">https://www.jianshu.com/p/a4b6e06e9f8d</a></li></ul><h2 id="附录：个性化修改记录"><a href="#附录：个性化修改记录" class="headerlink" title="附录：个性化修改记录"></a>附录：个性化修改记录</h2><p>主要记录一下我的主题源码有什么额外的改动。</p><ul><li><a href="https://github.com/Centaurus99/hexo-theme-icarus/commit/a05b870908b9777bfea4991cc402982a6b9f73e4">a05b870</a> 为解决关于 Code Linting 的问题，对代码格式进行了一些修正。</li><li><a href="https://github.com/Centaurus99/hexo-theme-icarus/commit/248a76822d811115b6bf91db2d6d6451c3fc636b">248a768</a> 删除了 merge 过来的代码中的个人配置文件。</li><li><a href="https://github.com/Centaurus99/hexo-theme-icarus/commit/229543d4a8cf79d924b6b91e3b19abcc93022278">229543d</a> 个人信息页面上将 <code>关注我</code> 修改为 <code>关注</code>。</li><li><a href="https://github.com/Centaurus99/hexo-theme-icarus/commit/e38ae7c35aa1a68975535bd3125d953ef57ce27b">e38ae7c</a> 删除了 merge 过来代码中的个人 logo。</li><li><a href="https://github.com/Centaurus99/hexo-theme-icarus/commit/658686a46a37e385edfa267bb7f783b3041cf8c2">658686a</a> 将黑幕添加到 css 中便于直接使用。</li><li><a href="https://github.com/Centaurus99/hexo-theme-icarus/commit/74416d2dc1cdcbcf61787fc9cc4bb2f71bbd6cca">74416d2</a> 添加暗黑主题，并在后面几个 commit 中进行适配。</li><li><a href="https://github.com/Centaurus99/hexo-theme-icarus/commit/1544bb3e1cf89ed7aca2a87e99e71a1e133ffd5d">1544bb3</a> 修改了代码块中字体大小。</li><li><a href="https://github.com/Centaurus99/hexo-theme-icarus/commit/974b1c9281290273ab418db4dea7e5ab0cc12fa2">974b1c9</a> 适配 <code>Waline</code> 评论插件中代码块的主题风格（包括黑白两种主题）。</li><li><a href="https://github.com/Centaurus99/hexo-theme-icarus/commit/6b5da248618ef4f36e678427877520355fb26c6e">6b5da24</a> 例行同步上游更新。</li><li><a href="https://github.com/Centaurus99/hexo-theme-icarus/commit/dcb178c1ff0ba36c71c56f5f4392c8b87f3d29c5">dcb178c</a> 修复上游更新中引起的纯文字 logo 边角被上层容器覆盖的问题。</li><li><a href="https://github.com/Centaurus99/hexo-theme-icarus/commit/3a3c5e6969be219f0a9bb74fb9ed64efc42c24bf">3a3c5e6</a> 修复上游更新中 <code>Waline</code> 评论插件升级至 v2 后 CSS 类开头从 <code>v</code> 改为 <code>wl-</code> 引起的问题。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;不知怎么发现了 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot;&gt;Icarus&lt;/a&gt; 这个主题，看起来不错，尝试改一改换上。&lt;/p&gt;
&lt;p&gt;为了方便自定义，采用源码安装的形式。&lt;span class=&quot;heimu&quot;&gt;其实踩了遍直接 npm 安装的坑&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;本篇博客将和我自定义后的主题 &lt;a href=&quot;https://github.com/Centaurus99/hexo-theme-icarus&quot;&gt;Icarus个人修改版&lt;/a&gt; 保持同步更新~&lt;/p&gt;</summary>
    
    
    
    <category term="折腾" scheme="https://blog.centaurus99.com/categories/%E6%8A%98%E8%85%BE/"/>
    
    <category term="博客" scheme="https://blog.centaurus99.com/categories/%E6%8A%98%E8%85%BE/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="Hexo" scheme="https://blog.centaurus99.com/tags/Hexo/"/>
    
    <category term="Icarus" scheme="https://blog.centaurus99.com/tags/Icarus/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客架设日记</title>
    <link href="https://blog.centaurus99.com/2022/01/14/Hexo%E5%8D%9A%E5%AE%A2%E6%9E%B6%E8%AE%BE%E6%97%A5%E8%AE%B0/"/>
    <id>https://blog.centaurus99.com/2022/01/14/Hexo%E5%8D%9A%E5%AE%A2%E6%9E%B6%E8%AE%BE%E6%97%A5%E8%AE%B0/</id>
    <published>2022-01-14T08:21:04.000Z</published>
    <updated>2022-09-02T15:03:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久之前就想把博客搭起来的来着，结果一直咕到了现在，终于有空来搭啦 ✿✿ヽ(°▽°)ノ✿</p><p>博客使用 <a href="https://hexo.io/">Hexo</a> 搭建，博客源码位于 <a href="https://github.com/Centaurus99/centaurus99.github.io">https://github.com/Centaurus99/centaurus99.github.io</a> 的 <code>master</code> 分支，静态页面同步部署于 <code>gh-pages</code> 分支和个人 VPS 上。</p><span id="more"></span><p>下面是搭建（<del>踩坑</del>）记录~ <span class="heimu">其实是搭完后的回忆</span></p><h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><p>对着官方文档搞，没啥好说 QWQ。</p><p>先装 <code>nodejs</code>，我这儿装的版本是 <code>v16.13.2</code>。</p><p>然后 <code>npm install -g hexo-cli</code>。</p><p>最后到博客文件夹下 <code>hexo init</code>，然后 <code>npm install</code>，完成！</p><h2 id="GitHub-Pages-的自动部署"><a href="#GitHub-Pages-的自动部署" class="headerlink" title="GitHub Pages 的自动部署"></a>GitHub Pages 的自动部署</h2><p>关于如何使用 <code>Hexo</code> 写博客之类的官方文档里都有介绍，这儿就记录一点自动化部署的设置吧。</p><p>为了方便管理，我这儿将博客源码和部署后的静态页面放在了同一个库中，下面的配置以我的配置为例。</p><p>为了使用 <code>用户名.github.io</code> 访问，需要创建名为 <code>用户名.github.io</code> 的存储库。</p><h3 id="配置-Hexo"><a href="#配置-Hexo" class="headerlink" title="配置 Hexo"></a>配置 Hexo</h3><p>首先配置运行 <code>hexo deploy</code> 时的部署方式。</p><p>先安装 Git 部署插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后在 <code>_config.yml</code> 中修改配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:Centaurus99/centaurus99.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure><p>这样然后运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>应该就能在仓库的对应分支看到部署好的静态页面啦~</p><p>在仓库的 <code>Settings &gt; Pages</code> 中将 <code>Source</code> 设为 <code>gh-pages</code> 分支，然后就可以通过 <code>用户名.github.io</code> 访问到博客了。</p><p>如果以后还要拓展部署方式，还可以继续往配置里面添加，如果用到了再来更新~</p><h3 id="配置-Github-Actions"><a href="#配置-Github-Actions" class="headerlink" title="配置 Github Actions"></a>配置 Github Actions</h3><p><a href="https://github.com/features/actions">Github Actions</a> 是个好东西，搞自动工作流非常方便，白嫖真香！</p><img src="/2022/01/14/Hexo%E5%8D%9A%E5%AE%A2%E6%9E%B6%E8%AE%BE%E6%97%A5%E8%AE%B0/2022-01-14-21-07-56.png" class="" title="Github-Actions-2022-01-14-21-07-56.png"><p>这个部分基本是参照大佬的博客完成的，参见：<a href="https://tommy.net.cn/2020/08/06/deploy-hexo-with-github-actions/">https://tommy.net.cn/2020/08/06/deploy-hexo-with-github-actions/</a></p><p>仅对配置文件做了一点更新和修改，最终如下：</p><p><strong>2022-01-15 更新：</strong>由于将主题以子模块的形式加入版本控制，添加了 <code>submodules: &#39;recursive&#39;</code> 表示递归检出子模块</p><p><strong>2022-09-02 更新：</strong>添加环境变量 <code>TZ: Asia/Shanghai</code> 设定时区，确保本地和远端生成的日期路径相同</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.event.repository.owner.id</span> <span class="string">==</span> <span class="string">github.event.sender.id</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">source</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">master</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="string">&#x27;recursive&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;16&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACTION_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 700 ~/.ssh</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;1102569568@qq.com&quot;</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;Centaurus99&quot;</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo deploy</span></span><br></pre></td></tr></table></figure><p>这样，当我更新博客源码时，Github 就会帮我自动部署好静态页面啦。</p><h3 id="配置-Webhooks"><a href="#配置-Webhooks" class="headerlink" title="配置 Webhooks"></a>配置 Webhooks</h3><p>手头还有一台 VPS，还是打算把它作为博客的服务器。</p><p>Github 上有个功能叫 <code>Webhooks</code>，可以在你的库发生一些动作（比如有人 push 东西上来）的时候对着一个网址发个请求。利用这个就可以在更新时通知我的 VPS 去 pull 最新的静态分支，从而实现自动部署了。</p><p>关于 Web 服务器的搭建，Nginx 的使用这里就不记录了。 <span class="heimu">摆烂咯！</span></p><p>Webhooks 的使用也是学习大佬的博客，参见：<a href="https://maphical.cn/2020/03/build-blog-using-hexo/">https://maphical.cn/2020/03/build-blog-using-hexo/</a></p><p>在部署这个的过程中遇到了一堆奇奇怪怪的问题，由于时间久远了记不太清了，这里就不做记录了。 <span class="heimu">摆烂咯！×2</span></p><p>依稀记得一点点，比如脚本跑不起来考虑是 php 用户权限问题，最终通过给予它运行 git 命令的 sudo 权限解决；git pull 每次在更新的时候都需要处理冲突问题，原因是上面那个 git 部署工具每次会将这个分支完全覆盖，包括历史 commit 都会被删除，所以在一开始选择 pull 方式的时候要选择 rebase。</p><p>由于我把博客源码和静态页面放在了同一个存储库内，这会导致 Webhooks 每次更新会被激活两遍（两个分支的更新各激活一遍），不过问题不大。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于博客的配置文件 <code>_config.yml</code> 可以在我的 Github 对于仓库找到。</p><p>这样就完成了博客的自动化部署的配置，下一篇博客将记录配置主题的吐血过程。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></li><li><a href="https://tommy.net.cn/2020/08/06/deploy-hexo-with-github-actions/">https://tommy.net.cn/2020/08/06/deploy-hexo-with-github-actions/</a></li><li><a href="https://maphical.cn/2020/03/build-blog-using-hexo/">https://maphical.cn/2020/03/build-blog-using-hexo/</a></li><li><a href="https://wiki.eryajf.net/pages/47a507/">https://wiki.eryajf.net/pages/47a507/</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;好久之前就想把博客搭起来的来着，结果一直咕到了现在，终于有空来搭啦 ✿✿ヽ(°▽°)ノ✿&lt;/p&gt;
&lt;p&gt;博客使用 &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt; 搭建，博客源码位于 &lt;a href=&quot;https://github.com/Centaurus99/centaurus99.github.io&quot;&gt;https://github.com/Centaurus99/centaurus99.github.io&lt;/a&gt; 的 &lt;code&gt;master&lt;/code&gt; 分支，静态页面同步部署于 &lt;code&gt;gh-pages&lt;/code&gt; 分支和个人 VPS 上。&lt;/p&gt;</summary>
    
    
    
    <category term="折腾" scheme="https://blog.centaurus99.com/categories/%E6%8A%98%E8%85%BE/"/>
    
    <category term="博客" scheme="https://blog.centaurus99.com/categories/%E6%8A%98%E8%85%BE/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="Hexo" scheme="https://blog.centaurus99.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>【补档】树莓派折腾记录</title>
    <link href="https://blog.centaurus99.com/2021/07/11/%E3%80%90%E8%A1%A5%E6%A1%A3%E3%80%91%E6%A0%91%E8%8E%93%E6%B4%BE%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
    <id>https://blog.centaurus99.com/2021/07/11/%E3%80%90%E8%A1%A5%E6%A1%A3%E3%80%91%E6%A0%91%E8%8E%93%E6%B4%BE%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/</id>
    <published>2021-07-11T02:02:33.000Z</published>
    <updated>2022-09-06T11:47:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>2021 年初的时候入手了树莓派 4b，然后暑假的时候好好折腾了一下，留下了一些零散的记录，在这里整理起来，之后哪天重建的时候还能来参考一下。</p><p>由于距离记录已经有一段时间了，可能有些内容会有偏差。</p><span id="more"></span><h2 id="初步尝试"><a href="#初步尝试" class="headerlink" title="初步尝试"></a>初步尝试</h2><p>参考：<a href="http://blog.dngz.net/RaspberryPiKodbox.htm">http://blog.dngz.net/RaspberryPiKodbox.htm</a></p><h3 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h3><p>尝试装了适配树莓派的 <a href="https://ubuntu.com/download/raspberry-pi">Ubuntu</a>，后来还是为了更好的硬件兼容性换成官方系统了。</p><p>当时本着尝鲜的想法，选择了仍在 beta 测试中的官方 64-bit 系统 <a href="https://mirrors.tuna.tsinghua.edu.cn/raspberry-pi-os-images/raspios_lite_arm64/images/raspios_lite_arm64-2021-05-28/">2021-05-07-raspios-buster-arm64-lite</a>，由于计划作为服务器运行，不需要图形桌面，所以就选择了 lite。</p><p>注：现在官方 64-bit 系统已经正式发布了（<a href="https://www.raspberrypi.com/news/raspberry-pi-os-64-bit/">https://www.raspberrypi.com/news/raspberry-pi-os-64-bit/</a>）。</p><p>官网也给出了烧写 SD 卡的工具 <a href="https://www.raspberrypi.com/software/">Raspberry Pi Imager</a>，GUI 好看，烧录系统非常方便。</p><h3 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h3><p>系统烧录完成后会有一个 <code>boot</code> 分区，做一些初始化的配置再进行第一次开机。</p><h4 id="开启-ssh-服务"><a href="#开启-ssh-服务" class="headerlink" title="开启 ssh 服务"></a>开启 ssh 服务</h4><p>在 <code>boot</code> 分区下新建一个空文件，名为 <code>ssh</code>。</p><h4 id="开机自动连接-WIFI"><a href="#开机自动连接-WIFI" class="headerlink" title="开机自动连接 WIFI"></a>开机自动连接 WIFI</h4><p>在 <code>boot</code> 分区下新建 <code>wpa_supplicant.conf</code> 文件，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">country=CN</span><br><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">    ssid=&quot;wifi链接名&quot;</span><br><span class="line">    psk=&quot;wifi密码&quot;</span><br><span class="line">    key_mgmt=WPA-PSK</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="初次启动"><a href="#初次启动" class="headerlink" title="初次启动"></a>初次启动</h4><p>插电开机~</p><p>ssh 可以连接，初始用户名 <code>pi</code> ，密码 <code>raspberry</code>。</p><p>记得修改密码。</p><h4 id="解锁root"><a href="#解锁root" class="headerlink" title="解锁root"></a>解锁root</h4><p><code>sudo passwd root</code> 修改 <code>root</code> 密码。</p><p><code>sudo passwd --unlock root</code> 解锁 <code>root</code> 用户。</p><p>由于安全原因，默认情况下 <code>root</code> 是不能用 ssh 登录的，如果一定需要的话，编辑 <code>/etc/ssh/sshd_config</code>，将配置项 <code>#PermitRootLogin prohibit-password</code> 修改为 <code>PermitRootLogin yes</code>，然后 <code>sudo systemctl restart sshd</code> 重启 ssh 服务即可。</p><h4 id="校正时区"><a href="#校正时区" class="headerlink" title="校正时区"></a>校正时区</h4><p><code>sudo dpkg-reconfigure tzdata</code></p><p>选择 <code>Asia/Shanghai</code> 即可。</p><h4 id="树莓派配置工具-raspi-config"><a href="#树莓派配置工具-raspi-config" class="headerlink" title="树莓派配置工具 raspi-config"></a>树莓派配置工具 raspi-config</h4><p><code>sudo raspi-config</code></p><h4 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h4><p>参考：<a href="https://blog.csdn.net/baidu_26678247/article/details/108930421">https://blog.csdn.net/baidu_26678247/article/details/108930421</a></p><p>如果遇到 <code>The repository &#39;http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian buster InRelease&#39; is not signed</code> 错误，可以按如下操作添加公钥（参见：<a href="https://www.jianshu.com/p/c64deffb1308">https://www.jianshu.com/p/c64deffb1308</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver  keyserver.ubuntu.com --recv-keys 9165938D90FDDD2E</span><br><span class="line">gpg --<span class="built_in">export</span> --armor  9165938D90FDDD2E | sudo apt-key add -</span><br></pre></td></tr></table></figure><h3 id="一些杂项"><a href="#一些杂项" class="headerlink" title="一些杂项"></a>一些杂项</h3><h4 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h4><p>使用 <code>raspi-config</code> 打开 GPIO</p><p><code>sudo apt-get install wiringpi</code></p><p>按照 <a href="http://wiringpi.com/wiringpi-updated-to-2-52-for-the-raspberry-pi-4b/">http://wiringpi.com/wiringpi-updated-to-2-52-for-the-raspberry-pi-4b/</a> 更新 wiringpi 版本</p><p><code>gpio readall</code> 即可查看 GPIO 概况</p><h4 id="进一步配置-WIFI"><a href="#进一步配置-WIFI" class="headerlink" title="进一步配置 WIFI"></a>进一步配置 WIFI</h4><p>参考：<a href="https://www.cnblogs.com/zhangyuejia/p/8945354.html">https://www.cnblogs.com/zhangyuejia/p/8945354.html</a></p><p>然后 <code>sudo ifconfig wlan0 down</code> 关闭 wifi，<code>sudo ifconfig wlan0 up</code> 启动 wifi。</p><h4 id="超频"><a href="#超频" class="headerlink" title="超频"></a>超频</h4><p>参考：<a href="https://cyfeng.science/2020/06/26/Unboxing-Raspberry-Pi-4B-8GB-and-Overclocking/">https://cyfeng.science/2020/06/26/Unboxing-Raspberry-Pi-4B-8GB-and-Overclocking/</a></p><p>注意默认情况下 <code>over_voltage</code> 最大为 <code>6</code></p><p>查看CPU频率：<code>sudo watch -n 1 cat /sys/devices/system/cpu/cpu*/cpufreq/cpuinfo_cur_freq</code></p><p>查看CPU温度：<code>sudo watch -n 1 cat /sys/class/thermal/thermal_zone0/temp</code></p><h4 id="CPU-电源计划"><a href="#CPU-电源计划" class="headerlink" title="CPU 电源计划"></a>CPU 电源计划</h4><p><code>echo &quot;powersave&quot; | sudo tee /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor</code> 可以将CPU设为省电模式，固定600MHz</p><p><code>echo &quot;ondemand&quot; | sudo tee /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor</code> 设置回默认模式</p><h4 id="风扇控制"><a href="#风扇控制" class="headerlink" title="风扇控制"></a>风扇控制</h4><p>风扇一直开着噪声大，也影响风扇寿命，设置一下温控。</p><p>为了美观，网购了一个插在 GPIO 座上的风扇插座，勉强塞进了外壳。</p><p>使用 <code>raspi-config</code> 自带的风扇控制需要注意，若使用 i2c 端口作为控制口，需要将 i2c 关闭。</p><p>使用 <code>sudo -E rpi-eeprom-config --edit</code> 设置 <code>WAKE_ON_GPIO=0</code> 和 <code>POWER_OFF_ON_HALT=1</code> 可以在 shutdown 之后使风扇也关闭（否则关机后风扇会开始一直转）。</p><h4 id="通过蓝牙-ssh-连接"><a href="#通过蓝牙-ssh-连接" class="headerlink" title="通过蓝牙 ssh 连接"></a>通过蓝牙 ssh 连接</h4><p>即通过蓝牙连接创建局域网。</p><p>参考：</p><ul><li><a href="http://www.leux.cn/doc/Raspberry%E9%80%9A%E8%BF%87%E8%93%9D%E7%89%99SSH.html">http://www.leux.cn/doc/Raspberry%E9%80%9A%E8%BF%87%E8%93%9D%E7%89%99SSH.html</a></li><li><a href="https://blog.csdn.net/Powerful_Green/article/details/88604205">https://blog.csdn.net/Powerful_Green/article/details/88604205</a></li></ul><p>连接操作：更改适配器选项 -&gt; 蓝牙网络连接 -&gt; 查看蓝牙网络设备 -&gt; 选中，连接时使用 -&gt; 接入点</p><p>后来不知道装了啥蓝牙连不上了，排查之后发现似乎是 <code>/usr/bin/bt-agent -c NoInputNoOutput</code> 失效了，并不会自动配对，需要手动配对。（仍未解决，但也不怎么用蓝牙连接了）</p><h4 id="OLED-显示屏"><a href="#OLED-显示屏" class="headerlink" title="OLED 显示屏"></a>OLED 显示屏</h4><p>低价搞到一个小的 OLED 显示屏，装上。</p><p>由于风扇座占掉了 i2c1，只能通过奇技淫巧使用 i2c0 ，参考 <a href="https://blog.csdn.net/weixin_46145842/article/details/106128144">https://blog.csdn.net/weixin_46145842/article/details/106128144</a> 设置</p><p>驱动和使用参考：<a href="https://shumeipai.nxez.com/2019/04/29/use-the-ssd1306-oled-display-on-the-raspberry-pi.html">https://shumeipai.nxez.com/2019/04/29/use-the-ssd1306-oled-display-on-the-raspberry-pi.html</a></p><h4 id="持续连接校园网"><a href="#持续连接校园网" class="headerlink" title="持续连接校园网"></a>持续连接校园网</h4><p>在 Github 上找了各种连校园网的轮子，试到最后只有这个能够稳定使用：</p><p>使用 <a href="https://github.com/z4yx/GoAuthing">https://github.com/z4yx/GoAuthing</a> 对应程序和 service。</p><h2 id="无线-AP-与路由"><a href="#无线-AP-与路由" class="headerlink" title="无线 AP 与路由"></a>无线 AP 与路由</h2><h3 id="使用-RaspAP-创建无线-AP（已弃用）"><a href="#使用-RaspAP-创建无线-AP（已弃用）" class="headerlink" title="使用 RaspAP 创建无线 AP（已弃用）"></a>使用 RaspAP 创建无线 AP（已弃用）</h3><p><a href="https://github.com/RaspAP/raspap-webgui">RaspAP</a></p><p>手动安装教程：<a href="https://docs.raspap.com/manual/">https://docs.raspap.com/manual/</a></p><h4 id="开启-802-11ac"><a href="#开启-802-11ac" class="headerlink" title="开启 802.11ac"></a>开启 802.11ac</h4><p>参考 <a href="https://docs.raspap.com/faq/#80211ac">https://docs.raspap.com/faq/#80211ac</a></p><p>信道选择 <code>36</code> ，实测 <code>48</code> 无法开启，<code>40</code> 速率较慢。</p><h4 id="流量监控问题"><a href="#流量监控问题" class="headerlink" title="流量监控问题"></a>流量监控问题</h4><p>参考 <a href="https://github.com/RaspAP/raspap-webgui/issues/689">https://github.com/RaspAP/raspap-webgui/issues/689</a> 末尾。</p><p><code>sudo apt-get purge vnstat</code> 卸载原来的 vnstat。</p><p><code>curl -O https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/pool/universe/v/vnstat/vnstat_1.18-1_arm64.deb</code> 下载旧版 vnstat。</p><p><code>sudo dpkg -i vnstat_1.18-1_arm64.deb</code> 安装。</p><p><code>echo &quot;vnstat hold&quot; | sudo dpkg --set-selections</code> 禁用更新。</p><h3 id="使用-OpenWrt-Docker（也已弃用）"><a href="#使用-OpenWrt-Docker（也已弃用）" class="headerlink" title="使用 OpenWrt-Docker（也已弃用）"></a>使用 OpenWrt-Docker（也已弃用）</h3><p>安装 <code>docker</code>：参考 <a href="https://openwrt.club/93.html">https://openwrt.club/93.html</a></p><p>增加用户权限：<a href="https://www.cnblogs.com/codeaaa/p/9041533.html">https://www.cnblogs.com/codeaaa/p/9041533.html</a></p><p><code>hostapd</code> + <code>dnsmasq</code> + <code>OpenWrt-Docker</code>：<a href="https://zhuanlan.zhihu.com/p/163827788">https://zhuanlan.zhihu.com/p/163827788</a></p><p>使用的 <a href="https://github.com/SuLingGG/OpenWrt-Docker">OpenWrt-Docker</a>。</p><p><strong>注意：</strong> 设置 <code>dnsmasq</code> 配置文件的时候一定要<strong>反注释</strong>掉 <code>bind-interfaces</code>，不然会出现地址占用错误。</p><p>Openwrt 配合 AdGurad Home 屏蔽广告和 ShadownSocksR Plus 用于翻墙，参考：<a href="https://blog.zfdang.com/2020/07/adguard-home-work-with-ssr-plus-in-openwrt/">https://blog.zfdang.com/2020/07/adguard-home-work-with-ssr-plus-in-openwrt/</a></p><h3 id="板载-WLAN-优化"><a href="#板载-WLAN-优化" class="headerlink" title="板载 WLAN 优化"></a>板载 WLAN 优化</h3><p><code>sudo iw wlan0 set power_save off</code> 关闭节能可以提高速度与稳定性。</p><h3 id="使用-USB-网卡"><a href="#使用-USB-网卡" class="headerlink" title="使用 USB 网卡"></a>使用 USB 网卡</h3><p>板载网卡性能和稳定性还是不足的，于是入手了一个 USB 无线网卡。</p><p>由于预算有限，又想要 867Mbps 的 5G 频段支持，于是入手的网卡是 RTL8812BU 芯片，在驱动方面问题多多，悲。</p><h4 id="驱动安装"><a href="#驱动安装" class="headerlink" title="驱动安装"></a>驱动安装</h4><p>支持 RaspberryOS(64bit) 的驱动地址：<a href="https://github.com/morrownr/88x2bu">https://github.com/morrownr/88x2bu</a></p><p>关于 <code>iw phy</code>  输出参数的具体说明：<a href="https://c4pr1c3.github.io/cuc-mis/chap0x02/rt3572l_explained.html">https://c4pr1c3.github.io/cuc-mis/chap0x02/rt3572l_explained.html</a></p><p>优化WiFi睡眠：<a href="https://github.com/fastoe/RTL8812BU_for_Raspbian">https://github.com/fastoe/RTL8812BU_for_Raspbian</a></p><p>关于 <code>/etc/modprobe.d/88x2bu.conf</code> 的一点额外说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">There&#x27;s four parms listed in the document you cite.</span><br><span class="line">Code: Select all</span><br><span class="line"></span><br><span class="line">rtw_power_mgnt=0|1|2</span><br><span class="line">0 == disable power saving</span><br><span class="line">1 == power saving on, minPS</span><br><span class="line">2 == power saving on, maxPS</span><br><span class="line">Code: Select all</span><br><span class="line"></span><br><span class="line">rtw_enusbss=0|1</span><br><span class="line">0 == disable auto suspend</span><br><span class="line">1 == enable auto suspend</span><br><span class="line">Code: Select all</span><br><span class="line"></span><br><span class="line">rtw_hwpwrp_detect=0|1</span><br><span class="line">0 == disable HW power pin detection</span><br><span class="line">1 == enable HW power pin detection</span><br><span class="line">Code: Select all</span><br><span class="line"></span><br><span class="line">rtw_ips_mode=0|1</span><br><span class="line">0 == low power, IPS_NORMAL</span><br><span class="line">1 == higher power, IPS_LEVEL2</span><br><span class="line">The conventional wisdom, because we&#x27;re running our RPis as server systems not clients, is to set rtw_power_mgnt=0 and rtw_enusbss=0 to prevent the dongle going into power saving and to ignore the other two parms because they don&#x27;t make any difference. If the server goes into power saving we&#x27;d need a process to wake it up. That&#x27;s different from a client system where interaction from a keyboard user will trigger a request to wake up and associate the dongle.</span><br></pre></td></tr></table></figure><p>最终配置文件为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">options 88x2bu rtw_drv_log_level=2 rtw_led_ctrl=1 rtw_vht_enable=2 rtw_power_mgnt=0 rtw_switch_usb_mode=1 rtw_ips_mode=1 rtw_enusbss=0 rtw_beamform_cap=11</span><br></pre></td></tr></table></figure><p>由于购买的网卡为 USB2.0 接口，不支持 USB3.0，需要 <code>rtw_switch_usb_mode=0/2</code> 才能正常使用。</p><h4 id="一些关于-RTL8812BU-驱动-x2F-hostapd-的问题"><a href="#一些关于-RTL8812BU-驱动-x2F-hostapd-的问题" class="headerlink" title="一些关于 RTL8812BU 驱动 &#x2F; hostapd 的问题"></a>一些关于 RTL8812BU 驱动 &#x2F; hostapd 的问题</h4><p>hostapd 完整配置文件注释：<a href="https://w1.fi/cgit/hostap/plain/hostapd/hostapd.conf">https://w1.fi/cgit/hostap/plain/hostapd/hostapd.conf</a></p><p>配置文件中最好去除注释，可能会有奇怪的问题</p><p>这张网卡无法在初始启动时应用 <code>ht_capab=[HT40-][HT40+][SHORT-GI-40][DSSS_CCK-40]</code> 设置 <code>40/80MHz</code> 带宽，似乎是网卡直接 <code>UNINITIALIZED-&gt;HT_SCAN</code> 有问题，会进行 <code>neighbor scanning</code> ，然后出现 <code>hostapd[10529]: Failed to request a scan of neighboring BSSes ret=-16 (Device or resource busy)</code> 错误。必须先以普通 <code>20MHz</code> 模式启动，然后转为（restart） <code>40/80MHz</code>。</p><p>启动时配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">interface=wlx1cbfce82adb3</span><br><span class="line"></span><br><span class="line">bridge=brlan</span><br><span class="line"></span><br><span class="line">hw_mode=a</span><br><span class="line">channel=149</span><br><span class="line">ieee80211n=1</span><br><span class="line">wmm_enabled=1</span><br><span class="line"></span><br><span class="line">ssid=RASPNET_402</span><br><span class="line"></span><br><span class="line">auth_algs=1</span><br><span class="line"></span><br><span class="line">wpa=2</span><br><span class="line">wpa_key_mgmt=WPA-PSK</span><br><span class="line">rsn_pairwise=CCMP</span><br><span class="line"></span><br><span class="line">wpa_passphrase=密码</span><br></pre></td></tr></table></figure><p>修改为如下配置后 restart ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">interface=wlx1cbfce82adb3</span><br><span class="line"></span><br><span class="line">bridge=brlan</span><br><span class="line"></span><br><span class="line">hw_mode=a</span><br><span class="line">channel=149</span><br><span class="line">ieee80211n=1</span><br><span class="line">ieee80211ac=1</span><br><span class="line">wmm_enabled=1</span><br><span class="line">ht_capab=[HT40-][HT40+][SHORT-GI-40][DSSS_CCK-40]</span><br><span class="line">vht_capab=[VHT80][SHORT-GI-80]</span><br><span class="line"></span><br><span class="line">ssid=RASPNET_402</span><br><span class="line"></span><br><span class="line">auth_algs=1</span><br><span class="line"></span><br><span class="line">wpa=2</span><br><span class="line">wpa_key_mgmt=WPA-PSK</span><br><span class="line">rsn_pairwise=CCMP</span><br><span class="line"></span><br><span class="line">wpa_passphrase=密码</span><br></pre></td></tr></table></figure><p><strong>Updated</strong> 似乎是因为放在5G路由器旁边的原因…</p><h4 id="一些没什么效果的尝试"><a href="#一些没什么效果的尝试" class="headerlink" title="一些没什么效果的尝试"></a>一些没什么效果的尝试</h4><h5 id="gt-换驱动"><a href="#gt-换驱动" class="headerlink" title="&gt; 换驱动"></a>&gt; 换驱动</h5><p><a href="https://github.com/cilynx/rtl88x2bu">https://github.com/cilynx/rtl88x2bu</a>，在 arm64 系统上编译所需的额外操作：<a href="https://github.com/PieGuy314/RTL88x2BU-RPi4-arm64-Driver-Patch">https://github.com/PieGuy314/RTL88x2BU-RPi4-arm64-Driver-Patch</a></p><h5 id="gt-修改-hostapd-源码重新编译"><a href="#gt-修改-hostapd-源码重新编译" class="headerlink" title="&gt; 修改 hostapd 源码重新编译"></a>&gt; 修改 hostapd 源码重新编译</h5><p><code>hostapd</code> 编译方式：<a href="https://leux.cn/doc/hostapd.html">https://leux.cn/doc/hostapd.html</a></p><p>在源码中找到 <code>neighboring BSSes</code> 的对应部分，修改返回值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">install -D hostapd /usr/local/bin//hostapd</span><br><span class="line">install -D hostapd_cli /usr/local/bin//hostapd_cli</span><br></pre></td></tr></table></figure><p>2.9 版本似乎有点问题，目前在用 2.8 版本。</p><h4 id="新网卡"><a href="#新网卡" class="headerlink" title="新网卡"></a>新网卡</h4><p>原来的网卡是 USB2.0 的网卡，退货换了一个 3.0 的。</p><p>然而最终发现，新的网卡在运行在使用 <code>rtw_switch_usb_mode=1</code> 运行在 <code>USB3.0</code> 模式时会发生各种错误，且不稳定；而使用 <code>rtw_switch_usb_mode=1</code> 运行在 <code>USB2.0</code> 模式（插在哪个物理口都行）时会保持稳定。</p><p><strong>Update 2022.02.15：</strong>相关问题也已经在驱动存储库的说明中提及了，见 <a href="https://github.com/morrownr/88x2bu-20210702">88x2bu-20210702</a>。</p><p>只能跑在 2.0 模式了，速度大概在 200Mbps 左右。</p><p>最终配置文件：</p><figure class="highlight plaintext"><figcaption><span>/etc/modprobe.d/88x2bu.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">options 88x2bu rtw_drv_log_level=3 rtw_led_ctrl=1 rtw_vht_enable=2 rtw_power_mgnt=1 rtw_switch_usb_mode=0 rtw_ips_mode=1 rtw_enusbss=0 rtw_beamform_cap=11</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>/etc/hostapd/hostapd.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">interface=wlx1cbfceb110dc</span><br><span class="line">driver=nl80211</span><br><span class="line"></span><br><span class="line">country_code=CN</span><br><span class="line">hw_mode=a</span><br><span class="line">channel=149</span><br><span class="line">ieee80211n=1</span><br><span class="line">ieee80211ac=1</span><br><span class="line">wmm_enabled=1</span><br><span class="line">ht_capab=[HT40-][HT40+][SHORT-GI-40][DSSS_CCK-40]</span><br><span class="line">vht_capab=[HTC-VHT][MAX-MPDU-11454][SHORT-GI-80]</span><br><span class="line"></span><br><span class="line">ssid=RASPNET_402</span><br><span class="line"></span><br><span class="line">wpa=2</span><br><span class="line">wpa_key_mgmt=WPA-PSK</span><br><span class="line">rsn_pairwise=CCMP</span><br><span class="line"></span><br><span class="line">wpa_passphrase=密码</span><br></pre></td></tr></table></figure><p>使用的 <code>hostapd</code> 版本： <code>hostapd v2.8</code>。</p><h2 id="Clash-代理-AdGuardHome-广告屏蔽"><a href="#Clash-代理-AdGuardHome-广告屏蔽" class="headerlink" title="Clash 代理 + AdGuardHome 广告屏蔽"></a>Clash 代理 + AdGuardHome 广告屏蔽</h2><h3 id="配置-Clash"><a href="#配置-Clash" class="headerlink" title="配置 Clash"></a>配置 Clash</h3><p>Clash 部署：<a href="https://cherysunzhang.com/2020/05/deploy-clash-as-transparent-proxy-on-raspberry-pi/">https://cherysunzhang.com/2020/05/deploy-clash-as-transparent-proxy-on-raspberry-pi/</a></p><p>关于代理与 DNS 解析的原理说明：<a href="https://blog.skk.moe/post/what-happend-to-dns-in-proxy/">https://blog.skk.moe/post/what-happend-to-dns-in-proxy/</a></p><p>DNS 配置可参考：<a href="http://blog.joylau.cn/2020/05/01/Clash-Config/">http://blog.joylau.cn/2020/05/01/Clash-Config/</a></p><p>Clash 可以配置 <code>proxy-providers</code> 订阅代理，使用 <a href="https://github.com/Loyalsoldier/clash-rules">https://github.com/Loyalsoldier/clash-rules</a> 配置 <code>rules</code></p><p>可以使用 <code>subconverter</code> 筛选处理订阅节点：<a href="https://www.10101.io/2020/02/12/use-clash-proxy-provider-with-subconverter">https://www.10101.io/2020/02/12/use-clash-proxy-provider-with-subconverter</a></p><p><code>subconverter</code> 中文文档：<a href="https://github.com/tindy2013/subconverter/blob/master/README-cn.md">https://github.com/tindy2013/subconverter/blob/master/README-cn.md</a></p><p><strong>后续</strong>：发现机场提供了 <code>subconverter</code> ，不需要本地部署啦~</p><h3 id="开启终端代理"><a href="#开启终端代理" class="headerlink" title="开启终端代理"></a>开启终端代理</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>设置 clash 配置文件 <code>mixed-port: 7890</code> ，在终端中运行（或添加到 <code>~/.bashrc</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:7890</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>使用 <code>Proxychains</code></p><p>安装后设置配置文件 <code>/etc/proxychains.conf</code> ，在最后一行设置本地代理服务器和端口 <code>http 127.0.0.1 7890</code> ，在 <code>/usr/lib/proxychains3/proxyresolv</code> 中将原有的 DNS 4.2.2.2 改为本机的 DNS 服务器</p><p>然后使用 <code>proxychains + 指令</code> 进行代理，或者直接 <code>proxychains bash</code> 开启全代理的终端</p><p>使用 sudo 时会报错：<code>ERROR: ld.so: object &#39;libproxychains.so.3&#39; from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.</code></p><p>解决方法：使用 <code>find /usr/ -name libproxychains.so.3 -print</code> 找到库的位置，然后参考：<a href="https://parrotsec-cn.org/t/proxychains/3012">https://parrotsec-cn.org/t/proxychains/3012</a> 修改文件</p><h3 id="配置-AdGuardHome"><a href="#配置-AdGuardHome" class="headerlink" title="配置 AdGuardHome"></a>配置 AdGuardHome</h3><p>最终决定将 Clash 作为 AdGuardHome 的上游服务器</p><p>在 <code>/etc/dnsmasq.conf</code> 中设置 <code>port=0</code> 关闭 <code>dnsmasq</code> 的 DNS 服务</p><p>安装 <code>AdGuardHome</code> ：<a href="https://github.com/AdguardTeam/AdGuardHome#installation">https://github.com/AdguardTeam/AdGuardHome#installation</a></p><p>配置 <code>AdGuardHome</code> DNS 服务端口为 53，上游 DNS 服务器为 Clash 的 DNS 服务（Clash 需开启 DNS 服务）</p><p>透明代理：假设 Clash 的 <code>redir-port</code>为 <code>7891</code>，<code>iptable</code> 进行以下设置：</p><p><strong>Update 2022.04.23：</strong> 由于校园网分配的是公网IP，所以需要设置防火墙，限制 Clash 服务只能被内网访问，防止端口被扫到被攻击（会导致大量连接和高 CPU 占用）。iptables 也做了更新，增加了简单的防护。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 防止外网使用内网 IP 欺骗</span></span><br><span class="line">iptables -A INPUT -i eth0 -s 192.168.0.0/16 -j DROP</span><br><span class="line"><span class="comment"># 允许已建立的连接通过</span></span><br><span class="line">iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line"><span class="comment"># 允许本机和内网 IP 的所有访问</span></span><br><span class="line">iptables -A INPUT -s 127.0.0.1 -j ACCEPT</span><br><span class="line">iptables -A INPUT -s 192.168.0.0/16 -j ACCEPT</span><br><span class="line"><span class="comment"># 允许来自无线 AP 的 DHCP 请求, wlx1cbfceb110dc 为网卡名</span></span><br><span class="line">iptables -A INPUT -i wlx1cbfceb110dc -p udp --dport 67 -j ACCEPT</span><br><span class="line"><span class="comment"># 开放外网 SSH, HTTP, HTTPS 连接</span></span><br><span class="line">iptables -A INPUT -p tcp -m multiport --dport 22,80,443 -j ACCEPT</span><br><span class="line"><span class="comment"># 若不是允许内网 IP 的所有访问, 则需添加该规则允许内网对 Clash 的访问</span></span><br><span class="line"><span class="comment"># iptables -A INPUT -s 192.168.0.0/16 -p tcp -m tcp --dport 7891 -j ACCEPT</span></span><br><span class="line"><span class="comment"># 丢弃其他所有请求</span></span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将转发后的包源地址修改为本机地址</span></span><br><span class="line">iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line"></span><br><span class="line">iptables -t nat -N clash</span><br><span class="line"><span class="comment"># 内网 TCP 请求转发给 clash 链</span></span><br><span class="line">iptables -t nat -A PREROUTING -s 192.168.0.0/16 -p tcp -j clash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问内网不经过 clash</span></span><br><span class="line">iptables -t nat -A clash -d 10.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t nat -A clash -d 127.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t nat -A clash -d 169.254.0.0/16 -j RETURN</span><br><span class="line">iptables -t nat -A clash -d 172.16.0.0/12 -j RETURN</span><br><span class="line">iptables -t nat -A clash -d 192.168.0.0/16 -j RETURN</span><br><span class="line">iptables -t nat -A clash -d 224.0.0.0/4 -j RETURN</span><br><span class="line">iptables -t nat -A clash -d 240.0.0.0/4 -j RETURN</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其余请求重定向至 clash 端口</span></span><br><span class="line">iptables -t nat -A clash -p tcp -j REDIRECT --to-ports 7891</span><br></pre></td></tr></table></figure><p>在 <code>/etc/dnsmasq.conf</code> 中将默认网关和默认 DNS 服务器设为本机，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface=wlx1cbfceb110dc</span><br><span class="line">dhcp-range=192.168.22.100,192.168.22.200,255.255.255.0,24h</span><br><span class="line">dhcp-option=3,192.168.22.1</span><br><span class="line">dhcp-option=6,192.168.22.1</span><br></pre></td></tr></table></figure><p>如上，连入树莓派网络即可走代理访问。</p><h3 id="回环问题"><a href="#回环问题" class="headerlink" title="回环问题"></a>回环问题</h3><p>Clash 做透明代理时访问对应端口会产生回环，有时候这个问题会莫名其妙地出现。</p><h4 id="解决尝试一"><a href="#解决尝试一" class="headerlink" title="解决尝试一"></a>解决尝试一</h4><p>解决方案：<a href="https://github.com/Dreamacro/clash/issues/425#issuecomment-566982655">https://github.com/Dreamacro/clash/issues/425#issuecomment-566982655</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp -m tcp --dport 7891 -m connmark ! --mark 500 -j REJECT</span><br><span class="line">...</span><br><span class="line">iptables -A CLASH -p tcp -j CONNMARK --set-mark 500</span><br><span class="line">iptables -A CLASH -p tcp -j REDIRECT --to-ports 7891</span><br></pre></td></tr></table></figure><h4 id="解决尝试二"><a href="#解决尝试二" class="headerlink" title="解决尝试二"></a>解决尝试二</h4><p>似乎去除 udp 相关 iptables 可以解决，已将上面的配置文件更新，有待观察。<strong>UPD:未解决</strong></p><h4 id="解决尝试三"><a href="#解决尝试三" class="headerlink" title="解决尝试三"></a>解决尝试三</h4><p>似乎改端口可能解决，有待观察。</p><p><strong>Update 2022.02.15：</strong>暂时还没有遇到问题。</p><h2 id="文件存储服务器"><a href="#文件存储服务器" class="headerlink" title="文件存储服务器"></a>文件存储服务器</h2><h3 id="USB-移动硬盘"><a href="#USB-移动硬盘" class="headerlink" title="USB 移动硬盘"></a>USB 移动硬盘</h3><p>硬盘处理：使用 <em>DiskGenius</em>  软件将硬盘分区为 ext4。</p><p>插入硬盘，<code>sudo fdisk -l</code> 查看硬盘设备号，如 <code>/dev/sda1</code>。</p><p><code>sudo mount /dev/sda1 /data</code> 进行挂载，挂载完后可通过 <code>df -hT</code> 查看空间使用情况。</p><p>永久挂载：在 <code>/etc/fstab</code> 中加入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/sda1       /data           ext4    defaults          0      0</span><br></pre></td></tr></table></figure><p><code>sudo mount -a</code> 检查是否有问题。</p><p><strong>重要：</strong>为了防止关机时直接对硬盘断电损伤硬盘，参考如下设置（似乎只对 <code>shutdown</code>  后手动重启有用，<code>reboot</code> 没用）：<a href="https://iovxw.net/p/park-external-hdd/">https://iovxw.net/p/park-external-hdd/</a>。</p><h3 id="SMB-服务器"><a href="#SMB-服务器" class="headerlink" title="SMB 服务器"></a>SMB 服务器</h3><p><strong>（已弃用）</strong>使用 <code>Openwrt</code> 的 SMB 服务，在 <code>网络存储-&gt;网络共享</code> 里设置共享目录，在 <code>网络存储-&gt;挂载 SMB 网络共享</code> 里开启 SMB 服务。</p><p>直接在树莓派原系统内开设 Samba 服务器：<a href="https://zhuanlan.zhihu.com/p/266495858">https://zhuanlan.zhihu.com/p/266495858</a>。</p><p><code>testparm –v</code> 检查 <code>smb.conf</code> 配置是否正确。</p><p><code>rlimit_max: increasing rlimit_max (1024) to minimum Windows limit (16384)</code> 的解决方法：<a href="https://ixnfo.com/en/samba-warning-solution-rlimit_max-increasing-rlimit_max-1024-to-minimum-windows-limit-16384.html">https://ixnfo.com/en/samba-warning-solution-rlimit_max-increasing-rlimit_max-1024-to-minimum-windows-limit-16384.html</a></p><h2 id="Aria2-下载机"><a href="#Aria2-下载机" class="headerlink" title="Aria2 下载机"></a>Aria2 下载机</h2><p>新建用户：<code>sudo adduser aria2</code> 并进行相关用户组设定。</p><p><a href="https://li-aaron.github.io/2019/01/aira2-on-raspberry/">https://li-aaron.github.io/2019/01/aira2-on-raspberry/</a> ，将命令和配置文件中的 <code>~</code> 都换为绝对路径。</p><p>配置文件参考：<a href="http://ivo-wang.github.io/2019/04/18/%E5%85%B3%E4%BA%8Earia2%E6%9C%80%E5%AE%8C%E6%95%B4%E7%9A%84%E4%B8%80%E7%AF%87/">http://ivo-wang.github.io/2019/04/18/%E5%85%B3%E4%BA%8Earia2%E6%9C%80%E5%AE%8C%E6%95%B4%E7%9A%84%E4%B8%80%E7%AF%87/</a></p><p><strong>Update 2021.09.27：</strong>现在使用的是 <a href="https://p3terx.com/archives/docker-aria2-pro.html">Aria2 Pro</a>。</p><h2 id="MC-服务器配置"><a href="#MC-服务器配置" class="headerlink" title="MC 服务器配置"></a>MC 服务器配置</h2><h3 id="MC1-16-及以前-amp-amp-Ubuntu"><a href="#MC1-16-及以前-amp-amp-Ubuntu" class="headerlink" title="MC1.16 及以前 &amp;&amp; Ubuntu"></a>MC1.16 及以前 &amp;&amp; Ubuntu</h3><p>依照 <a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu-ports/">https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu-ports/</a> 换源，<code>sudo apt update</code> （或<code>sudo apt-get full-upgrade</code>）进行更新。</p><p><code>sudo apt install openjdk-8-jre-headless</code> 安装 <code>java8</code>。</p><p>于是直接按照正常 <code>Ubuntu</code> 情况配置 MC 服务器即可。</p><h3 id="MC1-17-amp-amp-Raspberry-OS-64it"><a href="#MC1-17-amp-amp-Raspberry-OS-64it" class="headerlink" title="MC1.17 &amp;&amp; Raspberry OS 64it"></a>MC1.17 &amp;&amp; Raspberry OS 64it</h3><p>截至 <code>2021.08.06</code> ，<code>openjdk-16</code> 在 <code>debian</code> 下只有 <code>unstable(sid)</code> 版，所以需要一些额外的配置来安装。</p><p>参考：<a href="https://packages.debian.org/sid/arm64/openjdk-16-jdk/download">https://packages.debian.org/sid/arm64/openjdk-16-jdk/download</a></p><p>向 <code>/etc/apt/sources.list</code> 中添加 <code>deb http://ftp.de.debian.org/debian sid main</code> （用完后记得注释掉）。</p><p>执行 <code>sudo apt install openjdk-16-jre-headless</code> 安装 <code>java16</code>。</p><p>MC服务器的剩余步骤照常，可参考：<a href="https://blog.csdn.net/qq_36290650/article/details/106978441">https://blog.csdn.net/qq_36290650/article/details/106978441</a>。</p><h2 id="同步照片"><a href="#同步照片" class="headerlink" title="同步照片"></a>同步照片</h2><h3 id="Lomorage-（已弃用）"><a href="#Lomorage-（已弃用）" class="headerlink" title="Lomorage （已弃用）"></a>Lomorage （已弃用）</h3><p>使用 <a href="https://github.com/lomorage/homepage">Lomorage</a>，使用 apt 安装。</p><p>文档：<a href="https://docs.lomorage.com/zh/docs/Installation/lomorage-service/installation-raspbian/">https://docs.lomorage.com/zh/docs/Installation/lomorage-service/installation-raspbian/</a></p><p>apt 安装后来出现了一些依赖问题，且 APP 实在有些丑，于是弃用。</p><h3 id="Syncthing"><a href="#Syncthing" class="headerlink" title="Syncthing"></a>Syncthing</h3><p><a href="https://github.com/syncthing/syncthing">syncthing</a></p><p>安卓客户端：<a href="https://github.com/syncthing/syncthing-android">https://github.com/syncthing/syncthing-android</a></p><p>安卓客户端增强版：<a href="https://github.com/catfriend1/syncthing-android">https://github.com/catfriend1/syncthing-android</a></p><p><code>sudo apt install syncthing</code> 安装，<code>sudo systemctl enable syncthing@pi.service</code> 启动服务。</p><p>apt 安装的版本过于老旧，需要从 github 上下载最新版本，扔到 <code>/usr/bin/</code> 里替换掉。</p><p>可以在云服务器上搭建发现服务器和中继服务器。</p><h2 id="功能杂项"><a href="#功能杂项" class="headerlink" title="功能杂项"></a>功能杂项</h2><h3 id="同步百度云"><a href="#同步百度云" class="headerlink" title="同步百度云"></a>同步百度云</h3><p>使用 <a href="https://github.com/houtianze/bypy">bypy</a></p><h3 id="给装在树莓派上的-TF-卡续命"><a href="#给装在树莓派上的-TF-卡续命" class="headerlink" title="给装在树莓派上的 TF 卡续命"></a>给装在树莓派上的 TF 卡续命</h3><p>参考：<a href="https://raspberrypi.stackexchange.com/questions/169/how-can-i-extend-the-life-of-my-sd-card">https://raspberrypi.stackexchange.com/questions/169/how-can-i-extend-the-life-of-my-sd-card</a></p><h3 id="省电"><a href="#省电" class="headerlink" title="省电"></a>省电</h3><h4 id="USB供电控制"><a href="#USB供电控制" class="headerlink" title="USB供电控制"></a>USB供电控制</h4><p>USB 硬盘使用 udisksctl 安全移除，USB 端口使用 uhubctl 断电。</p><p>udisksctl: <code>sudo apt install udisks2</code></p><p>uhubctl: <a href="https://github.com/mvp/uhubctl">https://github.com/mvp/uhubctl</a></p><figure class="highlight bash"><figcaption><span>usb-down.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">udisksctl unmount -b /dev/sda1  <span class="comment"># 将硬盘卸载</span></span><br><span class="line">udisksctl power-off -b /dev/sda <span class="comment"># 将硬盘数据断电，表现为硬盘停转</span></span><br><span class="line">systemctl stop hostapd.service  <span class="comment"># 将网卡的 AP 服务停止</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sleep</span> 2 <span class="comment"># 延迟一会儿防止服务未关闭</span></span><br><span class="line"></span><br><span class="line">uhubctl -l 2 -a off <span class="comment"># 关闭USB电源</span></span><br><span class="line"><span class="comment"># 由于只有当四个USB端口都关闭时才会断电，索性直接全部断了</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>usb-up.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">uhubctl -l 2 -a on <span class="comment"># 打开USB电源</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sleep</span> 5 <span class="comment"># 延迟一会儿等待USB设备识别</span></span><br><span class="line"></span><br><span class="line">mount -a <span class="comment"># 恢复硬盘挂载</span></span><br><span class="line">systemctl start hostapd.service <span class="comment"># 开启 AP 服务</span></span><br></pre></td></tr></table></figure><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><p><a href="https://www.raspberrypi.org/forums/viewtopic.php?t=257144">https://www.raspberrypi.org/forums/viewtopic.php?t=257144</a></p><p><a href="https://learn.pi-supply.com/make/how-to-save-power-on-your-raspberry-pi/">https://learn.pi-supply.com/make/how-to-save-power-on-your-raspberry-pi/</a></p><p>可以参考上面关闭 HDMI，LED 等。</p><h3 id="相机"><a href="#相机" class="headerlink" title="相机"></a>相机</h3><p>参考：<a href="https://www.raspberrypi.org/forums/viewtopic.php?t=285868">https://www.raspberrypi.org/forums/viewtopic.php?t=285868</a></p><p><code>vcgencmd get_camera</code> 检查相机是否开启。</p><p><code>sudo modprobe bcm2835-v4l2</code></p><h3 id="vcgencmd"><a href="#vcgencmd" class="headerlink" title="vcgencmd"></a>vcgencmd</h3><p>参考：</p><ul><li><a href="https://www.raspberrypi.org/documentation/computers/os.html#vcgencmd">https://www.raspberrypi.org/documentation/computers/os.html#vcgencmd</a></li><li><a href="https://www.lxx1.com/3683">https://www.lxx1.com/3683</a></li></ul><h3 id="DDNS"><a href="#DDNS" class="headerlink" title="DDNS"></a>DDNS</h3><p>使用 <code>Cloudflare</code> 的 DNS 托管。</p><p>参考：<a href="https://blog.wardchan.com/posts/use-ddclient-to-automatically-update-cloudflare-dns-record.html">https://blog.wardchan.com/posts/use-ddclient-to-automatically-update-cloudflare-dns-record.html</a></p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>额外购置了一张与原来同款的 32G TF 卡，本来打算升级&#x2F;重装系统和网卡驱动，但是驱动上遇到了稳定性问题，就懒得重装系统了，于是当作备份卡吧。</p><h4 id="创建镜像备份法"><a href="#创建镜像备份法" class="headerlink" title="创建镜像备份法"></a>创建镜像备份法</h4><p>使用 <a href="https://win32diskimager.download/">win32diskimager</a>，把 TF 卡插到电脑上，可以生成整个卡的镜像文件。</p><p>接着使用 <a href="https://github.com/Drewsif/PiShrink">PiShrink</a> 裁剪镜像。需要使用 Linux, WSL 实测没问题。</p><h4 id="在线拷卡备份法"><a href="#在线拷卡备份法" class="headerlink" title="在线拷卡备份法"></a>在线拷卡备份法</h4><p>使用 <a href="https://github.com/billw2/rpi-clone">rpi-clone</a>，可以进行增量备份，适合使用另一张卡定期备份。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/billw2/rpi-clone.git</span><br><span class="line">cd rpi-clone</span><br><span class="line">sudo cp rpi-clone /usr/local/bin/</span><br></pre></td></tr></table></figure><p>安装完成后，<code>sudo fdisk -l</code> 找到 USB 口上的备份卡，如 <code>/dev/sdc</code> 然后 <code>sudo rpi-clone /dev/sdc</code> 即可进行增量备份。</p><h3 id="UART-与蓝牙"><a href="#UART-与蓝牙" class="headerlink" title="UART 与蓝牙"></a>UART 与蓝牙</h3><p>树莓派与 UPS 间的通讯使用 UART 串口通信。</p><p>参考：<a href="https://zhuanlan.zhihu.com/p/106904186">https://zhuanlan.zhihu.com/p/106904186</a></p><blockquote><p>本文介绍在Raspberry Pi 3、3+，4和Raspberry Pi Zero W上配置串行端口。<br>上述的几种树莓派包含两个可用于串行通信的UART控制器，也就是常说的串口：mini UART和PL011 UART。默认情况下，mini UART映射到40引脚GPIO连接器的TXD（GPIO 14）和RXD（GPIO 15）上，PL011 UART用于蓝牙模块​​，但是任何一个模块都可以映射到GPIO端口。</p></blockquote><p>额外参考：</p><ul><li><a href="https://forums.raspberrypi.com/viewtopic.php?t=309763">https://forums.raspberrypi.com/viewtopic.php?t=309763</a></li><li><a href="https://forums.raspberrypi.com/viewtopic.php?t=261753">https://forums.raspberrypi.com/viewtopic.php?t=261753</a></li></ul><h2 id="问题杂项"><a href="#问题杂项" class="headerlink" title="问题杂项"></a>问题杂项</h2><h3 id="systemctl-status-不显示内存占用"><a href="#systemctl-status-不显示内存占用" class="headerlink" title="systemctl status 不显示内存占用"></a>systemctl status 不显示内存占用</h3><p><a href="https://dmesg.app/systemd-accounting.html">https://dmesg.app/systemd-accounting.html</a> （似乎还是不行）</p><h3 id="VsCode-远程连接"><a href="#VsCode-远程连接" class="headerlink" title="VsCode 远程连接"></a>VsCode 远程连接</h3><p>出现 <code>command: &#39;_workbench.downloadResource&#39; failed</code> 错误。</p><p>解决方法：本地的梯子（远程端不需要梯子）开成全局代理。</p><h3 id="在使用充电宝-x2F-UPS单独供电时，通过AP满负荷读写移动硬盘可能导致USB接口掉电"><a href="#在使用充电宝-x2F-UPS单独供电时，通过AP满负荷读写移动硬盘可能导致USB接口掉电" class="headerlink" title="在使用充电宝&#x2F;UPS单独供电时，通过AP满负荷读写移动硬盘可能导致USB接口掉电"></a>在使用充电宝&#x2F;UPS单独供电时，通过AP满负荷读写移动硬盘可能导致USB接口掉电</h3><p>换用电源供电暂未发现问题。</p><p><strong>Update 2021.09.11：</strong> <strong>换用电源供电也会出现问题</strong>，于是加了一个带独立供电的 USB 拓展坞，由于手头只有一个 USB2.0 的拓展坞，所以只将无线网卡接到拓展坞上，实测减轻了约 0.3A 的树莓派 USB 负载，是否可以有效防止掉盘还待检验。</p><h3 id="硬盘维护"><a href="#硬盘维护" class="headerlink" title="硬盘维护"></a>硬盘维护</h3><p><code>fsck -f /dev/sda1</code> 检查文件系统。</p><p><code>fsck -c /dev/sda1</code> 扫描。</p><p><code>sudo smartctl -a /dev/sda</code> 查看 S.M.A.R.T. 信息。</p><p>使用 <code>smartctl</code> 进行硬盘测试。</p><p>修复：<a href="https://www.smartmontools.org/wiki/BadBlockHowto">https://www.smartmontools.org/wiki/BadBlockHowto</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2021 年初的时候入手了树莓派 4b，然后暑假的时候好好折腾了一下，留下了一些零散的记录，在这里整理起来，之后哪天重建的时候还能来参考一下。&lt;/p&gt;
&lt;p&gt;由于距离记录已经有一段时间了，可能有些内容会有偏差。&lt;/p&gt;</summary>
    
    
    
    <category term="折腾" scheme="https://blog.centaurus99.com/categories/%E6%8A%98%E8%85%BE/"/>
    
    <category term="树莓派" scheme="https://blog.centaurus99.com/categories/%E6%8A%98%E8%85%BE/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
    <category term="树莓派" scheme="https://blog.centaurus99.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
</feed>
